/*!
 *  Bayrell Cloud OS
 *
 *  (c) Copyright 2020 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Bayrell.CloudOS.BUS;

use Runtime.rtl;
use Runtime.lib;
use Runtime.Web.App.BusList;
use Runtime.Web.App.BusMethod;
use Runtime.Web.App.RemoteCallAnswer;
use Runtime.Web.App.RemoteCallRequest;
use Bayrell.CloudOS.ORM.NginxFile;
use Bayrell.CloudOS.ORM.TopMenu;
use Bayrell.CloudOS.ORM.User;


@BusList{ "object_name": "Bayrell.CloudOS.Balancer", "interface_name": "default" }
static class Balancer
{
	
	/**
	 * Get nginx changes
	 */
	@BusMethod{ "method_name": "getNginxChanges" }
	static async list getNginxChangesAction(RemoteCallRequest request, RemoteCallAnswer answer)
	{
		int timestamp = request["data", "timestamp"] |> default int 0;
		
		/* Get files */
		Collection<Dict> files = NginxFile::select()
			|> .filter([
				["timestamp", ">=", timestamp]
			])
			|> .asRecord(false)
			|> await .all()
			|> .map( lib::intersect(["name", "enable", "content", "timestamp", "is_deleted"]) )
		;
		
		answer = answer::success(answer, files);
		
		return [ request, answer ];
	}
	
	
	
	/**
	 * Get users
	 */
	@BusMethod{ "method_name": "getUsers" }
	static async list getUsersAction(RemoteCallRequest request, RemoteCallAnswer answer)
	{
		Collection<Dict> files = User::select()
			|> .asRecord(false)
			|> await .all()
			|> .map( lib::intersect(["user_id", "login", "name", "banned", "is_deleted"]) )
		;
		
		answer = answer::success(answer, files);
		
		return [ request, answer ];
	}
	
	
	
	/**
	 * Get top menu
	 */
	@BusMethod{ "method_name": "getTopMenu" }
	static async list getTopMenuAction(RemoteCallRequest request, RemoteCallAnswer answer)
	{
		Collection<Dict> files = TopMenu::select()
			|> .asRecord(false)
			|> await .all()
			|> .map( lib::intersect(["id", "name", "href", "pos"]) )
		;
		
		answer = answer::success(answer, files);
		
		return [ request, answer ];
	}
	
}