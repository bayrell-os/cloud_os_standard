/*!
 *  Bayrell Cloud OS
 *
 *  (c) Copyright 2020 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Bayrell.CloudOS;

use Runtime.fs;
use Runtime.lib;
use Runtime.DateTime;
use Runtime.ORM.ConnectionInterface as Connection;
use Runtime.ORM.CursorInterface as Cursor;
use Runtime.ORM.Record;
use Runtime.Task.CronTimer;
use Runtime.Task.TaskDriver;
use Runtime.Task.TaskList;
use Runtime.Task.TaskMethod;
use Bayrell.CloudOS.ORM.Domain;
use Bayrell.CloudOS.ORM.Layer;
use Bayrell.CloudOS.ORM.NginxFile;
use Bayrell.CloudOS.ORM.Route;
use Bayrell.CloudOS.ORM.Space;
use Bayrell.CloudOS.ORM.Service;
use Bayrell.CloudOS.DockerLib;


@TaskList{}
class DockerTasks
{
	
	/**
	 * Update services admin pages
	 */
	@CronTimer{ "timer": 15, "alias": "clous_os_cron", "description": "Cloud OS update cron task" }
	static async void cron()
	{
		/* Sync services */
		await static::syncServices(true);
		
		/* Update nginx */
		await static::updateUpstreams();
		await static::updateDomains();
		
		/* Reload nginx */
		await static::updateNginxFiles();
	}
	
	
	
	/**
	 * Sync services
	 */
	@TaskMethod{ "alias": "sync_services", "description": "Sync services table" }
	static async void syncServices(bool output_log = false)
	{
		Cursor cursor = null;
		TaskDriver output = @.getDriver(classof TaskDriver);
		
		/* Connect to database */
		Dict db_settings = {};
		Connection conn = await Record::connect(db_settings);
		
		int time = rtl::time();
		
		/* Get nodes */
		string s = await DockerLib::dockerApi("/nodes");
		Dict nodes = s
			|> rtl::json_decode
			|> lib::transition( list (Dict node) => [ node, node["ID"] ] )
		;
		
		/* Get services */
		string s = await DockerLib::dockerApi("/services");
		Collection services = rtl::json_decode(s);
		
		for (int i=0; i<services.count(); i++)
		{
			Dict json = services.item(i);
			string service_id = json.get("ID", "");
			string service_name = json |> attr "Spec", "Name" |> default string "";
			string stack_name = json |> attr "Spec", "Labels", "com.docker.stack.namespace" |> default string "";
			string service_image = json |> attr "Spec", "TaskTemplate", "ContainerSpec", "Image" |> default string "";
			string service_short_name = rs::substr(service_name, rs::Strlen(stack_name) + 1);
			
			if (output_log) output.writeln ("Update service " ~ service_name);
			string tasks_str = await DockerLib::dockerApi("/tasks?filters=" ~
				rs::url_encode('{"service":{"' ~ service_name ~ '":true}}'))
			;
			
			Dict tasks = rtl::json_decode(tasks_str);
			
			/* Insert or update */
			await conn.insert_or_update
			(
				"services",
				{
					"docker_name": service_name,
				},
				{
					"stack_name": stack_name,
					"service_name": service_short_name,
					"docker_image": service_image,
					"is_deleted": 0,
					"enable": 1,
					"timestamp": time,
					"docker_json": rtl::json_encode(json),
					"docker_tasks": tasks_str,
					"docker_balancer": rtl::json_encode( static::getBalancerData(json, tasks, nodes) ),
				},
				db_settings
			);
		}
		
		/* Delete old services */
		cursor = await conn.query
		(
			"update services set is_deleted=1, enable=0 where timestamp != :timestamp",
			{
				"timestamp": time,
			},
			db_settings
		)
		await cursor.close();
	}
	
	
	
	/**
	 * Returns balancer data
	 */
	pure Dict getBalancerData(Dict json, Collection tasks, Dict nodes)
	{
		Dict res =
		{
			"State":
			{
				"Work": 0,
				"Total": 0,
			},
			"Tasks": [],
		};
		
		Collection Tasks = [];
		int total = json["Spec", "Mode", "Replicated", "Replicas"] |> default int 1;
		int work = 0;
		
		tasks = tasks.sortIm
		(
			bool (Dict a, Dict b)
			{
				int time_a = DateTime::strtotime( rs::substr(a["Status", "Timestamp"], 0, 19) );
				int time_b = DateTime::strtotime( rs::substr(b["Status", "Timestamp"], 0, 19) );
				return time_a < time_b;
			}
		);
		
		for (int i=0; i<tasks.count(); i++)
		{
			Dict task = tasks.item(i);
			string state = task["Status", "State"];
			string desired_state = task["DesiredState"];
			
			Dict node = nodes[task["NodeID"]];
			Dict service =
			{
				"ID": task["ID"],
				"Status": task["Status"],
				"DesiredState": task["DesiredState"],
				"Slot": task["Slot"],
				"Node": {
					"ID": task["NodeID"],
					"Hostname": node["Description", "Hostname"],
					"Status": node["Status"],
				},
				"Networks": [],
			};
			Collection NetworksAttachments = task["NetworksAttachments"];
			if (NetworksAttachments != null)
			{
				for (int j=0; j<NetworksAttachments.count(); j++)
				{
					Dict network = NetworksAttachments.item(j);
					service <= Networks <= service.Networks.pushIm
					{
						"ID": network["Network", "ID"],
						"Name": network["Network", "Spec", "Name"],
						"Addresses": network["Addresses"],
					};
				}
			}
			Tasks = Tasks.pushIm(service);
			
			if (state == "running" and desired_state == "running")
			{
				work++;
			}
		}
		
		res <= State <= Work <= work;
		res <= State <= Total <= total;
		res <= Tasks <= Tasks;
		
		return res;
	}
	
	
	
	/**
	 * Update nginx files
	 */
	@TaskMethod{ "alias": "update_nginx_files" }
	static async void updateNginxFiles()
	{
		bool res = false;
		if (await static::updateNginxFile("/conf.d/99-cloud-backend-upstreams.conf")) res = true;
		if (await static::updateNginxFile("/inc/services_admin_page.inc")) res = true;
		if (res)
		{
			await static::reloadNginx();
		}
	}
	
	
	
	/**
	 * Update nginx file
	 */
	static async bool updateNginxFile(string file_name)
	{
		TaskDriver output = @.getDriver(classof TaskDriver);
		
		string old_content = "";
		string new_content = "";
		
		NginxFile file = NginxFile::getById(file_name);
		if (file) new_content = file.content;
		
		if (await fs::exists(file_name, "/etc/nginx"))
		{
			old_content = await fs::readFile(file_name, "/etc/nginx");
		}
		
		if (new_content != old_content)
		{
			output.writeln ("Updated nginx file " ~ file_name);
			await fs::saveFile(file_name, new_content, "/etc/nginx");
			return true;
		}
		
		return false;
	}
	
	
	
	/**
	 * Reload nginx files
	 */
	static async void reloadNginx()
	{
		TaskDriver output = @.getDriver(classof TaskDriver);
		output.writeln ("Nginx reload");
		DockerLib::exec("/usr/sbin/nginx -s reload");
	}
	
	
	
	/**
	 * Update upstreams
	 */
	@TaskMethod{ "alias": "update_upstreams" }
	static async void updateUpstreams(Dict db_settings = null)
	{
		string nginx_file_table_name = NginxFile::table_name();
		
		/* Get all services */
		Collection<Service> services = Service::select()
			|> await .all(db_settings)
		;
		
		/* Get admin upstreams */
		Collection<Service> admin_upstreams = services
			|> .filter
			(
				lib::and
				([
					lib::equalAttr("have_admin_page", true),
					lib::equalAttr("enable", true),
					lib::equalAttr("is_deleted", false),
					lib::equalAttrNot("docker_name", ""),
					lib::equalAttrNot("admin_port", 0),
				])
			)
			|> .sortIm( lib::sortAttr("docker_name", "asc") )
		;
		
		/* Update /conf.d/99-cloud-backend-upstreams.conf */
		string upstreams = admin_upstreams
			|> .map
			(
				string (Service service)
				{
					string s = "";
					
					string docker_name = service.docker_name;
					int admin_port = service.admin_port;
					Collection ip_arr = service.getIpAddresses("cloud_backend");
					
					if (ip_arr.count() > 0)
					{
						s ~= "upstream " ~ admin_port ~ "." ~ docker_name ~ ".cloud_backend.example {\n";
						for (int ip_arr_inc=0; ip_arr_inc<ip_arr.count(); ip_arr_inc++)
						{
							string ip = ip_arr[ip_arr_inc];
							s ~= "\tserver " ~ ip ~ ":" ~ admin_port ~ ";\n";
						}
						s ~= "}\n";
					}
					
					return rs::trim(s);
				}
			)
			|> lib::filter( lib::equalNot("") )
			|> lib::join("\n")
		;
		
		/* Update /conf.d/99-cloud-backend-upstreams.conf */
		await NginxFile::updateFile("/conf.d/99-cloud-backend-upstreams.conf", upstreams, db_settings);
		
		/* Update /inc/services_admin_page.inc */
		string content = admin_upstreams
			|> .map
			(
				string (Service service)
				{
					string docker_name = service.docker_name;
					int admin_port = service.admin_port;
					string admin_custom_nginx = service.admin_custom_nginx;
					
					if (admin_custom_nginx != "") return admin_custom_nginx;
					
					string s = "";
					s ~= "location /admin/services/" ~ docker_name ~ "/ {\n";
					s ~= "\tproxy_pass http://" ~ admin_port ~ "." ~ docker_name ~ ".cloud_admin.example/;\n";
					s ~= "\tinclude proxy_params;\n";
					s ~= "\tproxy_set_header X-ROUTE-PREFIX \"/admin/services/" ~ docker_name ~ "\";\n";
					s ~= "}";
					
					return s;
				}
			)
			|> lib::filter( lib::equalNot("") )
			|> lib::join("\n")
		;
		
		/* Update /inc/services_admin_page.inc */
		await NginxFile::updateFile("/inc/services_admin_page.inc", content, db_settings);
		
		/* Update conf.d/99-cloud-frontend-upstreams.conf */
		Collection<Route> routes = Route::select()
			|> .filter
			([
				["enable", "=", true],
			])
			|> await .all(db_settings)
		;
		
		string upstreams = services
			|> .filter
			(
				lib::and
				([
					lib::equalAttr("enable", true),
					lib::equalAttr("is_deleted", false),
					lib::equalAttrNot("docker_name", ""),
				])
			)
			|> .sortIm( lib::sortAttr("docker_name", "asc") )
			|> .map
			(
				string (Service service) use (routes)
				{
					string s = "";
					
					string docker_name = service.docker_name;
					Collection ip_arr = service.getIpAddresses("cloud_frontend");
					
					Map upstreams = new Map();
					Collection<Route> current_routes = routes
						|> .filter
						(
							lib::and
							([
								lib::equalAttr("docker_name", docker_name)
							])
						)
					;
					
					for (int current_routes_inc=0; current_routes_inc<current_routes.count(); current_routes_inc++)
					{
						Route route = current_routes[current_routes_inc];
						string upstream_name = route.target_port ~ "." ~ docker_name ~ ".cloud_frontend.example";
						if (upstreams.has(upstream_name))
						{
							continue;
						}
						upstreams.setValue(upstream_name, upstream_name);
						
						if (ip_arr.count() > 0)
						{
							s ~= "upstream " ~ upstream_name ~ " {\n";
							for (int ip_arr_inc=0; ip_arr_inc<ip_arr.count(); ip_arr_inc++)
							{
								string ip = ip_arr[ip_arr_inc];
								s ~= "\tserver " ~ ip ~ ":" ~ route.target_port ~ ";\n";
							}
							s ~= "}\n";
						}
						
					}
					
					return rs::trim(s);
				}
			)
			|> lib::filter( lib::equalNot("") )
			|> lib::join("\n")
		;
		
		/* Update conf.d/99-cloud-frontend-upstreams.conf */
		await NginxFile::updateFile("/conf.d/99-cloud-frontend-upstreams.conf", upstreams, db_settings);
	}
	
	
	
	/**
	 * Update domains
	 */
	@TaskMethod{ "alias": "update_domains" }
	static async void updateDomains(Dict db_settings = null)
	{
		Collection<Domain> domains = Domain::select()
			|> await .all()
		;
		
		for (int domains_inc=0; domains_inc<domains.count(); domains_inc++)
		{
			Domain domain = domains[domains_inc];
			
			/* Get all domain routes */
			Collection<Route> domain_routes = Route::select()
				|> .filter
				([
					["enable", "=", true],
					["domain_name", "=", domain.domain_name],
					["protocol", "=", "http"],
				])
				|> await .all(db_settings)
			;
			
			Vector<string> nginx_routes = new Vector();
			for (int domain_routes_inc=0; domain_routes_inc<domain_routes.count(); domain_routes_inc++)
			{
				Route domain_route = domain_routes[domain_routes_inc];
				
				string nginx_route = "";
				string upstream_name = domain_route.target_port ~ "." ~ domain_route.docker_name ~ 
					".cloud_frontend.example"
				;
				string domain_route_url = domain_route.route;
				string domain_route_prefix = domain_route.route_prefix;
				if (domain_route_url == "") domain_route_url = "/";
				if (domain_route_prefix == "/") domain_route_prefix = "";
				
				nginx_route ~= "\tlocation " ~ domain_route_url ~ " {\n";
				nginx_route ~= "\t\tproxy_pass http://" ~ upstream_name ~ domain_route_prefix ~ ";\n";
				nginx_route ~= "\t\tinclude proxy_params;\n";
				
				/* Add route prefix */
				if (domain_route_prefix != "")
				{
					nginx_route ~= "\t\tproxy_set_header X-ROUTE-PREFIX \"" ~ domain_route_prefix ~ "\";\n";
				}
				
				/* Add space id */
				if (domain.space_id != "")
				{
					nginx_route ~= "\t\tproxy_set_header X-SPACE-ID \"" ~ domain.space_id ~ "\";\n";
				}
				
				/* Add layer uid */
				if (domain_route.layer_uid != "")
				{
					nginx_route ~= "\t\tproxy_set_header X-LAYER-UID \"" ~ domain_route.layer_uid ~ "\";\n";
				}
				
				nginx_route ~= "\t}";
				
				nginx_routes.pushValue(nginx_route);
			}
			
			/* Create nginx files */
			string nginx_content = domain.nginx_template;
			nginx_content = rs::replace("%DOMAIN_NAME%", domain.domain_name, nginx_content);
			nginx_content = rs::replace("%ROUTES%", rs::join("\n", nginx_routes), nginx_content);
			nginx_content = rs::replace("%SSL%", "", nginx_content);
			
			/* Update nginx file */
			await NginxFile::updateFile("/domains/" ~ domain.domain_name ~ ".conf", nginx_content, db_settings);
		}
		
		
		
	}
}
