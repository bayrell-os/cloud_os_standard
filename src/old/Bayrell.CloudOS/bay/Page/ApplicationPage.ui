<!--
 *  Bayrell Cloud OS
 *
 *  (c) Copyright 2020 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
-->

<class version="1.0"
	name="Bayrell.CloudOS.Page.ApplicationPage" extends="Runtime.Web.CRUD.CrudPage" 
	module="Bayrell.CloudOS" model="Runtime.Web.CRUD.CrudPageModel"
>

<use name="Runtime.lib" />
<use name="Runtime.BaseStruct" />
<use name="Runtime.Exceptions.RuntimeException" />
<use name="Runtime.Web.Message" />
<use name="Runtime.Web.App.LayoutModel" />
<use name="Runtime.Web.App.RemoteCallAnswer" />
<use name="Runtime.Web.App.RenderContainer" />
<use name="Runtime.Web.App.Route" />
<use name="Runtime.Web.App.RouteList" />
<use name="Runtime.Web.App.RouteMiddleware" />
<use name="Runtime.Web.App.WebApp" />
<use name="Runtime.Web.Events.ChangeEvent" />
<use name="Runtime.Web.Events.MouseClickEvent" />
<use name="Runtime.Web.CRUD.CrudPage" component="true" />
<use name="Runtime.Web.CRUD.CrudPageModel" />
<use name="Runtime.Web.CRUD.FieldInfo" />
<use name="Runtime.Web.Dialog.Dialog" component="true" />
<use name="Runtime.Web.Dialog.DialogEvent" />
<use name="Runtime.Web.Dialog.DialogModel" />
<use name="Runtime.Web.Input.Button" component="true" />
<use name="Runtime.Web.Input.Input" component="true" />
<use name="Runtime.Web.Input.Label" component="true" />
<use name="Runtime.Web.Input.Select" component="true" />
<use name="Runtime.Web.Input.SelectText" component="true" />
<use name="Runtime.Web.Input.TextArea" component="true" />
<use name="Runtime.Web.Table.TableModel" />
<use name="Assets.CodeMirror.CodeMirror" component="true" />


<script>


/**
 * Returns object name
 */
pure string getCrudObjectName() => "Bayrell.CloudOS.Application";



/**
 * Route Action
 * @return RenderContainer
 */
@Route{ "uri": "/applications/", "name": "app.admin.applications" }
static async RenderContainer actionIndex(RenderContainer container) => [
	container
		
		/* Set title */
		|> lib::setAttr(["layout", "title"], "Applications")
		|> lib::setAttr(["layout", "layout_name"], "admin")
		
		/* Set model */
		|> lib::setAttr(["layout", "page_class"], classof ApplicationPage)
		
		/* Make api request */
		|> await static::crudSearch
		
		|> await lib::apply
		(
			RenderContainer (RenderContainer container)
			{
				CrudPageModel model = container.getPageModel();
				model <= widget <= dialog <= new DialogModel{};
				return container.setPageModel(model);
			}
		)
];



/**
 * Returns options
 */
pure Collection getOptions(BaseStruct layout, CrudPageModel model, Dict params, string name = "")
{
	return parent::getOptions(layout, model, params, name);
}



/**
 * Returns crud struct
 */
pure Collection<FieldInfo> getStruct(BaseStruct layout, CrudPageModel model, Dict params) =>
[
	new FieldInfo
	{
		"api_name": "number",
		"label": "",
		"class_name": classof Label,
	},
	
	new FieldInfo
	{
		"api_name": "id",
		"primary": true,
	},
	
	new FieldInfo
	{
		"api_name": "type",
		"label": "Type",
		"class_name": classof Select,
		"class_settings":
		{
			"options":
			[
				{"id": "file", "value": "File"},
				{"id": "yaml", "value": "Yaml"},
			],
			"default": "yaml",
		},
	},
	
	new FieldInfo
	{
		"api_name": "stack_name",
		"label": "Stack",
		"class_name": classof Input,
	},
	
	new FieldInfo
	{
		"api_name": "name",
		"label": "Name",
		"class_name": classof Input,
	},
	
	new FieldInfo
	{
		"api_name": "content",
		"label": "Content",
		"class_name": classof CodeMirror,
	},
	
	new FieldInfo
	{
		"api_name": "edit-buttons",
		"label": "",
		"class_name": classof Label,
	},
];



/**
 * Custom class name
 */
pure string customSettings(LayoutModel layout, Dict crud_settings)
{
	Dict item = crud_settings["crud_item"];
	string kind = crud_settings["crud_kind"];
	string field_name = crud_settings["crud_field_name"];
	
	if (kind == "table" and (field_name == "app" or field_name == "name" or field_name == "stack_name"))
	{
		crud_settings <= crud_field_class_name <= classof Label;
	}
	
	return crud_settings;
}



/**
 * Custom field render
 */
pure html renderField(LayoutModel layout, Dict crud_settings)
{
	Dict item = crud_settings["crud_item"];
	string kind = crud_settings["crud_kind"];
	string field_name = crud_settings["crud_field_name"];
	Collection<FieldInfo> struct = crud_settings["crud_params", "struct"];
	int index = crud_settings["crud_index"];
	var value = crud_settings["value"];
	
	/* Table number */
	if (kind == "table" and field_name == "number")
		return static::renderNumber(layout, crud_settings);
	
	/* Table edit buttons */
	if (kind == "table" and field_name == "edit-buttons")
		return static::renderButtons(layout, crud_settings);
	
	return null;
}



/**
 * Returns filter fields
 */
pure Collection<string> getFilterFields(BaseStruct layout, CrudPageModel model, Dict params) =>
[
	"stack_name",
	"name",
];



/**
 * Returns form fields
 */
pure Collection<string> getFormFields(BaseStruct layout, CrudPageModel model, Dict params) =>
[
	"stack_name",
	"name",
];



/**
 * Returns table fields
 */
pure Collection<string> getTableFields(BaseStruct layout, CrudPageModel model, Dict params) =>
[
	"number",
	"stack_name",
	"name",
	"edit-buttons"
];



/**
 * Returns view fields
 */
pure Collection<string> getViewFields(BaseStruct layout, CrudPageModel model, Dict params) =>
[
];



/**
 * Returns messages
 */
pure Dict<string> getMessages() =>
{
	"add": _("Bayrell.TimePlanner", "Add application"),
	"delete": string (Dict item) =>
		_("Runtime.Web.CRUD", "Do you realy want to delete '%name%' ?", { "name": item["name"] } ),
};



/**
 * Dialog settings
 */
pure Dict getDialogSettings() =>
{
	/* "width": "800px", */
};



/**
 * Form settings
 */
pure Dict getFormSettings() =>
{
};


</script>



<style>
.left_panel, .right_content{
	display: inline-block;
	vertical-align: top;
}
.left_panel{
	width: 200px;
	padding-right: 10px;
}
.right_content{
	width: calc(100% - 200px);
}
.items{
	margin-top: 10px;
}
.item{
	padding: 5px;
	cursor: pointer;
	user-select: none;
}
.item:hover{
	background-color: #eee;
}
.item.active{
	background-color: ${ vars["colors", "primary", "color"] };
	color: ${ vars["colors", "primary", "text"] };
}
.item_name, .item_icons{
	display: inline-block;
	vertical-align: top;
}
.item_name{
	width: calc(100% - 40px);
	overflow-wrap: break-word;
}
.item_icons{
	display: none;
	width: 40px;
}
.item:hover .item_icons{
	display: inline-block;
}
.item_icons .far{
	display: inline-block;
	margin-left: 5px;
}
.content_file_name{
	padding-bottom: 5px;
	min-height: 35px;
}
.content_file_name %(Button)button{
	margin-right: 10px;
}
.right_content %(TextArea)input{
	width: calc(100% - 20px);
	height: calc(100% - 20px);
	outline: 0;
}
.right_content %(CodeMirror)input{
	position: relative;
	width: calc(100% - 20px);
	height: calc(100% - 20px);
	outline: 0;
}
</style>

<style global="true">
%right_content .CodeMirror{
	position:absolute;
	top:0; bottom:0;
	left:0; right:0;
	width: 100%;
	height: 100%;
}
</style>


<template name="renderSearch" args="LayoutModel layout, CrudPageModel model, Dict params">
	
	<div class="left_panel">
		
		<Button @event:MouseClickEvent="onShowAddClick">Add file</Button>
		<div class="items">
			
			%for (int i=0; i<model.table.rows.count(); i++)
			{
				%var Dict item = model.table.rows[i];
				%var string selected = "";
				%if (model.isSelected(item))
				{
					%var selected = "active";
				}
				%var Dict attrs =
				{
					"data-index": i,
					"data-id": item["id"],
				};
				<div class="item" class={ selected } @event:MouseClickEvent="onOpenClick" ...attrs>
					<span class="item_name">{ item["stack_name"] }/{ item["name"] }</span>
					<span class="item_icons">
						<i class="far fa-edit" @event:MouseClickEvent="onRowEditClick" ...attrs></i>
						<i class="far fa-trash-alt" @event:MouseClickEvent="onRowDeleteClick" ...attrs></i>
					</span>
				</div>
			}
			
		</div>
		
	</div>
	
	%var int selected_index = model.getSelectedPos();
	%var Dict selected_item = model.table.rows[selected_index];
	<div class='right_content'>
		<div class='content_file_name'>
			<Button @event:MouseClickEvent="onSaveClick">Save</Button>
			<Button @event:MouseClickEvent="onComposeClick">Compose</Button>
			%if (selected_item)
			{
				<span class='name'>{ selected_item["stack_name"] }/{ selected_item["name"] }</span>
			}
		</div>
		<CodeMirror @ref="content" @model=["table", "rows", selected_index, "content"]
			@event:ChangeEvent="onEditorChange"
			data-id={ selected_index }
		/>
	</div>
	
	<Dialog @ref="dialog_compose" @bind=["widget", "dialog"] @event:DialogEvent="onDialogComposeEvent"
		auto_hide={ false }
		buttons=
		[
			{
				"value": "Yes",
				"data-action": "yes",
			},
			{
				"value": "Close",
				"data-action": "no",
			}
		]
	/>
	
</template>


<script>

/**
 * onEditorChange
 */
async void onEditorChange(Message<ChangeEvent> msg)
{
	int selected_index = msg.sender.params["data-id"] |> default int -1;
	if (selected_index == -1) return;
	this.update("setAttr", ["table", "rows", selected_index, "content"], msg.data.value);
}


/**
 * Open file
 */
async void onOpenClick(Message<MouseClickEvent> msg)
{
	string id = msg.sender.params["data-id"];
	Dict item = this.call("getFirstItem", {"id": id});
	this.update("select", {"id": id});
	this.update("setAttr", ["item"], item);
}


/**
 * On row edit
 */
async void onRowEditClick(Message<MouseClickEvent> msg)
{
	msg.cancel();
	string id = msg.sender.params["data-id"];
	Dict item = this.call("getFirstItem", {"id": id});
	if (item)
	{
		this.dialog_edit.update("show");
		this.form_edit.update("clear");
		this.form_edit.update("setItem", item);
		this.form_edit.update("setKind", "table");
	}
}



/**
 * On row delete
 */
async void onRowDeleteClick(Message<MouseClickEvent> msg)
{
	msg.cancel();
	string id = msg.sender.params["data-id"];
	Dict item = this.call("getFirstItem", {"id": id});
	
	string message = "";
	Dict<string> messages = static::getMessages();
	fn f = messages["delete"];
	if (rtl::exists(f))
	{
		if (rtl::isFn(f))
		{
			message = f(item);
		}
		else message = f;
	}
	else
	{
		message = _("Runtime.Web.CRUD", "Do you realy want to delete '%name%' ?", { "name": item["name"] } );
	}
	
	this.dialog_delete.update
	(
		"show",
		{
			"text": message,
			"tag":
			{
				"item": item,
				"kind": "table",
			},
		}
	);
	
}



/* Save file */
async void onSaveClick(Message<MouseClickEvent> msg)
{
	CrudPageModel model = this.model();
	Dict item = model.getSelectedItem();
	Dict pk = model.getPrimaryKey(item);
	if (item == null or pk == null) return;
	
	/* Send api */
	RemoteCallAnswer answer = await WebApp::externalBusCall
	{
		"object_name": static::getCrudObjectName(),
		"interface_name": "core.crud",
		"method_name": "update",
		"data":
		{
			"pk": pk,
			"item": item,
		},
	};
	
	if (answer.isSuccess())
	{
		this.update("setItem", pk, answer.response["new_item"]);
		await this.onItemUpdated(answer);
	}
	else
	{
	}
}


/* Compose file */
async void onComposeClick(Message<MouseClickEvent> msg)
{
	CrudPageModel model = this.model();
	Dict item = model.getSelectedItem();
	if (item == null) return;
	
	string text = item["stack_name"] + "/" + item["name"];
	this.dialog_compose.update("show", {"text": "Compose file " ~ text ~ "?", "tag": item});
}


/* DialogComposeEvent */
async void onDialogComposeEvent(Message<DialogEvent> msg)
{
	if (msg.data.button_result == "no")
	{
		this.dialog_compose.update("hide");
	}
	else if (msg.data.button_result == "yes")
	{
		this.dialog_compose.update("setWaitMessage");
		
		Dict item = msg.data["tag"];
		RemoteCallAnswer answer = await WebApp::externalBusCall
		{
			"object_name": static::getCrudObjectName(),
			"interface_name": "core.crud",
			"method_name": "compose",
			"data":
			{
				"id": item["id"],
				"name": item["name"],
				"stack_name": item["stack_name"],
			},
		};
		this.dialog_compose.update("setAnswer", answer);
	}
}


</script>


</class>