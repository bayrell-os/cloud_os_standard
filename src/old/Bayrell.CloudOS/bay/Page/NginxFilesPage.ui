<!--
 *  Bayrell Cloud OS
 *
 *  (c) Copyright 2020 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
-->

<class version="1.0"
	name="Bayrell.CloudOS.Page.NginxFilesPage" extends="Runtime.Web.CRUD.CrudPage" 
	module="Bayrell.CloudOS" model="Runtime.Web.CRUD.CrudPageModel"
>

<use name="Runtime.lib" />
<use name="Runtime.BaseStruct" />
<use name="Runtime.Exceptions.RuntimeException" />
<use name="Runtime.Web.App.LayoutModel" />
<use name="Runtime.Web.App.RenderContainer" />
<use name="Runtime.Web.App.Route" />
<use name="Runtime.Web.App.RouteList" />
<use name="Runtime.Web.App.RouteMiddleware" />
<use name="Runtime.Web.Events.MouseClickEvent" />
<use name="Runtime.Web.CRUD.CrudPage" component="true" />
<use name="Runtime.Web.CRUD.CrudPageModel" />
<use name="Runtime.Web.CRUD.FieldInfo" />
<use name="Runtime.Web.Input.Input" component="true" />
<use name="Runtime.Web.Input.Label" component="true" />
<use name="Runtime.Web.Input.Select" component="true" />
<use name="Runtime.Web.Input.SelectText" component="true" />
<use name="Runtime.Web.Input.TextArea" component="true" />
<use name="Runtime.Web.Table.TableModel" />


<script>


/**
 * Returns object name
 */
pure string getCrudObjectName() => "Bayrell.CloudOS.NginxFile";



/**
 * Route Action
 * @return RenderContainer
 */
@Route{ "uri": "/nginx/", "name": "app.admin.nginx" }
static async RenderContainer actionIndex(RenderContainer container) => [
	container
		
		/* Set title */
		|> lib::setAttr(["layout", "title"], "Nginx")
		|> lib::setAttr(["layout", "layout_name"], "admin")
		
		/* Set model */
		|> lib::setAttr(["layout", "page_class"], classof NginxFilesPage)
		|> lib::setAttr(["layout", "page_model"], new CrudPageModel())
		
		/* Make api request */
		|> await static::crudSearch
];



/**
 * Returns options
 */
pure Collection getOptions(BaseStruct layout, CrudPageModel model, Dict params, string name = "")
{
	return parent::getOptions(layout, model, params, name);
}



/**
 * Returns crud struct
 */
pure Collection<FieldInfo> getStruct(BaseStruct layout, CrudPageModel model, Dict params) =>
[
	new FieldInfo
	{
		"api_name": "number",
		"label": "",
		"class_name": classof Label,
	},
	
	new FieldInfo
	{
		"api_name": "name",
		"primary": true,
		"label": "File name",
		"class_name": classof Input,
	},
	
	new FieldInfo
	{
		"api_name": "enable",
		"label": "Enable",
		"class_name": classof Select,
		"class_settings":
		{
			"show_select_value_filter": true,
			"show_select_value": false,
			"options":
			[
				{"id": 0, "value": "No"},
				{"id": 1, "value": "Yes"},
			],
		},
	},
	
	new FieldInfo
	{
		"api_name": "content",
		"label": "Content",
		"class_name": classof TextArea,
		"info":
		{
			"table":
			{
				"class_name": classof Label,
			},
		},
	},
	
	new FieldInfo
	{
		"api_name": "edit-buttons",
		"label": "",
		"class_name": classof Label,
	},
];



/**
 * Custom class name
 */
pure string customSettings(LayoutModel layout, Dict crud_settings)
{
	Dict item = crud_settings["crud_item"];
	string kind = crud_settings["crud_kind"];
	string field_name = crud_settings["crud_field_name"];
	
	if (kind == "table" and
		(field_name == "enable")
	)
	{
		crud_settings <= crud_field_class_name <= classof SelectText;
	}
	
	if (kind == "table" and
		(field_name == "content" or field_name == "name")
	)
	{
		crud_settings <= crud_field_class_name <= classof Label;
	}
	
	if (kind == "form" and field_name == "enable") crud_settings <= default <= 0;
	
	return crud_settings;
}



/**
 * Custom field render
 */
pure html renderField(LayoutModel layout, Dict crud_settings)
{
	Dict item = crud_settings["crud_item"];
	string kind = crud_settings["crud_kind"];
	string field_name = crud_settings["crud_field_name"];
	Collection<FieldInfo> struct = crud_settings["crud_params", "struct"];
	int index = crud_settings["crud_index"];
	var value = crud_settings["value"];
	
	/* Table number */
	if (kind == "table" and field_name == "number")
		return static::renderNumber(layout, crud_settings);
	
	/* Table edit buttons */
	if (kind == "table" and field_name == "edit-buttons")
		return static::renderButtons(layout, crud_settings);
	
	return null;
}



/**
 * Returns filter fields
 */
pure Collection<string> getFilterFields(BaseStruct layout, CrudPageModel model, Dict params) =>
[
	"name",
	"enable",
];



/**
 * Returns form fields
 */
pure Collection<string> getFormFields(BaseStruct layout, CrudPageModel model, Dict params) =>
[
	"name",
	"enable",
	"content",
];



/**
 * Returns table fields
 */
pure Collection<string> getTableFields(BaseStruct layout, CrudPageModel model, Dict params) =>
[
	"number",
	"name",
	"enable",
	"edit-buttons"
];



/**
 * Returns view fields
 */
pure Collection<string> getViewFields(BaseStruct layout, CrudPageModel model, Dict params) =>
[
];



/**
 * Returns messages
 */
pure Dict<string> getMessages() =>
{
	"add": _("Bayrell.TimePlanner", "Add nginx files"),
	"delete": string (Dict item) =>
		_("Runtime.Web.CRUD", "Do you realy want to delete '%name%' ?", { "name": item["name"] } ),
};



/**
 * Dialog settings
 */
pure Dict getDialogSettings() =>
{
	"width": "800px",
};



/**
 * Form settings
 */
pure Dict getFormSettings() =>
{
};

</script>



</class>