<!--
 *  Bayrell Cloud OS
 *
 *  (c) Copyright 2020 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
-->

<class version="1.0"
	name="Bayrell.CloudOS.Page.ServicePage" extends="Runtime.Web.CRUD.CrudPage" 
	module="Bayrell.CloudOS" model="Bayrell.CloudOS.Page.ServicePageModel"
>

<use name="Runtime.lib" />
<use name="Runtime.BaseStruct" />
<use name="Runtime.Exceptions.RuntimeException" />
<use name="Runtime.Web.Message" />
<use name="Runtime.Web.App.LayoutModel" />
<use name="Runtime.Web.App.RemoteCallAnswer" />
<use name="Runtime.Web.App.RenderContainer" />
<use name="Runtime.Web.App.Route" />
<use name="Runtime.Web.App.RouteList" />
<use name="Runtime.Web.App.RouteMiddleware" />
<use name="Runtime.Web.App.WebApp" />
<use name="Runtime.Web.Events.MouseClickEvent" />
<use name="Runtime.Web.CRUD.CrudPage" component="true" />
<use name="Runtime.Web.CRUD.CrudPageModel" />
<use name="Runtime.Web.CRUD.FieldInfo" />
<use name="Runtime.Web.CRUD.FormModel" />
<use name="Runtime.Web.Dialog.Dialog" component="true" />
<use name="Runtime.Web.Dialog.DialogEvent" />
<use name="Runtime.Web.Input.Button" component="true" />
<use name="Runtime.Web.Input.Input" component="true" />
<use name="Runtime.Web.Input.Label" component="true" />
<use name="Runtime.Web.Input.Select" component="true" />
<use name="Runtime.Web.Input.SelectText" component="true" />
<use name="Runtime.Web.Input.TextArea" component="true" />
<use name="Runtime.Web.Table.TableModel" />


<script>


/**
 * Returns object name
 */
pure string getCrudObjectName() => "Bayrell.CloudOS.Service";



/**
 * Route Action
 * @return RenderContainer
 */
@Route{ "uri": "/services/", "name": "app.admin.services" }
static async RenderContainer actionIndex(RenderContainer container) => [
	container
		
		/* Set title */
		|> lib::setAttr(["layout", "title"], "Services")
		|> lib::setAttr(["layout", "layout_name"], "admin")
		
		/* Set model */
		|> lib::setAttr(["layout", "page_class"], classof ServicePage)
		|> .setPageModel(new ServicePageModel())
		
		/* Make api request */
		|> await static::crudSearch
];



/**
 * Returns options
 */
pure Collection getOptions(BaseStruct layout, CrudPageModel model, Dict params, string name = "")
{
	return parent::getOptions(layout, model, params, name);
}



/**
 * Returns crud struct
 */
pure Collection<FieldInfo> getStruct(BaseStruct layout, CrudPageModel model, Dict params) =>
[
	new FieldInfo
	{
		"api_name": "service_id",
		"primary": true,
	},
	
	new FieldInfo
	{
		"api_name": "number",
		"label": "",
		"class_name": classof Label,
	},
	
	new FieldInfo
	{
		"api_name": "stack_name",
		"label": "Stack name",
		"class_name": classof Label,
	},
	
	new FieldInfo
	{
		"api_name": "service_name",
		"label": "Service name",
		"class_name": classof Label,
	},
	
	new FieldInfo
	{
		"api_name": "software_api_name",
		"label": "Software api name",
		"class_name": classof Input,
	},
	
	new FieldInfo
	{
		"api_name": "docker_name",
		"label": "Docker name",
		"class_name": classof Label,
	},
	
	new FieldInfo
	{
		"api_name": "docker_replicas",
		"label": "Replicas",
		"class_name": classof Label,
	},
	
	new FieldInfo
	{
		"api_name": "docker_image",
		"label": "Docker image",
		"class_name": classof Label,
	},
	
	new FieldInfo
	{
		"api_name": "have_admin_page",
		"label": "Admin page",
		"class_name": classof Select,
		"class_settings":
		{
			"show_select_value": false,
			"options":
			[
				{"id": 0, "value": "No"},
				{"id": 1, "value": "Yes"},
			],
		},
	},
	
	new FieldInfo
	{
		"api_name": "admin_page_settings",
		"label": "Admin settings",
		"class_name": classof Label,
	},
	
	new FieldInfo
	{
		"api_name": "admin_port",
		"label": "Admin port",
		"class_name": classof Input,
	},
	
	new FieldInfo
	{
		"api_name": "admin_route",
		"label": "Admin route",
		"class_name": classof Input,
	},
	
	new FieldInfo
	{
		"api_name": "admin_custom_nginx",
		"label": "Admin custom nginx",
		"class_name": classof TextArea,
	},
	
	new FieldInfo
	{
		"api_name": "enable",
		"label": "Enable",
		"class_name": classof Select,
		"class_settings":
		{
			"show_select_value": false,
			"options":
			[
				{"id": 0, "value": "No"},
				{"id": 1, "value": "Yes"},
			],
		},
	},
	
	new FieldInfo
	{
		"api_name": "edit-buttons",
		"label": "",
		"class_name": classof Label,
	},
];



/**
 * Custom class name
 */
pure string customSettings(LayoutModel layout, Dict crud_settings)
{
	Dict item = crud_settings["crud_item"];
	string kind = crud_settings["crud_kind"];
	string field_name = crud_settings["crud_field_name"];
	
	if (field_name == "service_name" and kind == "form")
	{
		FormModel model = crud_settings["crud_form_model"];
		crud_settings <= crud_field_class_name <= model["action"] == "create" ? classof Input : classof Label;
	}
	
	if (field_name == "stack_name" and kind == "form")
	{
		FormModel model = crud_settings["crud_form_model"];
		crud_settings <= crud_field_class_name <= model["action"] == "create" ? classof Input : classof Label;
	}
	
	if (field_name == "docker_image")
	{
		string image = item["docker_image"];
		crud_settings <= value <= static::trimImageName(image);
	}
	
	if (field_name == "docker_replicas")
	{
		int work = item["docker_balancer", "State", "Work"] |> default int 0;
		int total = item["docker_balancer", "State", "Total"] |> default int 0;
		string value = work ~ " / " ~ total;
		crud_settings <= value <= value;
	}
	
	if (field_name == "software_api_name" and kind == "table")
	{
		crud_settings <= crud_field_class_name <= classof Label;
	}
	
	if (field_name == "docker_name" and kind != "table")
	{
		crud_settings <= crud_field_class_name <= classof Input;
	}
	
	if (field_name == "have_admin_page")
	{
		if (kind == "table") crud_settings <= crud_field_class_name <= classof SelectText;
		else if (kind == "filter")
		{
			crud_settings <= show_select_value <= true;
		}
		else crud_settings <= default <= 0;
	}
	
	if (field_name == "enable")
	{
		if (kind == "table") crud_settings <= crud_field_class_name <= classof SelectText;
		else if (kind == "filter")
		{
			crud_settings <= show_select_value <= true;
		}
		else crud_settings <= default <= 0;
	}
	
	return crud_settings;
}



/**
 * Custom field render
 */
pure html renderField(LayoutModel layout, Dict crud_settings)
{
	Dict item = crud_settings["crud_item"];
	string kind = crud_settings["crud_kind"];
	string field_name = crud_settings["crud_field_name"];
	Collection<FieldInfo> struct = crud_settings["crud_params", "struct"];
	int index = crud_settings["crud_index"];
	var value = crud_settings["value"];
	
	/* Table number */
	if (kind == "table" and field_name == "number")
		return static::renderNumber(layout, crud_settings);
	
	/* Table have admin page button */
	if (kind == "table" and field_name == "have_admin_page")
		return (value == 0)
			? <div @key={ "No" }>No</div>
			:
			<div @key={ "Yes" }>
				<div style='display:inline-block;vertical-align: middle; margin-right: 5px;'>
				{ static::renderButton
				(
					layout, crud_settings, "view",
					{
						"url": "/admin/services/" ~ crud_settings["crud_item"]["docker_name"] ~ "/",
						"target": "_blank",
					}
				) }
				</div>
				<div style='display:inline-block;vertical-align: middle; margin-left: 5px;'>
					<div>Port = { item["admin_port"] }</div>
					<div>Route = { item["admin_route"] }</div>
				</div>
			</div>
		;
	
	/* Table edit buttons */
	if (kind == "table" and field_name == "edit-buttons")
		return [
			static::renderButton(layout, crud_settings, "edit"),
			(item["enable"] == true) ?
				static::renderButton(layout, crud_settings, "stop") : ""
		];
	
	/* Admin page settings */
	if (kind == "table" and field_name == "admin_page_settings")
	{
		return "";
	}
	
	return null;
}



/**
 * Trim name
 */
pure string trimImageName(string name)
{
	int pos = rs::search(name, "@");
	if (pos != -1) name = rs::substr(name, 0, pos);
	return name;
}



/**
 * Returns filter fields
 */
pure Collection<string> getFilterFields(BaseStruct layout, CrudPageModel model, Dict params) =>
[
	"docker_name",
	"have_admin_page",
	"enable",
];



/**
 * Returns form fields
 */
pure Collection<string> getFormFields(BaseStruct layout, CrudPageModel model, Dict params) =>
[
	"stack_name",
	"service_name",
	"have_admin_page",
	"admin_port",
	"admin_route",
	"admin_custom_nginx",
];



/**
 * Returns table fields
 */
pure Collection<string> getTableFields(BaseStruct layout, CrudPageModel model, Dict params) =>
[
	"number",
	"docker_name",
	"docker_image",
	"docker_replicas",
	"enable",
	"have_admin_page",
	"edit-buttons"
];



/**
 * Returns view fields
 */
pure Collection<string> getViewFields(BaseStruct layout, CrudPageModel model, Dict params) =>
[
];



/**
 * Returns messages
 */
pure Dict<string> getMessages() =>
{
	"add": _("Bayrell.TimePlanner", "Add service"),
	"delete": string (Dict item) =>
		_("Runtime.Web.CRUD", "Do you realy want to delete '%name%' ?", { "name": item["docker_name"] } ),
};



/**
 * Dialog settings
 */
pure Dict getDialogSettings() =>
{
	"width": "800px",
};



/**
 * Form settings
 */
pure Dict getFormSettings() =>
{
};

</script>


<template name="renderTopButtons" args="LayoutModel layout, CrudPageModel model, Dict params">
</template>


<template name="renderButton" args="LayoutModel layout, Dict settings, string button_type, Dict options = null">
	%var Collection<FieldInfo> struct = settings["crud_params", "struct"];
	%var TableModel table_model = settings["crud_table_model"];
	%var Dict item = settings["crud_item"];
	%var int index = settings["crud_index"];
	%if (button_type == "stop")
	{
		<Button type='small danger' data-index={ index } data-pk={ static::getPrimaryKey(struct, item) }
			@event:MouseClickEvent="onStopClick" @key="compose"
		>
			{ _("Runtime.Web.CRUD", "Stop") }
		</Button>
	}
	%else
	{
		%render parent(layout, settings, button_type, options);
	}
</template>


<template name="renderDialog" args="LayoutModel layout, CrudPageModel model, Dict params">
	%render parent(layout, model, params);
	<div class='dialogs'>
		<Dialog @name="dialog_stop" auto_hide={ false } @event:DialogEvent="onStopDialogEvent">
		</Dialog>
	</div>
</template>


<script>

/**
 * Stop
 */
async void onStopClick(Message<MouseClickEvent> msg)
{
	Dict pk = msg.sender.params["data-pk"];
	Dict item = this.call("getFirstItem", pk);
	
	this.dialog_stop.update("confirm", "Do you realy want to stop '" ~ item["docker_name"] ~ "' ?")
	this.dialog_stop.update
	(
		"copy",
		{
			"tag":
			{
				"pk": pk,
				"item": item,
			}
		}
	);
}


/**
 * Stop dialog event
 */
async void onStopDialogEvent(Message<DialogEvent> msg)
{
	if (msg.data.button_result == "ok")
	{
		Dict pk = this.dialog_stop.model(["tag", "pk"]);
		this.dialog_stop.update("copy", { "message": "Wait for stop service" });
		this.dialog_stop.update("copy", { "error_message": "" });
		
		/* Call api */
		RemoteCallAnswer answer = await WebApp::externalBusCall
		{
			"object_name": static::getCrudObjectName(),
			"interface_name": "core.crud",
			"method_name": "stop",
			"data":
			{
				"pk": pk,
			},
		};
		
		if (answer.isSuccess())
		{
			this.update("removeItem", pk);
			this.dialog_stop.update("hide");
		}
		else
		{
			this.dialog_stop.update("copy", { "message": "" });
			this.dialog_stop.update("copy", { "error_message": answer.error_message });
		}
	}
	else if (msg.data.button_result == "cancel")
	{
		this.dialog_stop.update("hide");
	}
}
</script>


</class>