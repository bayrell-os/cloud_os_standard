/*!
 *  Bayrell Cloud OS
 *
 *  (c) Copyright 2020 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Bayrell.CloudOS.ORM;

use Runtime.fs;
use Runtime.lib;
use Runtime.ORM.Annotations.AutoIncrement;
use Runtime.ORM.Annotations.BigIntType;
use Runtime.ORM.Annotations.BooleanType;
use Runtime.ORM.Annotations.ForeignKey;
use Runtime.ORM.Annotations.Index;
use Runtime.ORM.Annotations.JsonType;
use Runtime.ORM.Annotations.Primary;
use Runtime.ORM.Annotations.StringType;
use Runtime.ORM.Annotations.TextType;
use Runtime.ORM.Annotations.Unique;
use Runtime.ORM.Annotations.Virtual;
use Runtime.ORM.ConnectionInterface as Connection;
use Runtime.ORM.CursorInterface as Cursor;
use Runtime.ORM.Record;


struct Service extends Record
{
	@AutoIncrement{}
	@BigIntType{}
	int service_id;
	
	@StringType{}
	string stack_name;
	
	@StringType{}
	string service_name;
	
	@StringType{}
	string software_api_name;
	
	@BooleanType{}
	bool have_admin_page = 0;
	
	@BigIntType{}
	int admin_port = 81;
	
	@StringType{}
	string admin_route = "/";
	
	@TextType{}
	string admin_custom_nginx = "";
	
	@BooleanType{}
	bool enable;
	
	@BooleanType{}
	bool is_deleted;
	
	@StringType{}
	string docker_name;
	
	@TextType{}
	string docker_content;
	
	@JsonType{ "nullable": true }
	Dict docker_json;

	@JsonType{ "nullable": true }
	Collection<Dict> docker_tasks;

	@JsonType{ "nullable": true }
	Dict docker_balancer;	
	
	
	/**
	 * Returns table name
	 */
	pure string table_name() => "services";
	
	
	
	/**
	 * Keys
	 */
	pure Collection keys() =>
	[
		new Primary
		{
			"keys": ["service_id"],
		},
		new Unique
		{
			"keys": ["stack_name", "service_name"],
		},
		new Index
		{
			"keys": ["software_api_name"],
		},
		new Index
		{
			"keys": ["have_admin_page"],
		},
	];
	
	
	
	/**
	 * Get ip addresses
	 */
	Collection<string> getIpAddresses(string network_name)
	{
		Vector<string> ip_res = new Vector();
		string service_name = this.docker_name;
		
		Collection tasks = this["docker_balancer", "Tasks"] |> default Collection [];
		for (int tasks_inc=0; tasks_inc<tasks.count(); tasks_inc++)
		{
			Dict task = tasks[tasks_inc];
			string state = task["Status", "State"] |> default string "";
			string desired_state = task["DesiredState"] |> default string "";
			if (desired_state == "running" and state == "running")
			{
				Collection networks = task["Networks"] |> default Collection [];
				for (int networks_inc=0; networks_inc<networks.count(); networks_inc++)
				{
					if (networks[networks_inc, "Name"] == network_name)
					{
						Collection ip_arr = networks[networks_inc, "Addresses"];
						for (int ip_arr_inc=0; ip_arr_inc<ip_arr.count(); ip_arr_inc++)
						{
							Collection arr = rs::split("\\/", ip_arr[ip_arr_inc]);
							ip_res.pushValue(arr[0]);
						}
					}
				}
			}
		}
		
		return ip_res.toCollection();
	}
	
}
