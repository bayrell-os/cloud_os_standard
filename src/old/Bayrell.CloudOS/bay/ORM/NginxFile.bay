/*!
 *  Bayrell Cloud OS
 *
 *  (c) Copyright 2020 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Bayrell.CloudOS.ORM;

use Runtime.ORM.Annotations.AutoIncrement;
use Runtime.ORM.Annotations.BigIntType;
use Runtime.ORM.Annotations.BooleanType;
use Runtime.ORM.Annotations.ForeignKey;
use Runtime.ORM.Annotations.Index;
use Runtime.ORM.Annotations.JsonType;
use Runtime.ORM.Annotations.Primary;
use Runtime.ORM.Annotations.StringType;
use Runtime.ORM.Annotations.TextType;
use Runtime.ORM.Annotations.Unique;
use Runtime.ORM.Annotations.Virtual;
use Runtime.ORM.ConnectionInterface as Connection;
use Runtime.ORM.CursorInterface as Cursor;
use Runtime.ORM.DriverInterface as ORMDriver;
use Runtime.ORM.Record;


struct NginxFile extends Record
{
	@StringType{}
	string name;
	
	@BooleanType{}
	bool enable;
	
	@TextType{}
	string content;
	
	@BigIntType{}
	int timestamp;
	
	@BooleanType{}
	bool is_deleted;
	
	
	/**
	 * Returns table name
	 */
	pure string table_name() => "nginx_files";
	
	
	/**
	 * Keys
	 */
	pure Collection keys() =>
	[
		new Primary
		{
			"keys": ["name"],
		},
	];
	
	
	/**
	 * Update nginx file
	 */
	async static void updateFile(string file_name, string content, Dict db_settings = null)
	{
		/* Find nginx file */
		NginxFile file = await static::getById(file_name, db_settings);
		if (file == null) file = new NginxFile{ "name": file_name };

		/* Update nginx file */
		if (file.content != content or file.is_deleted or file.enable != 1)
		{
			file <= content <= content;
			file <= timestamp <= rtl::time();
			file <= enable <= true;
			file <= is_deleted <= false;
			
			/* Save file */
			await static::save(file, db_settings);
		}
	}
	
}
