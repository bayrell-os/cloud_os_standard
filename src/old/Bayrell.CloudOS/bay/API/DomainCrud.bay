/*!
 *  Bayrell Cloud OS
 *
 *  (c) Copyright 2020 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Bayrell.CloudOS.API;

use Runtime.rtl;
use Runtime.lib;
use Runtime.Exceptions.ApiException;
use Runtime.ORM.QueryBuilder;
use Runtime.Web.App.ApiList;
use Runtime.Web.App.ApiMethod;
use Runtime.Web.App.ApiMiddleware;
use Runtime.Web.App.RemoteCallAnswer;
use Runtime.Web.App.RemoteCallRequest;
use Runtime.Web.CRUD.CrudApi;
use Runtime.Web.CRUD.Rules.AllowFields;
use Runtime.Web.CRUD.Rules.DefaultValue;
use Runtime.Web.CRUD.Rules.Dictionary;
use Runtime.Web.CRUD.Rules.ReadOnly;
use Runtime.Web.CRUD.Rules.Required;
use Runtime.Web.CRUD.Rules.Rule;
use Bayrell.CloudOS.ORM.Domain;
use Bayrell.CloudOS.ORM.Space;


@ApiList{ "object_name": "Bayrell.CloudOS.Domain", "interface_name": "core.crud" }
static class DomainCrud extends CrudApi
{
	
	/**
	 * Returns orm class name
	 */
	pure string getORM() => classof Domain;
	
	
	
	/**
	 * Returns current rules
	 */
	Collection<Rule> rules() =>
	[
		new AllowFields{ "fields": ["domain_name", "nginx_template", "space_id"] },
		new Required{ "api_name": "domain_name" },
		new DefaultValue{ "api_name": "space_id", "value": null },
		
		/* Add spaces dictionary */
		new Dictionary
		{
			"name": "spaces",
			"class_name": classof Space,
		},
	];
	
	
	
	/**
	 * Returns table field value
	 */
	Collection<Collection<string>> getDefaultOrder() =>
	[ 
		["domain_name", "asc"],
	];
	
	
	
	/**
	 * Find existing item for create
	 */
	async Domain findItemForCreating() => this.findItemByField( "domain_name", this.item["domain_name"] );
	
	
	
	/**
	 * Build query
	 */
	QueryBuilder buildSearchQuery(QueryBuilder q) => parent::buildSearchQuery(q);
	
	
	
	/**
	 * Convert item before save to database
	 */
	async Dict convertItem(Dict item)
	{
		/* Convert item */
		item = await parent::convertItem(item);
		
		/* Set default template */
		string nginx_template = item["nginx_template"] |> default string "";
		if (nginx_template == "")
		{
			nginx_template = "";
			nginx_template ~= "server {\n";
			nginx_template ~= "\tlisten 80;\n";
			nginx_template ~= "\tserver_name %DOMAIN_NAME%;\n";
			nginx_template ~= "\troot /usr/share/nginx/default;\n";
			nginx_template ~= "\tindex index.html;\n";
			nginx_template ~= "\tautoindex off;\n";
			nginx_template ~= "%ROUTES%\n";
			nginx_template ~= "%SSL%\n";
			nginx_template ~= "}";
			item <= nginx_template <= nginx_template;
		}
		
		return item;
	}
	
	
	
	/**
	 * Init request
	 */
	async void init()
	{
		await parent::init();
	}
	
	
	
	/**
	 * Validate
	 */
	async void validate()
	{
		await parent::validate();
	}
	
	
	
	/**
	 * After
	 */
	async void after()
	{
		await parent::after();
		
		/* If is success */
		if (this.isSuccess() and this.isModify())
		{
		}
	}
	
	
	
	/**
	 * Search api
	 */
	@ApiMethod{ "method_name": "search" }
	static async list searchAction(RemoteCallRequest request, RemoteCallAnswer answer)
	{
		return await parent::searchAction(request, answer);
	}
	
	
	
	/**
	 * Create
	 */
	@ApiMethod{ "method_name": "create" }
	static async list createAction(RemoteCallRequest request, RemoteCallAnswer answer)
	{
		return await parent::createAction(request, answer);
	}
	
	
	
	/**
	 * Update
	 */
	@ApiMethod{ "method_name": "update" }
	static async list updateAction(RemoteCallRequest request, RemoteCallAnswer answer)
	{
		return await parent::updateAction(request, answer);
	}
	
	
	
	/**
	 * Delete
	 */
	@ApiMethod{ "method_name": "delete" }
	static async list deleteAction(RemoteCallRequest request, RemoteCallAnswer answer)
	{
		return await parent::deleteAction(request, answer);
	}
	
}