/*!
 *  Bayrell Cloud OS
 *
 *  (c) Copyright 2020 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Bayrell.CloudOS.API;

use Runtime.rtl;
use Runtime.lib;
use Runtime.Exceptions.ApiException;
use Runtime.ORM.QueryBuilder;
use Runtime.Web.App.ApiList;
use Runtime.Web.App.ApiMethod;
use Runtime.Web.App.ApiMiddleware;
use Runtime.Web.App.RemoteCallAnswer;
use Runtime.Web.App.RemoteCallRequest;
use Runtime.Web.CRUD.CrudApi;
use Runtime.Web.CRUD.Rules.AllowFields;
use Runtime.Web.CRUD.Rules.DefaultValue;
use Runtime.Web.CRUD.Rules.Dictionary;
use Runtime.Web.CRUD.Rules.ReadOnly;
use Runtime.Web.CRUD.Rules.Required;
use Runtime.Web.CRUD.Rules.Rule;
use Bayrell.CloudOS.DockerLib;
use Bayrell.CloudOS.ORM.Service;


@ApiList{ "object_name": "Bayrell.CloudOS.Service", "interface_name": "core.crud" }
static class ServiceCrud extends CrudApi
{
	
	/**
	 * Returns orm class name
	 */
	pure string getORM() => classof Service;
	
	
	
	/**
	 * Force delete items
	 */
	bool isForceDelete() => false;
	
	
	
	/**
	 * Returns current rules
	 */
	Collection<Rule> rules() =>
	[
		new AllowFields
		{
			"fields":
			[
				"service_id",
				"stack_name",
				"service_name",
				"docker_name",
				"docker_image",
				"docker_balancer",
				"software_api_name",
				"have_admin_page",
				"admin_port",
				"admin_route",
				"admin_custom_nginx",
				"enable",
			]
		},
		new ReadOnly{ "api_name": "service_id" },
		new ReadOnly{ "api_name": "docker_name" },
		new ReadOnly{ "api_name": "docker_image" },
		new ReadOnly{ "api_name": "docker_balancer" },
		new ReadOnly{ "api_name": "stack_name", "can_create": true, },
		new ReadOnly{ "api_name": "service_name", "can_create": true, },
		new Required{ "api_name": "stack_name" },
		new Required{ "api_name": "service_name" },
	];
	
	
	
	/**
	 * Returns table field value
	 */
	Collection<Collection<string>> getDefaultOrder() =>
	[ 
		["stack_name", "asc"],
		["service_name", "asc"]
	];
	
	
	
	/**
	 * Build query
	 */
	QueryBuilder buildSearchQuery(QueryBuilder q) =>
		parent::buildSearchQuery(q)
		|> .addFilter(["is_deleted", "=", 0])
	;
	
	
	/**
	 * Find existing item for create
	 */
	async Service findItemForCreating() =>
		Service::select()
			|> .filter
			([
				["stack_name", "=", this.item["stack_name"]],
				["service_name", "=", this.item["service_name"]],
			])
			|> await .one()
		;
	
	
	
	/**
	 * Convert item before save to database
	 */
	async Dict convertItem(Dict item)
	{
		if (this.action == "create")
		{
			item <= docker_name <= item["stack_name"] ~ "_" ~ item["service_name"];
		}
		return item;
	}
	
	
	
	/**
	 * Init request
	 */
	async void init()
	{
		await parent::init();
	}
	
	
	
	/**
	 * Validate
	 */
	async void validate()
	{
		await parent::validate();
	}
	
	
	
	/**
	 * After
	 */
	async void after()
	{
		await parent::after();
		
		/* If is success */
		if (this.isSuccess())
		{
		}
	}
	
	
	
	/**
	 * Search api
	 */
	@ApiMethod{ "method_name": "search" }
	static async list searchAction(RemoteCallRequest request, RemoteCallAnswer answer)
	{
		return await parent::searchAction(request, answer);
	}
	
	
	
	/**
	 * Create
	 */
	@ApiMethod{ "method_name": "create" }
	static async list createAction(RemoteCallRequest request, RemoteCallAnswer answer)
	{
		answer = answer::fail(answer, "null", "Create service is Deprecated");
		return [request, answer];
	}
	
	
	
	/**
	 * Update
	 */
	@ApiMethod{ "method_name": "update" }
	static async list updateAction(RemoteCallRequest request, RemoteCallAnswer answer)
	{
		return await parent::updateAction(request, answer);
	}
	
	
	
	/**
	 * Delete
	 */
	@ApiMethod{ "method_name": "delete" }
	static async list deleteAction(RemoteCallRequest request, RemoteCallAnswer answer)
	{
		return await parent::deleteAction(request, answer);
	}
	
	
	
	/**
	 * Stop
	 */
	@ApiMethod{ "method_name": "stop" }
	static async list stopAction(RemoteCallRequest request, RemoteCallAnswer answer)
	{
		/* Create api */
		CrudApi api = rtl::newInstance(static::getCurrentClassName());
		
		/* Get data from request */
		api.action = "stop";
		api.answer = answer;
		api.request = request;
		api.pk = request.data["pk"] |> default Dict {};
		
		/* Find item */
		api.old_item = await api.findItemByKey(api.pk);
		if (api.old_item == null)
		{
			throw new ApiException
			(
				_("Runtime.Web.CRUD", "Item not found"),
				rtl::ERROR_ITEM_NOT_FOUND
			);
		}
		
		/* Stop docker service */
		string service_id = api.old_item.docker_json["ID"];
		string url_api = "/services/" ~ service_id;
		string content = await DockerLib::dockerApi(url_api, "DELETE");
		
		/* Set disabled */
		Service new_item = api.old_item;
		new_item <= is_deleted <= 1;
		new_item <= enable <= 0;
		await Service::save(new_item);
		
		/* Find new item */
		api.new_item = await api.findItemByKey(api.pk);
		
		/* Process item */
		Dict old_item = await api.processItem(api.old_item);
		
		/* Create response */
		Dict response =
		{
			"pk": api.pk,
			"old_item": old_item,
		};
		answer = answer::success(answer, response);
		
		return [ request, answer ];
	}
}