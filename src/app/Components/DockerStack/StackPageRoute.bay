/*!
 *  Bayrell Cloud OS
 *
 *  (c) Copyright 2020-2023 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Bayrell.CloudOS.Components.DockerStack;

use Runtime.ModelProxy;
use Runtime.Web.BaseModel;
use Runtime.Web.BaseWidget;
use Runtime.Web.RouteInfo;
use Runtime.Widget.Crud.CrudRoute;
use Runtime.Widget.Table.TableCrudModel;
use Runtime.Widget.Form.FormCrudModel;
use Runtime.Widget.Button;
use Runtime.Widget.FieldComponent;
use Runtime.Widget.FieldInfo;
use Runtime.Widget.Input;
use Runtime.Widget.Label;


class StackPageRoute extends CrudRoute
{
	
	/**
	 * Returns routes
	 */
	pure Collection<RouteInfo> getRoutes() =>
	[
		new RouteInfo
		{
			"uri": "/docker/stack/",
			"name": "app:docker:stack:index",
			"method": "actionIndex",
		},
		new RouteInfo
		{
			"uri": "/docker/stack/add/",
			"name": "app:docker:stack:add",
			"method": "actionSave",
		},
		new RouteInfo
		{
			"uri": "/docker/stack/{id}/edit/",
			"name": "app:docker:stack:edit",
			"method": "actionSave",
		},
		new RouteInfo
		{
			"uri": "/docker/stack/{id}/delete/",
			"name": "app:docker:stack:delete",
			"method": "actionDelete",
		},
	];
	
	
	/**
	 * Setup crud widget
	 */
	Dict setupWidget(ModelProxy<BaseWidget> widget)
	{
		/* Api name */
		widget.commit("setApiName", "app.docker.stack");
		
		/* Stack name */
		widget.commit("addField", new FieldInfo{
			"label": "Stack name",
			"name": "stack_name",
		});
		
		/* Table */
		if (widget.data() instanceof TableCrudModel)
		{
			widget.commit("setFieldsList", [
				new FieldComponent{"name": "row_number"},
				new FieldComponent{"name": "stack_name", "component": classof Label},
				new FieldComponent{"name": "row_buttons"},
			]);
			
			/* Setup page */
			widget.commit("setPage", this.container.request.query.get("page", 1));
		}
		
		/* Form */
		if (widget.data() instanceof FormCrudModel)
		{
			widget.commit("setFieldsList", [
				new FieldComponent{"name": "stack_name", "component": classof Input},
			]);
			
			/* Setup primary key */
			if (this.container.route.name != "app:docker:stack:add")
			{
				widget.commit("setPrimaryKey", {
					"stack_name": this.container.route.matches.get("id"),
				});
			}
			
			/* Setup back page */
			this.page_model.commit("setBackPage", static::url("app:docker:stack:index"));
		}
		
		/* Add components */
		ModelProxy layout = this.layoutProxy()
		layout.commit("addComponent", classof Input);
		layout.commit("addComponent", classof Label);
		
		/* Load widgets data */
		await this.page_model.commitAsync("setupWidgets");
		await this.page_model.commitAsync("loadWidgets");
	}
	
	
	/**
	 * Returns href
	 */
	static string getHref(string name, Dict params = null)
	{
		if (name == "add")
		{
			return static::url("app:docker:stack:add");
		}
		else if (name == "edit")
		{
			return static::url("app:docker:stack:edit", {"id": params["item", "stack_name"]});
		}
		else if (name == "delete")
		{
			return static::url("app:docker:stack:delete", {"id": params["item", "stack_name"]});
		}
		return "";
	}
	
	
	/**
	 * Returns page title
	 */
	static string getPageTitle(BaseModel page_model, string action)
	{
		if (action == "name")
		{
			return "docker stack";
		}
		if (action == "names")
		{
			return "docker stacks";
		}
		else if (action == "item")
		{
			FormCrudModel widget = page_model.getWidget("form");
			return widget["item", "stack_name"];
		}
		return null;
	}
	
}