/*!
 *  Bayrell Cloud OS
 *
 *  (c) Copyright 2020-2023 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Bayrell.CloudOS.Components.DockerStack;

use Runtime.Web.BaseModel;
use Runtime.Web.BaseRoute;
use Runtime.Web.RouteInfo;
use Runtime.Widget.Crud.CrudWidget;
use Runtime.Widget.Crud.DeletePage;
use Runtime.Widget.Crud.SavePage;
use Runtime.Widget.Crud.TablePage;


class StackPageRoute extends BaseRoute
{
	
	/**
	 * Returns routes
	 */
	pure Collection<RouteInfo> getRoutes() =>
	[
		new RouteInfo
		{
			"uri": "/docker/stack/",
			"name": "app:docker:stack:index",
			"method": "actionIndex",
		},
		new RouteInfo
		{
			"uri": "/docker/stack/add/",
			"name": "app:docker:stack:add",
			"method": "actionSave",
		},
		new RouteInfo
		{
			"uri": "/docker/stack/{id}/",
			"name": "app:docker:stack:edit",
			"method": "actionSave",
		},
		new RouteInfo
		{
			"uri": "/docker/stack/{id}/delete/",
			"name": "app:docker:stack:delete",
			"method": "actionDelete",
		},
	];
	
	
	/**
	 * Returns layout name
	 */
	string getLayoutName() => "default";
	
	
	/**
	 * Returns page model
	 */
	string getPageModelName() => classof BaseModel;
	
	
	/**
	 * Setup crud widget
	 */
	Dict setupWidget(ModelProxy<FormWidget> widget)
	{
		/* Api name */
		widget.commit("setApiName", "app.docker.stack");
		
		/* Model name */
		widget.commit("setModelName", classof DockerStack);
		
		/* Stack name */
		widget.commit("addField", "stack_name", {
			"label": "Stack name",
			"field_name": "stack_name",
		});
		
		/* Table fields */
		widget.commit("setTableFields", [
			"stack_name",
		]);
		
		/* Form fields */
		widget.commit("setFormFields", [
			"stack_name",
		]);
		
		/* Setup route class */
		widget.commit("setRouteClass", static::getClassName());
		
		/* Setup primary key */
		if (
			this.container.route.matches.has("id") and
			(
				this.container.route.name == "app:docker:stack:add" or
				this.container.route.name == "app:docker:stack:edit" or
				this.container.route.name == "app:docker:stack:delete"
			)
		)
		{
			widget.commit("setPrimaryKey", {
				"id": this.container.route.matches.get("id"),
			});
		}
		
		/* Setup page */
		if (this.container.route.name == "app:docker:stack:index")
		{
			widget.commit("setPage", this.container.request.query.get("page", 1));
		}
		
		/* Setup back page */
		widget.commit("setBackPage", static::url("app:docker:stack:index"));
		
		return settings;
	}
	
	
	/**
	 * Returns page title
	 */
	string getPageTitle(ModelProxy<Widget> widget, string action)
	{
		if (action == "name")
		{
			return "docker stack";
		}
		else if (action == "item")
		{
			return widget.data(["item", "stack_name"]);
		}
		else if (action == "save")
		{
			boolean is_new = widget.call("isNew");
			if (is_new)
			{
				return widget.call("getPageTitle", "add");
			}
			return widget.call("getPageTitle", "edit");
		}
		return null;
	}
	
	
	/**
	 * Action index
	 */
	async void actionIndex()
	{
		Widget widget = this.page_model.proxy(["widgets", "crud"]);
		
		/* Add widgets */
		this.page_model.commit("addWidget", new CrudWidget{ "action": "table" });
		
		/* Setup widgets */
		this.setupWidget(widget);
		
		/* Init widgets */
		await this.page_model.commitAsync("initWidgets");
		
		/* Set title */
		this.setPageTitle( widget.call("getPageTitle", "index") );
		
		/* Render page */
		this.container.render( classof TablePage );
	}
	
	
	/**
	 * Action save
	 */
	async void actionSave()
	{
		Widget widget = this.page_model.proxy(["widgets", "crud"]);
		
		/* Add widgets */
		this.page_model.commit("addWidget", new CrudWidget{ "action": "save" });
		
		/* Setup widgets */
		this.setupWidget(widget);
		
		/* Init widgets */
		await this.page_model.commitAsync("initWidgets");
		
		/* Set title */
		this.setPageTitle( widget.call("getPageTitle", "save") );
		
		/* Render page */
		this.container.render( classof SavePage );
	}
	
	
	/**
	 * Action delete
	 */
	async void actionDelete()
	{
		Widget widget = this.page_model.proxy(["widgets", "crud"]);
		
		/* Add widgets */
		this.page_model.commit("addWidget", new CrudWidget{ "action": "delete" });
		
		/* Setup widgets */
		this.setupWidget(widget);
		
		/* Init widgets */
		await this.page_model.commitAsync("initWidgets");
		
		/* Set title */
		this.setPageTitle( widget.call("getPageTitle", "delete") );
		
		/* Render page */
		this.container.render( classof DeletePage );
	}
	
}