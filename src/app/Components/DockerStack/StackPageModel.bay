/*!
 *  Bayrell Cloud OS
 *
 *  (c) Copyright 2020-2023 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Bayrell.CloudOS.Components.DockerStack;

use Runtime.Callback;
use Runtime.ModelProxy;
use Runtime.Web.BaseModel;
use Runtime.Web.BaseRoute;
use Runtime.Web.Layout;
use Runtime.Web.RouteInfo;
use Runtime.Widget.Crud.CrudPageModel;
use Runtime.Widget.Form.FormModel;
use Runtime.Widget.Table.TableModel;
use Bayrell.CloudOS.Components.DockerStack.StackFormModel;
use Bayrell.CloudOS.Components.DockerStack.StackTableModel;


struct StackPageModel extends CrudPageModel
{
	/**
	 * Init widget
	 */
	async static void initWidget(ModelProxy<BaseModel> widget, ModelProxy<Layout> layout)
	{
		/* Add widgets */
		string action = widget.data("action");
		if (action == "index")
		{
			widget.commit("addWidget", new StackTableModel{"widget_name": "table"});
		}
		else if (action == "save" or action == "delete")
		{
			widget.commit("addWidget", new StackFormModel{"widget_name": "form"});
		}
		
		await parent::initWidget(widget, layout);
		
		RouteInfo route = layout.data("route");
		ModelProxy<FormModel> form = widget.proxy(["widgets", "form"]);
		ModelProxy<TableModel> table = widget.proxy(["widgets", "table"]);
		
		/* Setup table page */
		if (route.name == "app:docker:stack:index")
		{
			Dict request_query = layout.data("request_query");
			table.commit("setPage", request_query.get("page", 1));
		}
		
		/* Setup form page */
		if (
			route.name == "app:docker:stack:add" or
			route.name == "app:docker:stack:edit" or
			route.name == "app:docker:stack:delete"
		)
		{
			/* Set primary key */
			if (route.name != "app:docker:stack:add")
			{
				form.commit("setPrimaryKey", {
					"stack_name": route.matches.get("id"),
				});
			}
			
			/* Setup back page */
			ModelProxy page_model = layout.proxy(layout.call("getPageModelPath"));
			page_model.commit("setBackPage", static::url("app:docker:stack:index"));
		}
	}
	
	
	/**
	 * Returns href
	 */
	static string getHref(string name, Dict params = null)
	{
		if (name == "add")
		{
			return static::url("app:docker:stack:add");
		}
		else if (name == "edit")
		{
			return static::url("app:docker:stack:edit", {"id": params["item", "stack_name"]});
		}
		else if (name == "delete")
		{
			return static::url("app:docker:stack:delete", {"id": params["item", "stack_name"]});
		}
		return "";
	}
	
	
	/**
	 * Get names
	 */
	static string getNames(string action, Dict obj = null)
	{
		if (action == "name")
		{
			return "docker stack";
		}
		if (action == "names")
		{
			return "docker stacks";
		}
		else if (action == "item_name")
		{
			return obj["item", "stack_name"];
		}
	}
}