/*!
 *  Bayrell Cloud OS
 *
 *  (c) Copyright 2020-2023 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Bayrell.CloudOS.Components.Routes;

use Runtime.Callback;
use Runtime.ModelProxy;
use Runtime.Web.BaseModel;
use Runtime.Web.BaseRoute;
use Runtime.Web.Layout;
use Runtime.Widget.Crud.CrudDataStorage;
use Runtime.Widget.Table.TableModel;
use Runtime.Widget.FieldInfo;
use Runtime.Widget.FieldList;
use Runtime.Widget.Label;
use Runtime.Widget.SelectLabel;
use Bayrell.CloudOS.Components.Routes.RoutePageModel;


struct RouteTableModel extends TableModel
{
	/**
	 * Fields
	 */
	pure static Dict fields() =>
	{
		"row_number": new FieldInfo{
			"name": "row_number",
		},
		"enable": new FieldInfo{
			"label": "Enable",
			"name": "enable",
			"component": classof SelectLabel,
			"options": [
				{"label": "No", "value": "0"},
				{"label": "Yes", "value": "1"},
			],
		},
		"protocol": new FieldInfo{
			"label": "Protocol",
			"name": "protocol",
			"component": classof SelectLabel,
			"options": [
				{"label": "HTTP", "value": "http"},
			],
		},
		"source": new FieldInfo{
			"label": "Source",
			"name": "source",
			"value_method": new Callback(static::getClassName(), "getTableValue"),
		},
		"dest": new FieldInfo{
			"label": "Dest",
			"name": "dest",
			"value_method": new Callback(static::getClassName(), "getTableValue"),
		},
		"row_buttons": new FieldInfo{
			"name": "row_buttons",
		},
	};
	
	
	/**
	 * Init widget
	 */
	async static void initWidget(ModelProxy<BaseModel> widget, ModelProxy<Layout> layout)
	{
		await parent::initWidget(widget, layout);
		
		/* Get storage */
		ModelProxy<CrudDataStorage> data = widget.proxy("data");
		ModelProxy<FieldList> fields = widget.proxy("fields");
		
		/* Api name */
		data.commit("setApiName", "app.route");
		
		/* Set fields */
		fields.commit("setFields", static::fields());
		fields.commit("setPrimaryKeys", ["id"]);
		
		/* Set table fields list */
		fields.commit("setFieldsList", [
			"row_number",
			"enable",
			"protocol",
			"source",
			"dest",
			"row_buttons",
		]);
		
		/* Set get route name */
		widget.commit("setGetRouteName", new Callback(classof RoutePageModel, "getRouteName"));
		
		/* Add components */
		layout.commit("addComponent", classof Label);
		layout.commit("addComponent", classof SelectLabel);
	}
	
	
	/**
	 * Returns table value
	 */
	static string getTableValue
	(
		Layout layout, TableModel model,
		int row_number, FieldInfo field, Dict item
	)
	{
		if (field.name == "source")
		{
			return static::getSourceColumn(item);
		}
		else if (field.name == "dest")
		{
			return static::getDestColumn(item);
		}
		return "";
	}
	
	
	/**
	 * Returns source
	 */
	static string getSourceColumn(Dict item)
	{
		string res = "";
		string domain_name = "";
		
		res ~= item["domain_name"];
		
		if (item["source_port"] != 80)
		{
			res ~= ":" ~ item["source_port"];
		}
		
		if (item["route_prefix"] != "/")
		{
			res ~= item["route_prefix"];
		}
		
		return res;
	}
	
	
	/**
	 * Returns dest
	 */
	static string getDestColumn(Dict item)
	{
		string res = "";
		
		res ~= item["docker_name"];
		
		if (item["target_port"] != 80)
		{
			res ~= ":" ~ item["target_port"];
		}
		
		if (item["target_prefix"] != "/")
		{
			res ~= item["target_prefix"];
		}
		
		return res;
	}
	
	
	/**
	 * Get names
	 */
	static string getNames(string action, Dict obj = null)
	{
		if (action == "name")
		{
			return "route";
		}
		if (action == "names")
		{
			return "routes";
		}
		else if (action == "item_name")
		{
			return static::getSourceColumn(obj["item"]);
		}
		else if (action == "delete_content")
		{
			return "Delete route '" ~
				static::getSourceColumn(obj["item"]) ~ "' => " ~
				static::getDestColumn(obj["item"]) ~ " ?";
		}
	}
	
}