/*!
 *  Bayrell Cloud OS
 *
 *  (c) Copyright 2020-2023 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Bayrell.CloudOS.Components.Routes;

use Runtime.lib;
use Runtime.ModelProxy;
use Runtime.Web.ApiResult;
use Runtime.Web.Crud.CrudPageModel;
use Runtime.Web.Crud.FieldInfo;
use Bayrell.CloudOS.Models.Domain;
use Bayrell.CloudOS.Models.Route;


struct RoutePageModel extends CrudPageModel
{
	Dict fields = {
		"enable": new FieldInfo{
			"label": "Enable",
			"field_name": "enable",
			"options": [
				{"label": "No", "value": "0"},
				{"label": "Yes", "value": "1"},
			],
		},
		"protocol": new FieldInfo{
			"label": "Protocol",
			"field_name": "protocol",
			"options": [
				{"label": "HTTP", "value": "http"},
			],
		},
		
		/* Source */
		"domain_id": new FieldInfo{
			"label": "Domain name",
			"field_name": "domain_id",
			"options": [
			],
		},
		"domain_name": new FieldInfo{
			"label": "Domain name",
			"field_name": "domain_name",
		},
		"source_port": new FieldInfo{
			"label": "Source port",
			"field_name": "source_port",
		},
		"route_prefix": new FieldInfo{
			"label": "Route prefix",
			"field_name": "route_prefix",
		},
		
		/* Dest */
		"docker_name": new FieldInfo{
			"label": "Docker name",
			"field_name": "docker_name",
		},
		"target_port": new FieldInfo{
			"label": "Target port",
			"field_name": "target_port",
		},
		"target_prefix": new FieldInfo{
			"label": "Target prefix",
			"field_name": "target_prefix",
		},
		
		/* Nginx config */
		"nginx_config": new FieldInfo{
			"label": "Nginx config",
			"field_name": "nginx_config",
		},
	};
	
	
	/**
	 * Returns api name
	 */
	pure string getApiName() => "app.route";
	
	
	/**
	 * Returns model name
	 */
	pure string getModelName() => classof Route;
	
	
	/**
	 * Validate model
	 */
	public bool validateForm()
	{
		return true;
	}
	
	
	/**
	 * Returns page title
	 */
	string getPageTitle(string action)
	{
		if (action == "index")
		{
			return "Routes";
		}
		else if (action == "add")
		{
			return "Add route";
		}
		else if (action == "edit")
		{
			return "Edit route '" ~ this.getSourceColumn(this.item_form.item) ~ "'";
		}
		else if (action == "delete")
		{
			return "Delete route ?";
		}
		else if (action == "delete_content")
		{
			return "Delete route '" ~
				this.getSourceColumn(this.item_form.item) ~ "' => " ~
				this.getDestColumn(this.item_form.item) ~ " ?";
		}
		return "";
	}
	
	
	/**
	 * Returns domain_name from dictionary
	 */
	string getDomainName(int domain_id)
	{
		Collection domains = this.dictionary["domains"]
		if (domains == null) return "";
		
		Domain domain = domains.findItem( lib::equalAttr("id", domain_id) );
		if (domain == null) return "";
		
		return domain.domain_name;
	}
	
	
	/**
	 * Returns source
	 */
	string getSourceColumn(Route item)
	{
		string res = "";
		string domain_name = "";
		
		res ~= this.getDomainName(item.domain_id);
		
		if (item["source_port"] != 80)
		{
			res ~= ":" ~ item["source_port"];
		}
		
		if (item["route_prefix"] != "/")
		{
			res ~= item["route_prefix"];
		}
		
		return res;
	}
	
	
	/**
	 * Returns dest
	 */
	string getDestColumn(Route item)
	{
		string res = "";
		
		res ~= item["docker_name"];
		
		if (item["target_port"] != 80)
		{
			res ~= ":" ~ item["target_port"];
		}
		
		if (item["target_prefix"] != "/")
		{
			res ~= item["target_prefix"];
		}
		
		return res;
	}
	
	
	/**
	 * Set api result
	 */
	static void setApiResult(ModelProxy model, string event, ApiResult res)
	{
		parent::setApiResult(model, event, res);
		
		if (res == null) return;
		if (not res.isSuccess()) return;
		
		Collection<Domain> domains = model.data(["dictionary", "domains"]);
		if (domains)
		{
			Dict fields = model.data("fields");
			fields <= domain_id <= options <= domains
				.map(
					Dict (Domain item) => { "label": item.domain_name, "value": item.id }
				)
				.sort(
					int (Dict a, Dict b) => a["label"] > b["label"]
				)
			;
			model.commit("setFields", fields);
		}
	}
	
}