/*!
 *  Bayrell Cloud OS
 *
 *  (c) Copyright 2020-2023 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Bayrell.CloudOS.Components.Routes;

use Runtime.lib;
use Runtime.ModelProxy;
use Runtime.Web.BaseModel;
use Runtime.Web.BaseRoute;
use Runtime.Web.Layout;
use Runtime.Widget.Crud.CrudPageModel;
use Runtime.Widget.Form.FormCrudModel;
use Runtime.Widget.Table.TableCrudModel;
use Runtime.Widget.FieldInfo;
use Runtime.Widget.FieldItem;
use Runtime.Widget.Input;
use Runtime.Widget.Label;
use Runtime.Widget.Select;
use Runtime.Widget.SelectLabel;
use Runtime.Widget.TextArea;


struct RoutePageModel extends CrudPageModel
{
	Dict fields = {
		"enable": new FieldInfo{
			"label": "Enable",
			"field_name": "enable",
			"options": [
				{"label": "No", "value": "0"},
				{"label": "Yes", "value": "1"},
			],
		},
		"protocol": new FieldInfo{
			"label": "Protocol",
			"field_name": "protocol",
			"options": [
				{"label": "HTTP", "value": "http"},
			],
		},
		
		/* Source */
		"domain_id": new FieldInfo{
			"label": "Domain name",
			"field_name": "domain_id",
			"options": [
			],
		},
		"domain_name": new FieldInfo{
			"label": "Domain name",
			"field_name": "domain_name",
		},
		"source_port": new FieldInfo{
			"label": "Source port",
			"name": "source_port",
		},
		"route_prefix": new FieldInfo{
			"label": "Route prefix",
			"name": "route_prefix",
		},
		
		/* Dest */
		"docker_name": new FieldInfo{
			"label": "Docker name",
			"name": "docker_name",
		},
		"target_port": new FieldInfo{
			"label": "Target port",
			"name": "target_port",
		},
		"target_prefix": new FieldInfo{
			"label": "Target prefix",
			"name": "target_prefix",
		},
		
		/* Nginx config */
		"nginx_config": new FieldInfo{
			"label": "Nginx config",
			"name": "nginx_config",
		},
	};
	
	
	/**
	 * Setup crud widget
	 */
	async static void setupWidget(ModelProxy<BaseModel> widget, BaseRoute route)
	{
		if (widget.data() == null) return;
		
		/* Api name */
		widget.commit("setApiName", "app.route");
		
		/* Stack name */
		widget.commit("setFields", route.page_model.data("fields"));
		
		/* Table */
		if (widget.data() instanceof TableCrudModel)
		{
			widget.commit("setFieldsList", [
				new FieldItem{"name": "row_number"},
				new FieldItem{"name": "enable", "component": classof SelectLabel},
				new FieldItem{"name": "protocol", "component": classof SelectLabel},
				new FieldItem{
					"name": "source",
					"value_method": [static::getClassName(), "getTableValue"],
				},
				new FieldItem{
					"name": "dest",
					"value_method": [static::getClassName(), "getTableValue"],
				},
				new FieldItem{"name": "row_buttons"},
			]);
			
			/* Setup page */
			widget.commit("setPage", route.container.request.query.get("page", 1));
		}
		
		/* Form */
		if (widget.data() instanceof FormCrudModel)
		{
			widget.commit("setFieldsList", [
				new FieldItem{"enable": "domain_name", "component": classof Select},
				new FieldItem{"enable": "protocol", "component": classof Select},
				new FieldItem{"enable": "domain_id", "component": classof Select},
				new FieldItem{"enable": "source_port", "component": classof Input},
				new FieldItem{"enable": "route_prefix", "component": classof Input},
				new FieldItem{"enable": "docker_name", "component": classof Input},
				new FieldItem{"enable": "target_port", "component": classof Input},
				new FieldItem{"enable": "target_prefix", "component": classof Input},
				new FieldItem{"enable": "nginx_config", "component": classof Input},
			]);
			
			/* Setup primary key */
			if (route.container.route.name != "app:routes:add")
			{
				widget.commit("setPrimaryKey", {
					"id": route.container.route.matches.get("id"),
				});
			}
			
			/* Setup back page */
			route.page_model.commit("setBackPage", static::url("app:routes:index"));
		}
		
		/* Add components */
		route.layout.commit("addComponent", classof Input);
		route.layout.commit("addComponent", classof Label);
		route.layout.commit("addComponent", classof Select);
		route.layout.commit("addComponent", classof SelectLabel);
		route.layout.commit("addComponent", classof TextArea);
	}
	
	
	/**
	 * Returns href
	 */
	string getHref(string name, Dict params = null)
	{
		if (name == "add")
		{
			return static::url("app:routes:add");
		}
		else if (name == "edit")
		{
			return static::url("app:routes:edit", {"id": params["item", "id"]});
		}
		else if (name == "delete")
		{
			return static::url("app:routes:delete", {"id": params["item", "id"]});
		}
		return "";
	}
	
	
	/**
	 * Returns table value
	 */
	static string getTableValue(
		Layout layout, TableCrudModel model,
		int row_number, FieldItem field, Dict item
	)
	{
		if (field.name == "source")
		{
			return layout.getPageModel().getSourceColumn(item);
		}
		else if (field.name == "dest")
		{
			return layout.getPageModel().getDestColumn(item);
		}
		return "";
	}
	
	
	/**
	 * Returns page title
	 */
	string getPageTitle(string action)
	{
		if (action == "name")
		{
			return "route";
		}
		if (action == "names")
		{
			return "routes";
		}
		else if (action == "item")
		{
			FormCrudModel widget = this.getWidget("form");
			return this.getSourceColumn(widget.item);
		}
		else if (action == "delete_content")
		{
			FormCrudModel widget = this.getWidget("form");
			return "Delete route '" ~
				this.getSourceColumn(widget.item) ~ "' => " ~
				this.getDestColumn(widget.item) ~ " ?";
		}
		return parent::getPageTitle(action);
	}
	
	
	/**
	 * Returns domain_name from dictionary
	 */
	string getDomainName(int domain_id)
	{
		FormCrudModel widget = this.getWidget("form");
		if (widget == null) return "";
		
		Collection domains = widget.dictionary["domains"]
		if (domains == null) return "";
		
		Dict domain = domains.findItem( lib::equalAttr("id", domain_id) );
		if (domain == null) return "";
		
		return domain.domain_name;
	}
	
	
	/**
	 * Returns source
	 */
	string getSourceColumn(Dict item)
	{
		string res = "";
		string domain_name = "";
		
		res ~= this.getDomainName(item["domain_id"]);
		
		if (item["source_port"] != 80)
		{
			res ~= ":" ~ item["source_port"];
		}
		
		if (item["route_prefix"] != "/")
		{
			res ~= item["route_prefix"];
		}
		
		return res;
	}
	
	
	/**
	 * Returns dest
	 */
	string getDestColumn(Dict item)
	{
		string res = "";
		
		res ~= item["docker_name"];
		
		if (item["target_port"] != 80)
		{
			res ~= ":" ~ item["target_port"];
		}
		
		if (item["target_prefix"] != "/")
		{
			res ~= item["target_prefix"];
		}
		
		return res;
	}
	
}