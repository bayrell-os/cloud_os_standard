/*!
 *  Bayrell Cloud OS
 *
 *  (c) Copyright 2020-2023 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Bayrell.CloudOS.Components.Routes;

use Runtime.lib;
use Runtime.Callback;
use Runtime.ModelProxy;
use Runtime.Web.BaseModel;
use Runtime.Web.BaseRoute;
use Runtime.Web.Layout;
use Runtime.Widget.Crud.CrudPageModel;
use Runtime.Widget.Form.FormModel;
use Runtime.Widget.Form.FormModel;
use Runtime.Widget.Table.TableModel;
use Runtime.Widget.FieldInfo;
use Runtime.Widget.FieldItem;
use Runtime.Widget.Input;
use Runtime.Widget.Label;
use Runtime.Widget.Select;
use Runtime.Widget.SelectLabel;
use Runtime.Widget.TextArea;


struct RoutePageModel extends CrudPageModel
{
	/**
	 * Fields
	 */
	pure static Dict fields() =>
	{
		"enable": new FieldInfo{
			"label": "Enable",
			"field_name": "enable",
			"options": [
				{"label": "No", "value": "0"},
				{"label": "Yes", "value": "1"},
			],
		},
		"protocol": new FieldInfo{
			"label": "Protocol",
			"field_name": "protocol",
			"options": [
				{"label": "HTTP", "value": "http"},
			],
		},
		
		/* Source */
		"domain_id": new FieldInfo{
			"label": "Domain name",
			"field_name": "domain_id",
			"options": [
			],
		},
		"domain_name": new FieldInfo{
			"label": "Domain name",
			"field_name": "domain_name",
		},
		"source_port": new FieldInfo{
			"label": "Source port",
			"name": "source_port",
		},
		"route_prefix": new FieldInfo{
			"label": "Route prefix",
			"name": "route_prefix",
		},
		
		/* Dest */
		"docker_name": new FieldInfo{
			"label": "Docker name",
			"name": "docker_name",
		},
		"target_port": new FieldInfo{
			"label": "Target port",
			"name": "target_port",
		},
		"target_prefix": new FieldInfo{
			"label": "Target prefix",
			"name": "target_prefix",
		},
		
		/* Nginx config */
		"nginx_config": new FieldInfo{
			"label": "Nginx config",
			"name": "nginx_config",
		},
	};
	
	
	/**
	 * Init widget
	 */
	async static void initWidget(ModelProxy<BaseModel> model, BaseRoute route)
	{
		await parent::initWidget(model, route);
		
		ModelProxy form = model.proxy(["widgets", "form"]);
		ModelProxy table = model.proxy(["widgets", "table"]);
		
		if (table.data() instanceof TableModel)
		{
			await static::initWidgetTable(model, table, route);
		}
		
		if (form.data() instanceof FormModel)
		{
			await static::initWidgetForm(model, form, route);
		}
		
		await static::initComponents(model,  route);
	}
	
	
	/**
	 * Init components
	 */
	async static void initComponents(ModelProxy<BaseModel> model, BaseRoute route)
	{
		route.layout.commit("addComponent", classof Input);
		route.layout.commit("addComponent", classof Label);
		route.layout.commit("addComponent", classof Select);
		route.layout.commit("addComponent", classof SelectLabel);
		route.layout.commit("addComponent", classof TextArea);
	}
	
	
	/**
	 * Init widget table
	 */
	async static void initWidgetTable
	(
		ModelProxy<BaseModel> page_model,
		ModelProxy<BaseModel> widget,
		BaseRoute route
	)
	{
		/* Api name */
		widget.commit("setApiName", "app.route");
		
		/* Set fields */
		widget.commit("setFields", static::fields());
		
		/* Set href */
		widget.commit("setGetHref", new Callback(static::getClassName(), "getHref"));
		
		/* Set table fields list */
		widget.commit("setFieldsList", [
			new FieldItem{"name": "row_number"},
			new FieldItem{"name": "enable", "component": classof SelectLabel},
			new FieldItem{"name": "protocol", "component": classof SelectLabel},
			new FieldItem{
				"name": "source",
				"label": "Source",
				"value_method": new Callback(static::getClassName(), "getTableValue"),
			},
			new FieldItem{
				"name": "dest",
				"label": "Dest",
				"value_method": new Callback(static::getClassName(), "getTableValue"),
			},
			new FieldItem{"name": "row_buttons"},
		]);
		
		/* Setup page */
		widget.commit("setPage", route.container.request.query.get("page", 1));
	}
	
	
	/**
	 * Init widget form
	 */
	async static void initWidgetForm
	(
		ModelProxy<BaseModel> page_model,
		ModelProxy<BaseModel> widget,
		BaseRoute route
	)
	{
		/* Api name */
		widget.commit("setApiName", "app.route");
		
		/* Set fields */
		widget.commit("setFields", static::fields());
		
		/* Set form fields list */
		widget.commit("setFieldsList", [
			new FieldItem{"name": "enable", "component": classof Select},
			new FieldItem{"name": "protocol", "component": classof Select},
			new FieldItem{"name": "domain_id", "component": classof Select},
			new FieldItem{"name": "source_port", "component": classof Input},
			new FieldItem{"name": "route_prefix", "component": classof Input},
			new FieldItem{"name": "docker_name", "component": classof Input},
			new FieldItem{"name": "target_port", "component": classof Input},
			new FieldItem{"name": "target_prefix", "component": classof Input},
			new FieldItem{"name": "nginx_config", "component": classof TextArea},
		]);
		
		/* Setup primary key */
		if (
			widget.data("widget_path") == "form" and
			route.container.route.name != "app:routes:add"
		)
		{
			widget.commit("setPrimaryKey", {
				"id": route.container.route.matches.get("id"),
			});
		}
		
		/* Setup back page */
		route.page_model.commit("setBackPage", static::url("app:routes:index"));
	}
	
	
	/**
	 * Widget event
	 */
	async static Dict event
	(
		ModelProxy<BaseModel> page_model,
		ModelProxy<BaseModel> widget,
		string action, Dict obj
	)
	{
		obj = await parent::event(page_model, widget, action, obj);
		
		/* Form */
		if (
			widget.data() instanceof FormModel and
			action == FormModel::ON_LOAD_ITEM_AFTER and
			obj["api"].isSuccess()
		)
		{
			widget.commit
			(
				"setFieldOptionsFromApi",
				{
					"api": obj["api"],
					"from": "domains",
					"to": "domain_id",
					"item": Dict (Dict item) =>
					{
						"label": item["domain_name"],
						"value": item["id"]
					},
				}
			);
		}
		
		return obj;
	}
	
	
	/**
	 * Returns href
	 */
	static string getHref(string name, Dict params = null)
	{
		if (name == "add")
		{
			return static::url("app:routes:add");
		}
		else if (name == "edit")
		{
			return static::url("app:routes:edit", {"id": params["item", "id"]});
		}
		else if (name == "delete")
		{
			return static::url("app:routes:delete", {"id": params["item", "id"]});
		}
		return "";
	}
	
	
	/**
	 * Returns table value
	 */
	static string getTableValue
	(
		Layout layout, TableModel model,
		int row_number, FieldItem field, Dict item
	)
	{
		if (field.name == "source")
		{
			return static::getSourceColumn(item);
		}
		else if (field.name == "dest")
		{
			return static::getDestColumn(item);
		}
		return "";
	}
	
	
	/**
	 * Returns page title
	 */
	string getPageTitle(string action)
	{
		if (action == "name")
		{
			return "route";
		}
		if (action == "names")
		{
			return "routes";
		}
		else if (action == "item")
		{
			FormModel form = this.getWidget("form");
			return static::getSourceColumn(form.item);
		}
		else if (action == "delete_content")
		{
			FormModel form = this.getWidget("form");
			return "Delete route '" ~
				static::getSourceColumn(form.item) ~ "' => " ~
				static::getDestColumn(form.item) ~ " ?";
		}
		return parent::getPageTitle(action);
	}
	
	
	/**
	 * Returns source
	 */
	static string getSourceColumn(Dict item)
	{
		string res = "";
		string domain_name = "";
		
		res ~= item["domain_name"];
		
		if (item["source_port"] != 80)
		{
			res ~= ":" ~ item["source_port"];
		}
		
		if (item["route_prefix"] != "/")
		{
			res ~= item["route_prefix"];
		}
		
		return res;
	}
	
	
	/**
	 * Returns dest
	 */
	static string getDestColumn(Dict item)
	{
		string res = "";
		
		res ~= item["docker_name"];
		
		if (item["target_port"] != 80)
		{
			res ~= ":" ~ item["target_port"];
		}
		
		if (item["target_prefix"] != "/")
		{
			res ~= item["target_prefix"];
		}
		
		return res;
	}
	
}