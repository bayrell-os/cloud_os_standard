/*!
 *  Bayrell Cloud OS
 *
 *  (c) Copyright 2020-2023 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Bayrell.CloudOS.Components.DockerYamlFiles;

use Runtime.Callback;
use Runtime.ModelProxy;
use Runtime.Web.BaseModel;
use Runtime.Web.BaseRoute;
use Runtime.Web.Layout;
use Runtime.Widget.Crud.CrudDataStorage;
use Runtime.Widget.Table.TableModel;
use Runtime.Widget.FieldInfo;
use Runtime.Widget.FieldList;
use Runtime.Widget.Label;
use Bayrell.CloudOS.Components.DockerYamlFiles.YamlFilePageModel;


struct YamlFileTableModel extends TableModel
{
	/**
	 * Fields
	 */
	pure static Dict fields() =>
	{
		"row_number": new FieldInfo{
			"name": "row_number",
		},
		"stack_name": new FieldInfo{
			"label": "Stack name",
			"name": "stack_name",
			"component": classof Label,
		}
        "file_name": new FieldInfo{
			"label": "File name",
			"name": "file_name",
			"component": classof Label,
		},
		"row_buttons": new FieldInfo{
			"name": "row_buttons",
		},
	};
	
	
	/**
	 * Init widget
	 */
	async static void initWidget(ModelProxy<BaseModel> widget, ModelProxy<Layout> layout)
	{
		await parent::initWidget(widget, layout);
		
		/* Get storage */
		ModelProxy<CrudDataStorage> data = widget.proxy("data");
		ModelProxy<FieldList> fields = widget.proxy("fields");
		
		/* Api name */
		data.commit("setApiName", "app.docker.yaml");
		
		/* Set fields */
		fields.commit("setFields", static::fields());
		fields.commit("setPrimaryKeys", ["id"]);
		
		/* Set table fields list */
		fields.commit("setFieldsList", [
			"row_number",
			"stack_name",
			"file_name",
			"row_buttons",
		]);
		
		/* Set get route name */
		widget.commit("setGetRouteName", new Callback(classof YamlFilePageModel, "getRouteName"));
		
		/* Add components */
		layout.commit("addComponent", classof Label);
	}
	
}