/*!
 *  Bayrell Cloud OS
 *
 *  (c) Copyright 2020-2023 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Bayrell.CloudOS.Components.NginxFiles;

use Runtime.Callback;
use Runtime.ModelProxy;
use Runtime.Web.BaseModel;
use Runtime.Web.BaseRoute;
use Runtime.Web.Layout;
use Runtime.Widget.Crud.CrudPageModel;
use Runtime.Widget.Form.FormModel;
use Runtime.Widget.Table.TableModel;
use Runtime.Widget.FieldInfo;
use Runtime.Widget.FieldItem;
use Runtime.Widget.Input;
use Runtime.Widget.Label;
use Runtime.Widget.Select;
use Runtime.Widget.SelectLabel;
use Runtime.Widget.TextArea;


struct NginxFilePageModel extends CrudPageModel
{
	/**
	 * Fields
	 */
	pure static Dict fields() =>
	{
		"name": new FieldInfo{
			"label": "File name",
			"name": "name",
		},
		"enable": new FieldInfo{
			"label": "Enable",
			"name": "enable",
			"options": [
				{"label": "No", "value": "0"},
				{"label": "Yes", "value": "1"},
			],
		},
		"content": new FieldInfo{
			"label": "Content",
			"name": "content",
		},
	};
	
	
	/**
	 * Init widget
	 */
	async static void initWidgets(ModelProxy<BaseModel> model, BaseRoute route)
	{
		await parent::initWidgets(model, route);
		
		ModelProxy form = model.proxy(["widgets", "form"]);
		ModelProxy table = model.proxy(["widgets", "table"]);
		
		if (table.data() instanceof TableModel)
		{
			await static::setupWidgetTable(model, table, route);
		}
		
		if (form.data() instanceof FormModel)
		{
			await static::setupWidgetForm(model, form, route);
		}
		
		route.layout.commit("addComponent", classof Input);
		route.layout.commit("addComponent", classof Label);
		route.layout.commit("addComponent", classof Select);
		route.layout.commit("addComponent", classof SelectLabel);
		route.layout.commit("addComponent", classof TextArea);
	}
	
	
	/**
	 * Setup widget routes
	 */
	async static void setupWidgetTable
	(
		ModelProxy<BaseModel> page_model,
		ModelProxy<BaseModel> widget,
		BaseRoute route
	)
	{
		/* Api name */
		widget.commit("setApiName", "app.nginx_file");
		
		/* Set fields */
		widget.commit("setFields", static::fields());
		
		/* Set href */
		widget.commit("setGetHref", new Callback(static::getClassName(), "getHref"));
		
		/* Set table fields list */
		widget.commit("setFieldsList", [
			new FieldItem{"name": "row_number"},
			new FieldItem{"name": "name", "component": classof Label},
			new FieldItem{"name": "enable", "component": classof SelectLabel},
			new FieldItem{"name": "row_buttons"},
		]);
		
		/* Setup page */
		widget.commit("setPage", route.container.request.query.get("page", 1));
	}
	
	
	/**
	 * Setup widget routes
	 */
	async static void setupWidgetForm
	(
		ModelProxy<BaseModel> page_model,
		ModelProxy<BaseModel> widget,
		BaseRoute route
	)
	{
		/* Api name */
		widget.commit("setApiName", "app.nginx_file");
		
		/* Set fields */
		widget.commit("setFields", static::fields());
		
		/* Set form fields list */
		widget.commit("setFieldsList", [
			new FieldItem{"name": "name", "component": classof Input},
			new FieldItem{"name": "enable", "component": classof Select},
			new FieldItem{"name": "content", "component": classof TextArea},
		]);
		
		/* Setup primary key */
		if (
			widget.data("widget_path") == "form" and
			route.container.route.name != "app:nginx_files:add"
		)
		{
			widget.commit("setPrimaryKey", {
				"id": route.container.route.matches.get("id"),
			});
		}
		
		/* Setup back page */
		route.page_model.commit("setBackPage", static::url("app:nginx_files:index"));
	}
	
	
	/**
	 * Returns href
	 */
	static string getHref(string name, Dict params = null)
	{
		if (name == "add")
		{
			return static::url("app:nginx_files:add");
		}
		else if (name == "edit")
		{
			return static::url("app:nginx_files:edit", {"id": params["item", "id"]});
		}
		else if (name == "delete")
		{
			return static::url("app:nginx_files:delete", {"id": params["item", "id"]});
		}
		return "";
	}
	
	
	/**
	 * Returns page title
	 */
	string getPageTitle(string action)
	{
		if (action == "name")
		{
			return "nginx file";
		}
		if (action == "names")
		{
			return "nginx files";
		}
		else if (action == "item")
		{
			FormModel widget = this.getWidget("form");
			return widget["item", "name"];
		}
		return parent::getPageTitle(action);
	}
	
}