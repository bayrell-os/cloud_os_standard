/*!
 *  Bayrell Cloud OS
 *
 *  (c) Copyright 2020-2023 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Bayrell.CloudOS.Components.Applications.Modificators;

use Runtime.Callback;
use Runtime.ModelProxy;
use Runtime.Web.BaseModel;
use Runtime.Web.BaseRoute;
use Runtime.Web.Layout;
use Runtime.Widget.Crud.CrudDataStorage;
use Runtime.Widget.Form.FormModel;
use Runtime.Widget.FieldInfo;
use Runtime.Widget.FieldList;
use Runtime.Widget.Select;
use Runtime.Widget.TextArea;
use Bayrell.CloudOS.Components.Modificators.ModificatorPageModel;


struct AppModificatorFormModel extends FormModel
{
	/**
	 * Fields
	 */
	pure static Dict fields() =>
	{
		"modificator_name": new FieldInfo{
			"label": "Modificator name",
			"name": "modificator_name",
			"component": classof Select,
		},
	};
	
	
	/**
	 * Init widget
	 */
	async static void initWidget(ModelProxy<BaseModel> model, ModelProxy<Layout> layout)
	{
		await parent::initWidget(model, layout);
		
		/* Get storage */
		ModelProxy<CrudDataStorage> data = model.proxy("data");
		ModelProxy<FieldList> fields = model.proxy("fields");
		
		/* Api name */
		data.commit("setApiName", "app.application.modificator");
		
		/* Set fields */
		fields.commit("setFields", static::fields());
		fields.commit("setPrimaryKeys", ["id"]);
		
		/* Set fields list */
		fields.commit("setFieldsList", [
			"modificator_name",
		]);
		
		/* Add modificator dictionary */
		fields.commit("addDictionaryField", {
			"from": "modificators",
			"to": "modificator_name",
			"option": new Callback(static::getClassName(), "getModificatorOption"),
		});
		
		/* Set get names */
		model.commit("setGetNames", new Callback(static::getClassName(), "getNames"));
		
		/* Add components */
		layout.commit("addComponent", classof TextArea);
	}
	
	
	/**
	 * Dictionary modificator
	 */
	static Dict getModificatorOption(ModelProxy model, Dict item) =>
	{
		"label": item["name"],
		"value": item["id"]
	};
	
	
	/**
	 * Get names
	 */
	static string getNames(string action, Dict obj = null)
	{
		if (action == "name")
		{
			return "modificator";
		}
		if (action == "names")
		{
			return "modificators";
		}
		else if (action == "item_name")
		{
			return obj["item", "modificator_name"] ~
				" <" ~ obj["item", "modificator_uid"]  ~ ">"
			;
		}
	}
	
}