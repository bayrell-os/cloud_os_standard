/*!
 *  Bayrell Cloud OS
 *
 *  (c) Copyright 2020-2023 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Bayrell.CloudOS.Components.Applications;

use Runtime.Callback;
use Runtime.ModelProxy;
use Runtime.Web.BaseModel;
use Runtime.Web.BaseRoute;
use Runtime.Web.Layout;
use Runtime.Widget.Crud.CrudDataStorage;
use Runtime.Widget.Form.FormModel;
use Runtime.Widget.FieldInfo;
use Runtime.Widget.FieldList;
use Runtime.Widget.Input;
use Runtime.Widget.Select;
use Bayrell.CloudOS.Components.Applications.AppPageModel;
use Bayrell.CloudOS.Components.Applications.Modificators.AppModificatorFormModel;
use Bayrell.CloudOS.Components.Applications.Modificators.AppModificatorTableModel;


struct AppFormModel extends FormModel
{
	/**
	 * Fields
	 */
	pure static Dict fields() =>
	{
		"status": new FieldInfo{
			"label": "Status",
			"name": "status",
			"options": [
				{"label": "STOP", "value": "0"},
				{"label": "RUN", "value": "1"},
			],
			"component": classof Select,
		},
		"stack_name": new FieldInfo{
			"label": "Stack name",
			"name": "stack_name",
			"options": [
			],
			"component": classof Select,
		},
		"name": new FieldInfo{
			"label": "Name",
			"name": "name",
			"component": classof Input,
		},
		"template_id": new FieldInfo{
			"label": "Template",
			"name": "template_id",
			"options": [
			],
			"component": classof Select,
		},
		"template_version_id": new FieldInfo{
			"label": "Version",
			"name": "template_version_id",
			"options": [
			],
			"component": classof Select,
		},
	};
	
	
	/**
	 * Init widget
	 */
	async static void initWidget(ModelProxy<BaseModel> model, ModelProxy<Layout> layout)
	{
		await parent::initWidget(model, layout);
		
		/* Get storage */
		ModelProxy<CrudDataStorage> data = model.proxy("data");
		ModelProxy<FieldList> fields = model.proxy("fields");
		
		/* Api name */
		data.commit("setApiName", "app.application");
		
		/* Set fields */
		fields.commit("setFields", static::fields());
		fields.commit("setPrimaryKeys", ["id"]);
		
		/* Set fields list */
		fields.commit("setFieldsList", [
			"status",
			"stack_name",
			"name",
			"template_id",
			"template_version_id",
		]);
		
		/* Add domain dictionary */
		fields.commit("addDictionaryField", {
			"from": "stacks",
			"to": "stack_name",
			"option": new Callback(static::getClassName(), "getStackOption"),
		});
		
		/* Add template dictionary */
		fields.commit("addDictionaryField", {
			"from": "templates",
			"to": "template_id",
			"option": new Callback(static::getClassName(), "getTemplateOption"),
		});
		
		/* Add template version dictionary */
		fields.commit("addDictionaryField", {
			"auto": true,
			"from": "templates_versions",
			"to": "template_version_id",
			"filter": new Callback(static::getClassName(), "getTemplateVersionFilter"),
			"option": new Callback(static::getClassName(), "getTemplateVersionOption"),
		});
		
		/* Add components */
		layout.commit("addComponent", classof Input);
		layout.commit("addComponent", classof Select);
	}
	
	
	/**
	 * Init sub widgets
	 */
	static void initSubWidgets(ModelProxy<BaseModel> model, ModelProxy<Layout> layout)
	{
		await parent::initSubWidgets(model, layout);
		
		/* Add modificators */
		await model.commitAsync("addForeignWidget", layout, {
			"widget_name": "modificators",
			"form_model_name": classof AppModificatorFormModel,
			"table_model_name": classof AppModificatorTableModel,
			"foreign_key": "app_id",
		});
	}
	
	
	/**
	 * Dictionary stack
	 */
	static Dict getStackOption(ModelProxy<FieldList> model, Dict item) =>
	{
		"label": item["stack_name"],
		"value": item["stack_name"]
	};
	
	
	/**
	 * Dictionary template
	 */
	static Dict getTemplateOption(ModelProxy<FieldList> model, Dict item) =>
	{
		"label": item["name"],
		"value": item["id"]
	};
	
	
	/**
	 * Dictionary template version
	 */
	static Dict getTemplateVersionOption(ModelProxy<FieldList> model, Dict item) =>
	{
		"label": item["version"],
		"value": item["id"]
	};
	
	
	/**
	 * Dictionary template version filter
	 */
	static bool getTemplateVersionFilter(ModelProxy<FieldList> model, Dict item)
	{
		ModelProxy<FieldList> model_data = model.parentProxy().proxy("data");
		int template_id = (int)model_data.data(["item", "template_id"]);
		return item["template_id"] == template_id;
	}
	
}