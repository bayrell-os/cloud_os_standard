/*!
 *  Bayrell Cloud OS
 *
 *  (c) Copyright 2020-2023 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Bayrell.CloudOS.Components.Applications;

use Runtime.re;
use Runtime.BaseStruct;
use Runtime.Exceptions.ApiException;
use Runtime.ORM.Connection;
use Runtime.ORM.Query;
use Runtime.ORM.QueryResult;
use Runtime.ORM.Relation;
use Runtime.Widget.Crud.Api.CrudApi;
use Runtime.Widget.Crud.Api.CrudRule;
use Runtime.Widget.Crud.Api.Dictionary;
use Runtime.Widget.Crud.Api.LowerCase;
use Runtime.Widget.Crud.Api.Purify;
use Runtime.Widget.Crud.Api.Required;
use Runtime.Widget.Crud.Api.Unique;
use Runtime.XML.XML;
use Bayrell.CloudOS.Lib.AppXml;
use Bayrell.CloudOS.Lib.DockerService;


class AppApi extends CrudApi
{
	/**
	 * Returns api name
	 */
	pure string getApiName() => "app.application";
	
	
	/**
	 * Returns table name
	 */
	pure string getTableName() => "applications";
	
	
	/**
	 * Returns api methods
	 */
	pure string getApiMethod(string api_name)
	{
		if (api_name == "crud.search") return "actionSearch";
		if (api_name == "crud.search_one") return "actionSearchOne";
		if (api_name == "crud.item") return "actionItem";
		if (api_name == "crud.save") return "actionSave";
		if (api_name == "crud.delete") return "actionDelete";
		if (api_name == "crud.dictionary") return "actionDictionary";
		if (api_name == "compose") return "actionCompose";
		if (api_name == "stop") return "actionStop";
		return "";
	}
	
	
	/**
	 * Returns search fields
	 */
	Collection getSearchFields() => [
		"id",
		"name",
		"stack_name",
		"status",
		"template_id",
		"template_version_id",
		"count_work",
		"count_total",
		"docker_tasks",
		"gmtime_created",
		"gmtime_updated",
	];
	
	
	/**
	 * Returns item fields
	 */
	Collection getItemFields() => [
		"id",
		"content",
		"custom_patch",
		"environments",
		"name",
		"stack_name",
		"status",
		"template_id",
		"template_version_id",
		"volumes",
		"yaml",
		"gmtime_created",
		"gmtime_updated",
	];
	
	
	/**
	 * Returns save fields
	 */
	Collection getSaveFields() => [
		"stack_name",
		"name",
		"template_version_id",
		"status",
		"environments",
		"custom_patch",
		"volumes",
	];
	
	
	/**
	 * Returns rules
	 */
	Collection<CrudRule> getRules() =>
	[
		new Dictionary{
			"dictionary_name": "stacks",
			"table_name": "stacks",
			"query": Query (AppApi api, Dictionary d, Query q) => q.orderBy("stack_name", "asc"),
		},
		new Dictionary{
			"dictionary_name": "templates_versions",
			"table_name": "templates_versions",
			"query": Query (AppApi api, Dictionary d, Query q) => q.orderBy("version", "asc"),
		},
		new Dictionary{
			"dictionary_name": "templates",
			"table_name": "templates",
			"query": Query (AppApi api, Dictionary d, Query q) => q.orderBy("name", "asc"),
		},
		new Dictionary{
			"dictionary_name": "modificators",
			"table_name": "modificators",
			"query": Query (AppApi api, Dictionary d, Query q) => q.orderBy("name", "asc"),
		},
		
		/* Stack name */
		new Purify{ "name": "stack_name" },
		new LowerCase{ "name": "stack_name" },
		new Required{ "name": "stack_name" },
		
		/* Name */
		new Purify{ "name": "name" },
		new LowerCase{ "name": "name" },
		new Required{ "name": "name" },
		
		/* Unique */
		new Unique{"keys": ["stack_name", "name"]},
	];
	
	
	/**
	 * Build search query
	 */
	async Query buildSearchQuery(Query q)
	{
		string status = this.post_data["status"];
		
		if (status == "run") q.where("applications.status", "=", 1);
		else if (status == "stop") q.where("applications.status", "=", 0);
		
		q = q
			.orderBy("applications.stack_name", "asc")
			.orderBy("applications.name", "asc")
			
			.innerJoinKey("applications__templates_versions")
			.innerJoinKey("templates_versions__templates")
			
			.addFields([
				"templates_versions.version as template_version",
				"templates.name as template_name",
				"templates.id as template_id",
				"templates.uid as template_uid",
				"docker_services.count_work as count_work",
				"docker_services.count_total as count_total",
				"docker_services.docker_tasks as docker_tasks",
			])
			
			.leftJoin(
				"docker_services",
				[
					"applications.stack_name=docker_services.stack_name",
					"applications.name=docker_services.service_name",
					"docker_services.enable=1",
					"docker_services.is_deleted=0",
				]
			)
		;
		
		return q;
	}
	
	
	/**
	 * Before update item event
	 */
	async void onSaveBefore(Relation item, Dict update_data)
	{
		await parent::onSaveBefore(item, update_data);
		
		/* Get item variables */
		Map item_variables = item.get("variables");
		if (item_variables == null) item_variables = {};
		item_variables = item_variables.toMap();
		
		/* Save variables */
		Collection variables = update_data["variables"];
		if (variables)
		{
			for (int i=0; i<variables.count(); i++)
			{
				Dict variable = variables.get(i);
				item_variables.setValue(
					variable.get("name"),
					variable.get("value")
				);
			}
		}
		
		/* Set app name */
		string app_name = item.get("name");
		item_variables.setValue("_var_app_name_", app_name);
		
		/* Set variables */
		item.set("variables", item_variables.toDict());
		
		/* Build xml and yaml content */
		AppXml xml = new AppXml();
		xml.item = item;
		xml.conn = this.getDatabaseConnection();
		await xml.buildContent();
		
		item.set("content", xml.xml_content);
		item.set("yaml", xml.yaml_content);
	}
	
	
	/**
	 * Search final
	 */
	async void onSearchFinal()
	{
		await parent::onSearchFinal();
		
		if (this.action == "actionItem")
		{
			await this.buildVariables();
		}
	}
	
	
	/**
	 * Save final
	 */
	async void onSaveFinal()
	{
		await parent::onSaveFinal();
		await this.buildVariables();
	}
	
	
	/**
	 * Build values
	 */
	async void buildVariables()
	{
		string xml_content = this.item.get("content");
		XML template = XML::loadXml(xml_content);
		if (not template.exists()) return;
		
		/* Get variables */
		AppXml xml = new AppXml();
		xml.item = this.item;
		xml.template = template;
		xml.xml_content = xml_content;
		xml.conn = this.getDatabaseConnection();
		
		/* Load template */
		await xml.loadTemplateContent();
		await xml.loadModificators();
		
		/* Get ariables */
		xml.buildVariables();
		Collection patches = xml.getPatches();
		
		/* Set variables to response */
		Dict data = this.container.response.data;
		data <= item <= variables <= xml.variables.toCollection();
		data <= patches <= patches;
		this.container.setApiData(data);
	}
	
	
	/**
	 * Compose app
	 */
	async void actionCompose()
	{
		Dict pk = this.post_data["pk"];
		
		/* Init api */
		await this.initApi("actionCompose");
		if (this.container.response.error_name != "") return;
		
		/* Save before */
		await static::actionSaveBefore({
			"create": false,
		});
		if (this.container.response.error_name != "") return;
		
		/* Update item */
		await this.updateItem(this.item, this.update_data);
		if (this.container.response.error_name != "") return;
		
		/* Compose app */
		string message = DockerService::composeApp(this.item);
		
		/* Save after */
		await static::actionSaveAfter();
		if (this.container.response.error_name != "") return;
		
		/* Set message */
		this.container.setErrorMessage(message);
	}
	
	
	/**
	 * Stop app
	 */
	async void actionStop()
	{
		/* Init api */
		await this.initApi("actionCompose");
		if (this.container.response.error_name != "") return;
		
		/* Find item */
		Dict pk = this.post_data["pk"];
		this.item = await this.findItem(pk);
		
		/* Item not found */
		if (this.item == null)
		{
			this.container.fail( new ApiException("Item not found") );
			return;
		}
		
		/* Stop app */
		string message = DockerService::stopApp(this.item);
		Dict item_pk = this.item.getPrimaryKey();
		
		/* Set api result */
		this.container.success({
			"message": message,
			"data":
			{
				"pk": item_pk,
			}
		});
	}
	
}