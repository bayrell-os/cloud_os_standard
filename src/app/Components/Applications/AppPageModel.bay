/*!
 *  Bayrell Cloud OS
 *
 *  (c) Copyright 2020-2023 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Bayrell.CloudOS.Components.Applications;

use Runtime.lib;
use Runtime.ModelProxy;
use Runtime.Web.Crud.CrudPageModel;
use Runtime.Web.Crud.CrudRoute;
use Runtime.Web.Crud.FieldInfo;
use Runtime.Web.Crud.TabModel;
use Bayrell.CloudOS.Components.Applications.AppModificatorsModel;
use Bayrell.CloudOS.Models.Application;


struct AppPageModel extends CrudPageModel
{
	Dict fields = {
		"status": new FieldInfo{
			"label": "Status",
			"field_name": "status",
			"options": [
				{"label": "STOP", "value": "0"},
				{"label": "RUN", "value": "1"},
			],
		},
		"stack_name": new FieldInfo{
			"label": "Stack name",
			"field_name": "stack_name",
			"options": [
			],
		},
		"template_version_id": new FieldInfo{
			"label": "Version",
			"field_name": "template_version_id",
			"options": [
			],
		},
		"template_id": new FieldInfo{
			"label": "Template",
			"field_name": "template_id",
			"options": [
			],
		},
		"name": new FieldInfo{
			"label": "Name",
			"field_name": "name",
		},
	};
	
	AppModificatorsModel modificators = new AppModificatorsModel;
	TabModel tabs = new TabModel{
		"active": "run",
	};
	
	
	/**
	 * Returns api name
	 */
	pure string getApiName() => "app.application";
	
	
	/**
	 * Returns model name
	 */
	pure string getModelName() => classof Application;
	
	
	/**
	 * Validate model
	 */
	public bool validateForm()
	{
		return true;
	}
	
	
	/**
	 * Returns page title
	 */
	string getPageTitle(string action)
	{
		if (action == "index")
		{
			return "Application";
		}
		else if (action == "add")
		{
			return "Add application";
		}
		else if (action == "edit")
		{
			return "Edit application '" ~
				this.item_form.item["stack_name"] ~ "_" ~ this.item_form.item["name"] ~ "'";
		}
		else if (action == "delete")
		{
			return "Delete application ?";
		}
		else if (action == "delete_content")
		{
			return "Delete application '" ~
				this.item_form.item["stack_name"] ~ "_" ~ this.item_form.item["name"] ~ "' ?";
		}
		return "";
	}
	
	
	/**
	 * Search after
	 */
	async static void event(ModelProxy model, string action, Dict obj)
	{
		obj = await parent::event(model, action, obj);
		
		Dict api_res = obj["api_res"];
		Dict crud_route = obj["crud_route"];
		Dict post_data = obj["post_data"];
		
		
		/* RouteIndexBefore */
		if (action == "crudRouteIndexBefore")
		{
			string status = crud_route.container.request.query.get("status", "run");
			model.commit("setSearchData", {
				"status": status,
			});
			model.proxy("tabs").commit("setActive", status);
		}
		
		else if (action == "crudRouteEditAfter")
		{
			ModelProxy modificators = model.proxy("modificators");
			
			/* Setup application_id */
			Application item = model.data(["item_form", "item"]);
			modificators.commit("setApplicationId", item.id);
			
			/* call crud search */
			await modificators.commitAsync("callCrudSearch");
		}
		
		
		/* ItemAfter */
		else if (action == "crudItemAfter")
		{
			Collection values;
			
			/* Setup stack name */
			values = api_res["data", "dictionary", "stack_name"]
				|> .map(
					Dict (DockerStack item) => {
						"label": item.stack_name,
						"value": item.stack_name,
					}
				)
				|> .sort(
					int (Dict a, Dict b) => a["label"] > b["label"]
				)
			;
			model.commit("setFieldOptions", "stack_name", values);
			
			
			/* Setup templates */
			values = api_res["data", "dictionary", "templates"]
				|> .map(
					Dict (Template item) => {
						"label": item.name,
						"value": item.id,
					}
				)
				|> .sort(
					int (Dict a, Dict b) => a["label"] > b["label"]
				)
			;
			model.commit("setFieldOptions", "template_id", values);
			
			
			/* Setup template versions */
			model.commit("updateTemplateVersion");
			
			
			/* Setup modificators */
			values = api_res["data", "dictionary", "modificators"]
				|> .map(
					Dict (Template item) => {
						"label": item.name,
						"value": item.id,
					}
				)
				|> .sort(
					int (Dict a, Dict b) => a["label"] > b["label"]
				)
			;
			model.proxy("modificators").commit("setFieldOptions", "modificator_id", values);
		}
		
		return obj;
	}
	
	
	/**
	 * Update template version
	 */
	static void updateTemplateVersion(ModelProxy model)
	{
		Collection values;
		Dict dictionary = model.data("dictionary");
		Application item = model.data(["item_form", "item"]);
		
		
		/* Setup templates versions */
		values = dictionary["templates_versions"]
			|> .filter( lib::equalAttr("template_id", item.template_id) )
			|> .map(
				Dict (TemplateVersion item) => {
					"label": item.version,
					"value": item.id,
				}
			)
			|> .sort(
				int (Dict a, Dict b) => a["label"] > b["label"]
			)
		;
		model.commit("setFieldOptions", "template_version_id", values);
	}
	
}