/*!
 *  Bayrell Cloud OS
 *
 *  (c) Copyright 2020-2023 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Bayrell.CloudOS.Components.Domains;

use Runtime.ModelProxy;
use Runtime.Web.RouteInfo;
use Runtime.Web.Crud.CrudPageModel;
use Runtime.Web.Crud.CrudRoute;
use Bayrell.CloudOS.Models.Domain;
use Bayrell.CloudOS.Components.Domains.DomainDeletePage;
use Bayrell.CloudOS.Components.Domains.DomainPageModel;
use Bayrell.CloudOS.Components.Domains.DomainSavePage;
use Bayrell.CloudOS.Components.Domains.DomainTablePage;


class DomainPageRoute extends CrudRoute
{
	
	/**
	 * Returns routes
	 */
	pure Collection<RouteInfo> getRoutes() =>
	[
		new RouteInfo
		{
			"uri": "/domains/",
			"name": "app:domains:index",
			"method": "actionIndex",
		},
		new RouteInfo
		{
			"uri": "/domains/add/",
			"name": "app:domains:add",
			"method": "actionAdd",
		},
		new RouteInfo
		{
			"uri": "/domains/{id}/",
			"name": "app:domains:edit",
			"method": "actionEdit",
		},
		new RouteInfo
		{
			"uri": "/domains/{id}/delete/",
			"name": "app:domains:delete",
			"method": "actionDelete",
		},
		new RouteInfo
		{
			"uri": "/domains/{id}/routes/",
			"name": "app:domains:routes",
			"method": "actionRoutes",
		},
	];
	
	
	/**
	 * Returns id field name
	 */
	pure string getFieldNameId() => "id";
	
	
	/**
	 * Returns layout name
	 */
	string getLayoutName() => "default";
	
	
	/**
	 * Returns page model
	 */
	string getPageModelName() => classof DomainPageModel;
	
	
	/**
	 * Returns index page name
	 */
	string getIndexPageName() => classof DomainTablePage;
	
	
	/**
	 * Returns save page name
	 */
	string getSavePageName() => classof DomainSavePage;
	
	
	/**
	 * Returns delete page name
	 */
	string getDeletePageName() => classof DomainDeletePage;
	
	
	/**
	 * Crud route after
	 */
	async void crudRouteAfter()
	{
		await parent::crudRouteAfter();
		
		string route_name = this.container.route.name;
		if (
			route_name == "app:domains:add" or
			route_name == "app:domains:edit" 
		)
		{
			this.modelProxy("tabs").commit("setActive", "info");
		}
		else if (route_name == "app:domains:routes")
		{
			this.modelProxy("tabs").commit("setActive", "routes");
		}
	}
	
	
	/**
	 * Crud route after
	 */
	async void actionRoutes()
	{
		await parent::actionEdit();
		
		/* Set page title */
		DomainPageModel model = this.model();
		this.page_model_proxy.commit("setAction", "routes");
		this.setPageTitle( model.getPageTitle( model.action ) );
		
		/* Get routes */
		Domain item = model.item_form.item;
		if (item != null)
		{
			ModelProxy routes = this.modelProxy("routes");
			
			routes.commit("setAction", CrudPageModel::ACTION_INDEX);
			routes.commit("setPage", this.container.request.query.get("page", 1));
			routes.commit("setDomainId", item.id);
			await routes.commitAsync("callCrudSearch");
		}
	}
	
}