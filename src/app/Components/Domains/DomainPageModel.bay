/*!
 *  Bayrell Cloud OS
 *
 *  (c) Copyright 2020-2023 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Bayrell.CloudOS.Components.Domains;

use Runtime.ModelProxy;
use Runtime.Web.BaseModel;
use Runtime.Web.BaseRoute;
use Runtime.Web.Layout;
use Runtime.Widget.Crud.CrudPageModel;
use Runtime.Widget.Form.FormCrudModel;
use Runtime.Widget.Table.TableCrudModel;
use Runtime.Widget.FieldInfo;
use Runtime.Widget.FieldItem;
use Runtime.Widget.Input;
use Runtime.Widget.Label;
use Runtime.Widget.TextArea;


struct DomainPageModel extends CrudPageModel
{
	/**
	 * Fields
	 */
	pure static Dict fields() =>
	{
		"domain_name": new FieldInfo{
			"label": "Domain name",
			"name": "domain_name",
		},
	};
	
	
	/**
	 * Setup widget
	 */
	async static void setup
	(
		ModelProxy<BaseModel> page_model,
		ModelProxy<BaseModel> widget,
		BaseRoute route
	)
	{
		if (widget.data() == null) return;
		
		/* Table */
		if (widget.data() instanceof TableCrudModel)
		{
			/* Api name */
			widget.commit("setApiName", "app.domain");
			
			/* Stack name */
			widget.commit("setFields", static::fields());
			
			/* Set table fields list */
			widget.commit("setFieldsList", [
				new FieldItem{"name": "row_number"},
				new FieldItem{"name": "domain_name", "component": classof Label},
				new FieldItem{"name": "row_buttons"},
			]);
			
			/* Setup page */
			widget.commit("setPage", route.container.request.query.get("page", 1));
		}
		
		/* Form */
		if (widget.data() instanceof FormCrudModel)
		{
			/* Api name */
			widget.commit("setApiName", "app.domain");
			
			/* Stack name */
			widget.commit("setFields", static::fields());
			
			/* Set form fields list */
			widget.commit("setFieldsList", [
				new FieldItem{"name": "domain_name", "component": classof Input},
			]);
			
			/* Setup primary key */
			if (route.container.route.name != "app:domains:add")
			{
				widget.commit("setPrimaryKey", {
					"id": route.container.route.matches.get("id"),
				});
			}
			
			/* Setup back page */
			route.page_model.commit("setBackPage", static::url("app:domains:index"));
		}
		
		/* Add components */
		if (widget.data() instanceof CrudPageModel)
		{
			route.layout.commit("addComponent", classof Input);
			route.layout.commit("addComponent", classof Label);
		}
	}
	
	
	/**
	 * Returns href
	 */
	string getHref(string name, Dict params = null)
	{
		if (name == "add")
		{
			return static::url("app:domains:add");
		}
		else if (name == "edit")
		{
			return static::url("app:domains:edit", {"id": params["item", "id"]});
		}
		else if (name == "delete")
		{
			return static::url("app:domains:delete", {"id": params["item", "id"]});
		}
		return "";
	}
	
	
	/**
	 * Returns page title
	 */
	string getPageTitle(string action)
	{
		if (action == "name")
		{
			return "domain";
		}
		if (action == "names")
		{
			return "domains";
		}
		else if (action == "item")
		{
			FormCrudModel widget = this.getWidget("form");
			return widget["item", "domain_name"];
		}
		return parent::getPageTitle(action);
	}
	
}