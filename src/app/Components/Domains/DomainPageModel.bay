/*!
 *  Bayrell Cloud OS
 *
 *  (c) Copyright 2020-2023 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Bayrell.CloudOS.Components.Domains;

use Runtime.Callback;
use Runtime.ModelProxy;
use Runtime.Web.BaseModel;
use Runtime.Web.BaseRoute;
use Runtime.Web.Layout;
use Runtime.Web.RouteInfo;
use Runtime.Widget.Crud.CrudDialogModel;
use Runtime.Widget.Crud.CrudPageModel;
use Runtime.Widget.Form.FormModel;
use Runtime.Widget.Table.TableDialogModel;
use Runtime.Widget.Table.TableModel;
use Runtime.Widget.FieldInfo;
use Runtime.Widget.FieldList;
use Runtime.Widget.Input;
use Runtime.Widget.Label;
use Bayrell.CloudOS.Components.Domains.DomainFormModel;
use Bayrell.CloudOS.Components.Domains.DomainTableModel;
use Bayrell.CloudOS.Components.Routes.RoutePageModel;


struct DomainPageModel extends CrudPageModel
{
	/**
	 * Fields
	 */
	pure static Dict fields(string type) =>
	{
		"row_number": new FieldInfo{
			"name": "row_number",
		},
		"domain_name": new FieldInfo{
			"label": "Domain name",
			"name": "domain_name",
			"component": type == "form" ? classof Input : classof Label,
		}
		"space_name": new FieldInfo{
			"label": "Space name",
			"name": "space_name",
			"component": classof Label,
		},
		"row_buttons": new FieldInfo{
			"name": "row_buttons",
		},
	};
	
	
	/**
	 * Primary keys
	 */
	pure static Collection getPrimaryKeys() => ["id"];
	
	
	/**
	 * Api name
	 */
	pure static Dict getApiName(string type) => "app.domain";
	
	
	/**
	 * Init widget
	 */
	async static void initWidget(ModelProxy<BaseModel> model, ModelProxy<Layout> layout)
	{
		await parent::initWidget(model, layout);
	}
	
	
	/**
	 * Init table
	 */
	async static void initTableWidget(
		ModelProxy<CrudPageModel> model,
		ModelProxy<TableModel> table,
		ModelProxy<Layout> layout
	)
	{
		await parent::initTableWidget(model, table, layout);
		
		/* Set fields list */
		ModelProxy<FieldList> fields = table.proxy("fields");
		fields.commit("setFieldsList", [
			"row_number",
			"domain_name",
			"space_name",
			"row_buttons",
		]);
		
		/* Add components */
		layout.commit("addComponent", classof Label);
	}
	
	
	/**
	 * Init form
	 */
	async static void initFormWidget(
		ModelProxy<CrudPageModel> model,
		ModelProxy<FormModel> form,
		ModelProxy<Layout> layout
	)
	{
		await parent::initFormWidget(model, form, layout);
		
		/* Set fields list */
		ModelProxy<FieldList> fields = form.proxy("fields");
		fields.commit("setFieldsList", [
			"domain_name",
		]);
		
		/* Add components */
		layout.commit("addComponent", classof Input);
		
		/* Add routes */
		if (not form.proxy("data").call("isNew"))
		{
			ModelProxy crud_widget = await form.commitAsync("addCrudWidget", layout, {
				"widget_name": "routes",
				"crud_model_name": classof RoutePageModel,
				"crud_model_params": { "action": "dialog" },
				"table_model_name": classof TableDialogModel,
				"foreign_key": "domain_id",
			});
			
			/* Setup table routes */
			ModelProxy<FormModel> routes_table = form.proxy(["widgets", "routes", "widgets", "table"]);
			if (routes_table.data() != null)
			{
				/* Set width */
				routes_table.commit("setDialogWidth", "save", "800px");
			}
		}
	}
	
	
	/**
	 * Returns route href
	 */
	string getRouteHref(string name, Dict obj = null)
	{
		if (name == "index")
		{
			return static::url("app:domains:index");
		}
		if (name == "add")
		{
			return static::url("app:domains:add");
		}
		if (name == "edit")
		{
			return static::url("app:domains:edit", {"id": obj["item", "id"]});
		}
		if (name == "delete")
		{
			return static::url("app:domains:delete", {"id": obj["item", "id"]});
		}
		return "";
	}
	
	
	/**
	 * Get names
	 */
	string getPageTitle(string action)
	{
		if (action == "name")
		{
			return "domain";
		}
		if (action == "names")
		{
			return "domains";
		}
		else if (action == "item_name")
		{
			Dict item = this.getWidget("form").data.item;
			return item["domain_name"];
		}
		return parent::getPageTitle(action);
	}
}