/*!
 *  Bayrell Cloud OS
 *
 *  (c) Copyright 2020-2023 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Bayrell.CloudOS.Components.Domains;

use Runtime.Callback;
use Runtime.ModelProxy;
use Runtime.Web.BaseModel;
use Runtime.Web.BaseRoute;
use Runtime.Web.Layout;
use Runtime.Web.RouteInfo;
use Runtime.Widget.FieldInfo;
use Runtime.Widget.Crud.CrudPageModel;
use Runtime.Widget.Form.FormModel;
use Runtime.Widget.Table.TableDialogModel;
use Runtime.Widget.Table.TableModel;
use Bayrell.CloudOS.Components.Domains.DomainsFormModel;
use Bayrell.CloudOS.Components.Domains.DomainsTableModel;
use Bayrell.CloudOS.Components.Routes.RoutePageModel;
use Bayrell.CloudOS.Components.Routes.RoutesFormModel;
use Bayrell.CloudOS.Components.Routes.RoutesTableModel;


struct DomainPageModel extends CrudPageModel
{
	/**
	 * Factory
	 */
	static FormModel createFormModel() => new DomainsFormModel{"widget_name": "form"};
	static TableModel createTableModel() => new DomainsTableModel{"widget_name": "table"};
	
	
	/**
	 * Init widget
	 */
	async static void initWidget(ModelProxy<BaseModel> widget, ModelProxy<Layout> layout)
	{
		await parent::initWidget(widget, layout);
		
		ModelProxy<FormModel> form = widget.proxy(["widgets", "form"]);
		
		/* Add widget routes */
		if (form.data() != null and widget.data("action") == "save" and not form.call("isNew"))
		{
			TableDialogModel routes = await widget.call("addWidget",
				new TableDialogModel{ "widget_name": "routes" }
			);
			await widget.commitAsync("initWidgetRoutes", routes, layout);
		}
	}
	
	
	/**
	 * Init widget routes
	 */
	async static void initWidgetRoutes(
		ModelProxy<BaseModel> widget, ModelProxy<BaseModel> routes, ModelProxy<Layout> layout
	)
	{
		ModelProxy<FormModel> form = widget.proxy(["widgets", "form"]);
		
		/* Init table */
		await RoutesTableModel::initWidget(routes, layout);
		
		/* Init form */
		ModelProxy<BaseModel> routes_form = routes.proxy(["widgets", "form"]);
		await RoutesFormModel::initWidget(routes_form, layout);
		
		/* Set foreign key */
		int domain_id = (int)form.data(["item_pk", "id"]);
		routes.commit("setForeignKey", "domain_id", domain_id);
		routes_form.commit("setForeignKey", "domain_id", domain_id);
		
		/* Remove domain_id */
		routes_form.commit("removeFieldFromList", "domain_id");
		
		/* Set width */
		routes.commit("setDialogWidth", "save", "800px");
	}
	
	
	/**
	 * Returns route names
	 */
	static string getRouteName(string name)
	{
		if (name == "index") return "app:domains:index";
		if (name == "add") return "app:domains:add";
		if (name == "edit") return "app:domains:edit";
		if (name == "delete") return "app:domains:delete";
		return "";
	}
	
	
	/**
	 * Get names
	 */
	static string getNames(string action, Dict obj = null)
	{
		if (action == "name")
		{
			return "domain";
		}
		if (action == "names")
		{
			return "domains";
		}
		else if (action == "item_name")
		{
			return obj["item", "domain_name"];
		}
		else if (action == "delete_content")
		{
			return "Delete '" ~ obj["item", "domain_name"] ~ "' ?";
		}
	}
	
}