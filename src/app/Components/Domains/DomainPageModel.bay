/*!
 *  Bayrell Cloud OS
 *
 *  (c) Copyright 2020-2023 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Bayrell.CloudOS.Components.Domains;

use Runtime.Callback;
use Runtime.ModelProxy;
use Runtime.Web.BaseModel;
use Runtime.Web.BaseRoute;
use Runtime.Web.Layout;
use Runtime.Web.RouteInfo;
use Runtime.Widget.FieldInfo;
use Runtime.Widget.Crud.CrudDialogModel;
use Runtime.Widget.Crud.CrudPageModel;
use Runtime.Widget.Form.FormModel;
use Runtime.Widget.Table.TableDialogModel;
use Runtime.Widget.Table.TableModel;
use Bayrell.CloudOS.Components.Domains.DomainFormModel;
use Bayrell.CloudOS.Components.Domains.DomainTableModel;
use Bayrell.CloudOS.Components.Routes.RouteFormModel;
use Bayrell.CloudOS.Components.Routes.RoutePageModel;
use Bayrell.CloudOS.Components.Routes.RouteTableModel;


struct DomainPageModel extends CrudPageModel
{
	/**
	 * Factory
	 */
	static FormModel createFormModel() => new DomainFormModel{};
	static TableModel createTableModel() => new DomainTableModel{};
	
	
	/**
	 * Init widget
	 */
	async static void initWidget(ModelProxy<BaseModel> widget, ModelProxy<Layout> layout)
	{
		await parent::initWidget(widget, layout);
		
		/* Add routes */
		await widget.commitAsync("addForeignModel", layout, {
			"widget_name": "routes",
			"form_model": method RoutePageModel::createFormModel,
			"table_model_name": classof TableDialogModel,
			"table_model_init": method RouteTableModel::initWidget,
			"foreign_key": "domain_id",
		});
		
		/* Setup table routes */
		ModelProxy<FormModel> table = widget.proxy(["widgets", "routes", "widgets", "table"]);
		if (table.data() != null)
		{
			/* Set width */
			table.commit("setDialogWidth", "save", "800px");
		}
	}
	
	
	/**
	 * Returns route names
	 */
	static string getRouteName(string name)
	{
		if (name == "index") return "app:domains:index";
		if (name == "add") return "app:domains:add";
		if (name == "edit") return "app:domains:edit";
		if (name == "delete") return "app:domains:delete";
		return "";
	}
	
	
	/**
	 * Get names
	 */
	static string getNames(string action, Dict obj = null)
	{
		if (action == "name")
		{
			return "domain";
		}
		if (action == "names")
		{
			return "domains";
		}
		else if (action == "item_name")
		{
			return obj["item", "domain_name"];
		}
		else if (action == "delete_content")
		{
			return "Delete '" ~ obj["item", "domain_name"] ~ "' ?";
		}
	}
	
}