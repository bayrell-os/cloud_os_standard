/*!
 *  Bayrell Cloud OS
 *
 *  (c) Copyright 2020-2023 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Bayrell.CloudOS.Components.Workspace;

use Runtime.lib;
use Runtime.ModelProxy;
use Runtime.Web.ApiResult;
use Runtime.Web.Bus;
use Runtime.Web.Crud.CrudPageModel;
use Runtime.Web.Crud.DialogModel;
use Runtime.Web.Crud.FieldInfo;
use Runtime.Web.Crud.FormModel;
use Bayrell.CloudOS.Components.Workspace.RolesPageModel;
use Bayrell.CloudOS.Models.Domain;
use Bayrell.CloudOS.Models.Route;
use Bayrell.CloudOS.Models.User;
use Bayrell.CloudOS.Models.WorkspaceRole;


struct RolesPageModel extends CrudPageModel
{
	int space_id = 0;
	DialogModel save_dialog = new DialogModel{
		"auto_hide": false,
		"is_modal": true,
		"width": "500px",
		"style": DialogModel::STYLE_CONTENT,
	};
	DialogModel delete_dialog = new DialogModel{
		"auto_hide": false,
		"is_modal": true,
		"width": "500px",
		"style": DialogModel::STYLE_CONTENT,	
	};
	
	Dict fields = {
		"name": new FieldInfo{
			"label": "Role name",
			"field_name": "name",
		},
	};
	
	string add_user_name = "";
	Collection<User> users = [];
	
	
	/**
	 * Returns api name
	 */
	pure string getApiName() => "app.workspace.roles";
	
	
	/**
	 * Returns page type
	 */
	pure string getPageType() => "workspace";
	
	
	/**
	 * Returns model name
	 */
	pure string getModelName() => classof WorkspaceRole;
	
	
	/**
	 * Set workspace id
	 */
	RolesPageModel setSpaceId(int value) => this.copy{
		"space_id": value
	};
	
	
	/**
	 * Setup users
	 */
	RolesPageModel setUsers(Collection users) => this.copy{
		"users": users
	};
	
	
	/**
	 * Event
	 */
	async static Dict event(ModelProxy model, string event, Dict data)
	{
		data = await parent::event(model, event, data);
		
		int space_id = model.data().space_id;
		
		if (
			event == "crudDeleteBefore" or
			event == "crudItemBefore" or
			event == "crudSaveBefore" or
			event == "crudSearchBefore"
		)
		{
			if (space_id > 0)
			{
				data <= post_data <= space_id <= space_id;
			}
		}
		
		/* Add new item */
		if (event == "crudItemAfter")
		{
			ModelProxy<FormModel> item_form = model.proxy("item_form");
			Dict pk = item_form.call("getPrimaryKey");
			if (pk != null)
			{
				await model.commitAsync("callUserSearch");
			}
		}
		
		return data;
	}
	
	
	/**
	 * Clear item
	 */
	RolesPageModel clearItem()
	{
		RolesPageModel item = parent::clearItem();
		item <= add_user_name <= "";
		item <= users <= [];
		return item;
	}
	
	
	/**
	 * Get users by role
	 */
	Collection getUsersByRole(int role_id)
	{
		Collection users = this.dictionary["users"];
		return users.filter(
			bool (Dict user) use (role_id) => user["role_id"] == role_id
		)
	}
	
	
	/**
	 * Search users
	 */
	async static void callUserSearch(ModelProxy<RolesPageModel> model)
	{
		ModelProxy<FormModel> item_form = model.proxy("item_form");
		
		ApiResult res = await Bus::callApi("app.workspace.roles.users::crud.search", {
			"role_id": item_form.data(["item", "id"]),
		});
		
		if (res.isSuccess())
		{
			Collection items = res.data["items"];
			model.commit("setUsers", items);
		}
	}
	
	
	/**
	 * Add user
	 */
	async static void callUserAdd(ModelProxy<RolesPageModel> model)
	{
		string user_login = model.data("add_user_name");
		int role_id = model.data(["item_form", "item", "id"]);
		
		model.proxy("save_dialog").commit("setWaitMessage");
		
		ApiResult res = await Bus::callApi(
			"app.workspace.roles.users::crud.add",
			{
				"role_id": role_id,
				"user_login": user_login,
			}
		);
		
		model.proxy("save_dialog").commit("setApiResult", "callUserAdd", res);
	}
	
	
	/**
	 * Add delete
	 */
	async static void callUserDelete(ModelProxy<RolesPageModel> model, int user_id)
	{
		int role_id = model.data(["item_form", "item", "id"]);
		
		/* Remove users from list */
		Collection<User> users = model.data("users");
		users = users.filter(
			bool (User item) use (user_id) => item.id != user_id
		)
		model.commit("setUsers", users);
		
		/* Send api */
		ApiResult res = await Bus::callApi(
			"app.workspace.roles.users::crud.delete",
			{
				"role_id": role_id,
				"user_id": user_id,
			}
		);
	}
	
}