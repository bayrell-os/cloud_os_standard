/*!
 *  Bayrell Cloud OS
 *
 *  (c) Copyright 2020-2023 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Bayrell.CloudOS.Components.Workspace;

use Runtime.lib;
use Runtime.ModelProxy;
use Runtime.Web.ApiResult;
use Runtime.Web.Bus;
use Runtime.Web.Crud.CrudPageModel;
use Runtime.Web.Crud.DialogModel;
use Runtime.Web.Crud.FieldInfo;
use Runtime.Web.Crud.FormModel;
use Bayrell.CloudOS.Components.Users.UsersPageModel as BaseUsersPageModel;
use Bayrell.CloudOS.Models.Domain;
use Bayrell.CloudOS.Models.Route;


struct UsersPageModel extends BaseUsersPageModel
{
	int space_id = 0;
	DialogModel save_dialog = new DialogModel{
		"auto_hide": false,
		"is_modal": true,
		"width": "500px",
		"style": DialogModel::STYLE_CONTENT,
	};
	DialogModel delete_dialog = new DialogModel{
		"auto_hide": false,
		"is_modal": true,
		"width": "500px",
		"style": DialogModel::STYLE_CONTENT,	
	};
	
	string user_login = "";
	
	
	/**
	 * Returns page type
	 */
	pure string getPageType() => "workspace";
	
	
	/**
	 * Set workspace id
	 */
	UsersPageModel setSpaceId(int value) => this.copy{
		"space_id": value
	};
	
	
	/**
	 * Clear item
	 */
	UsersPageModel clearItem()
	{
		UsersPageModel item = parent::clearItem();
		item <= user_login <= "";
		return item;
	}
	
	
	/**
	 * Event
	 */
	async static Dict event(ModelProxy model, string event, Dict data)
	{
		data = await parent::event(model, event, data);
		
		int space_id = model.data().space_id;
		
		if (
			event == "crudSearchBefore" or
			event == "crudItemBefore"
		)
		{
			int space_id = model.data("space_id");
			if (space_id > 0)
			{
				data <= post_data <= space_id <= space_id;
			}
		}
		
		return data;
	}
	
	
	/**
	 * Call api save
	 */
	async static ApiResult callApiSave(ModelProxy model, Dict post_data)
	{
		int space_id = model.data().space_id;
		int user_login = model.data().user_login;
		
		Dict new_post_data = {
			"space_id": space_id,
			"user_login": user_login,
		};
		
		return await Bus::callApi("app.workspace::user.add", new_post_data);
	}
	
	
	/**
	 * Call api delete
	 */
	async static ApiResult callApiDelete(ModelProxy model, Dict post_data)
	{
		int space_id = model.data().space_id;
		int user_id = model.data(["item_form", "item", "id"]);
		
		Dict new_post_data = {
			"space_id": space_id,
			"user_id": user_id,
		};
		
		return await Bus::callApi("app.workspace::user.delete", new_post_data);
	}
	
}