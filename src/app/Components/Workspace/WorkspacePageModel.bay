/*!
 *  Bayrell Cloud OS
 *
 *  (c) Copyright 2020-2023 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Bayrell.CloudOS.Components.Workspace;

use Runtime.Callback;
use Runtime.ModelProxy;
use Runtime.Web.BaseModel;
use Runtime.Web.BaseRoute;
use Runtime.Web.Layout;
use Runtime.Web.RouteInfo;
use Runtime.Web.Events.MouseClickEvent;
use Runtime.Widget.Button;
use Runtime.Widget.FieldInfo;
use Runtime.Widget.Select;
use Runtime.Widget.Crud.CrudPageModel;
use Runtime.Widget.Form.FormModel;
use Runtime.Widget.Table.TableDialogModel;
use Runtime.Widget.Table.TableModel;
use Bayrell.CloudOS.Components.Domains.DomainFormModel;
use Bayrell.CloudOS.Components.Domains.DomainPageModel;
use Bayrell.CloudOS.Components.Domains.DomainTableModel;
use Bayrell.CloudOS.Components.Workspace.WorkspaceFormModel;
use Bayrell.CloudOS.Components.Workspace.WorkspaceTableModel;


struct WorkspacePageModel extends CrudPageModel
{
	/**
	 * Factory
	 */
	static FormModel createFormModel() => new WorkspaceFormModel{"widget_name": "form"};
	static TableModel createTableModel() => new WorkspaceTableModel{"widget_name": "table"};
	
	
	/**
	 * Init widget
	 */
	async static void initWidget(ModelProxy<BaseModel> widget, ModelProxy<Layout> layout)
	{
		await parent::initWidget(widget, layout);
		
		ModelProxy<FormModel> form = widget.proxy(["widgets", "form"]);
		
		/* Add widget domains */
		if (
			form.data() != null and
			widget.data("action") == "save" and
			not form.proxy("data").call("isNew")
		)
		{
			TableDialogModel domains = await widget.call("addWidget",
				new TableDialogModel{ "widget_name": "domains" }
			);
			await widget.commitAsync("initWidgetDomains", domains, layout);
		}
	}
	
	
	/**
	 * Init widget domains
	 */
	async static void initWidgetDomains(
		ModelProxy<BaseModel> widget, ModelProxy<BaseModel> domains, ModelProxy<Layout> layout
	)
	{
		ModelProxy<FormModel> form = widget.proxy(["widgets", "form"]);
		
		/* Init table */
		await DomainTableModel::initWidget(domains, layout);
		
		/* Init form */
		ModelProxy<BaseModel> domains_form = domains.proxy(["widgets", "form"]);
		
		/* Set table fields list */
		domains.proxy("fields").commit("editField", new FieldInfo{
			"name": "row_buttons",
			"render_method": new Callback{
				"obj": static::getClassName(), "name": "renderRowButtons"
			},
		});
		
		/* Set fields list */
		domains_form.proxy("fields").commit("setFields", {
			"domain_id": new FieldInfo{
				"label": "Domain",
				"field_name": "domain_id",
				"component": classof Select,
			},
		});
		domains_form.proxy("fields").commit("setFieldsList", [
			"domain_id",
		]);
		
		/* Set api name */
		domains.proxy("data").commit("setApiName", "app.workspace.domain");
		domains_form.proxy("data").commit("setApiName", "app.workspace.domain");
		
		/* Set get route name */
		domains_form.commit("setGetNames", new Callback(classof DomainPageModel, "getNames"));
		
		/* Set foreign key */
		int space_id = (int)form.data(["data", "item_pk", "id"]);
		domains.proxy("data").commit("setForeignKey", "space_id", space_id);
		domains_form.proxy("data").commit("setForeignKey", "space_id", space_id);
		
		/* Add components */
		layout.commit("addComponent", classof Select);
	}
	
	
	/**
	 * Render row buttons
	 */
	static html renderRowButtons(int row_number, FieldInfo field, Dict item)
	{
		<div class="web_table__td_row_buttons">
			<Button type="danger small"
				@event:MouseClickEvent="onDeleteClick" data-item={{ item }}>Delete</Button>
		</div>
	}
	
	
	/**
	 * Returns route names
	 */
	static string getRouteName(string name)
	{
		if (name == "index") return "app:workspace:index";
		if (name == "add") return "app:workspace:add";
		if (name == "edit") return "app:workspace:edit";
		if (name == "delete") return "app:workspace:delete";
		return "";
	}
	
	
	/**
	 * Get names
	 */
	static string getNames(string action, Dict obj = null)
	{
		if (action == "name")
		{
			return "workspace";
		}
		if (action == "names")
		{
			return "workspaces";
		}
		else if (action == "item_name")
		{
			return obj["item", "name"] ~ " <" ~ obj["item", "uid"]  ~ ">";
		}
	}
}