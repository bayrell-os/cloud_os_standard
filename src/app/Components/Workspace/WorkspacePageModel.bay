/*!
 *  Bayrell Cloud OS
 *
 *  (c) Copyright 2020-2023 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Bayrell.CloudOS.Components.Workspace;

use Runtime.Callback;
use Runtime.ModelProxy;
use Runtime.Web.BaseModel;
use Runtime.Web.BaseRoute;
use Runtime.Web.Layout;
use Runtime.Web.RouteInfo;
use Runtime.Web.Events.MouseClickEvent;
use Runtime.Widget.Button;
use Runtime.Widget.FieldInfo;
use Runtime.Widget.Select;
use Runtime.Widget.Crud.CrudPageModel;
use Runtime.Widget.Form.FormModel;
use Runtime.Widget.Table.TableDialogModel;
use Runtime.Widget.Table.TableModel;
use Bayrell.CloudOS.Components.Domains.DomainFormModel;
use Bayrell.CloudOS.Components.Domains.DomainPageModel;
use Bayrell.CloudOS.Components.Domains.DomainTableModel;
use Bayrell.CloudOS.Components.Workspace.WorkspaceFormModel;
use Bayrell.CloudOS.Components.Workspace.WorkspaceTableModel;


struct WorkspacePageModel extends CrudPageModel
{
	/**
	 * Factory
	 */
	static FormModel createFormModel() => new WorkspaceFormModel{};
	static TableModel createTableModel() => new WorkspaceTableModel{};
	
	
	/**
	 * Init widget
	 */
	async static void initWidget(ModelProxy<BaseModel> model, ModelProxy<Layout> layout)
	{
		await parent::initWidget(model, layout);
		
		/* Add domains */
		await model.commitAsync("addForeignModel", layout, {
			"widget_name": "domains",
			"form_model": method DomainPageModel::createFormModel,
			"table_model_name": classof TableDialogModel,
			"table_model_init": method DomainTableModel::initWidget,
			"foreign_key": "space_id",
		});
		
		/* Setup table domains */
		ModelProxy<FormModel> domains_table = model
			.proxy(["widgets", "domains", "widgets", "table"])
		;
		if (domains_table.data() != null)
		{
			domains_table.proxy("data").commit("setApiName", "app.workspace.domain");
			domains_table.proxy("fields").commit("editField", new FieldInfo{
				"name": "row_buttons",
				"render_method": new Callback{
					"obj": static::getClassName(), "name": "renderRowButtons"
				},
			});
		}
		
		/* Setup form domains */
		ModelProxy<FormModel> domains_form = model
			.proxy(["widgets", "domains", "widgets", "form"])
		;
		if (domains_form.data() != null)
		{
			domains_form.proxy("data").commit("setApiName", "app.workspace.domain");
			domains_form.proxy("fields").commit("setFields", {
				"domain_id": new FieldInfo{
					"label": "Domain",
					"name": "domain_id",
					"component": classof Select,
				},
			});
			/* Add domain dictionary */
			domains_form.proxy("fields").commit("addDictionaryField", {
				"from": "domains",
				"to": "domain_id",
				"option": new Callback(static::getClassName(), "getOptionDomain"),
			});
			domains_form.proxy("fields").commit("setFieldsList", [
				"domain_id",
			]);
		}
		
		/* Add components */
		layout.commit("addComponent", classof Select);
	}
	
	
	/**
	 * Dictionary domain
	 */
	static Dict getOptionDomain(Dict item) =>
	{
		"label": item["domain_name"],
		"value": item["id"]
	};
	
	
	/**
	 * Render row buttons
	 */
	static html renderRowButtons(int row_number, FieldInfo field, Dict item)
	{
		<div class="web_table__td_row_buttons">
			<Button type="danger small"
				@event:MouseClickEvent="onDeleteClick" data-item={{ item }}>Delete</Button>
		</div>
	}
	
	
	/**
	 * Returns route names
	 */
	static string getRouteName(string name)
	{
		if (name == "index") return "app:workspace:index";
		if (name == "add") return "app:workspace:add";
		if (name == "edit") return "app:workspace:edit";
		if (name == "delete") return "app:workspace:delete";
		return "";
	}
	
	
	/**
	 * Get names
	 */
	static string getNames(string action, Dict obj = null)
	{
		if (action == "name")
		{
			return "workspace";
		}
		if (action == "names")
		{
			return "workspaces";
		}
		else if (action == "item_name")
		{
			return obj["item", "name"] ~ " <" ~ obj["item", "uid"]  ~ ">";
		}
	}
}