/*!
 *  Bayrell Cloud OS
 *
 *  (c) Copyright 2020-2023 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Bayrell.CloudOS.Components.Workspace;

use Runtime.Callback;
use Runtime.ModelProxy;
use Runtime.Web.ApiResult;
use Runtime.Web.BaseModel;
use Runtime.Web.BaseRoute;
use Runtime.Web.Layout;
use Runtime.Web.Events.MouseClickEvent;
use Runtime.Widget.Crud.CrudPageModel;
use Runtime.Widget.Form.FormModel;
use Runtime.Widget.Table.TableDialogModel;
use Runtime.Widget.Table.TableModel;
use Runtime.Widget.Button;
use Runtime.Widget.FieldInfo;
use Runtime.Widget.FieldItem;
use Runtime.Widget.Input;
use Runtime.Widget.Label;
use Runtime.Widget.Select;
use Runtime.Widget.SelectLabel;
use Runtime.Widget.TextArea;
use Bayrell.CloudOS.Components.Domains.DomainPageModel;


struct WorkspacePageModel extends CrudPageModel
{
	/**
	 * Fields
	 */
	pure static Dict fields() =>
	{
		"uid": new FieldInfo{
			"label": "UID",
			"field_name": "uid",
		}
		"name": new FieldInfo{
			"label": "Name",
			"field_name": "name",
		},
		"content": new FieldInfo{
			"label": "Content",
			"name": "content",
		},
	};
	
	
	/**
	 * Init components
	 */
	async static void initComponents(ModelProxy<BaseModel> model, BaseRoute route)
	{
		route.layout.commit("addComponent", classof Button);
		route.layout.commit("addComponent", classof Input);
		route.layout.commit("addComponent", classof Label);
		route.layout.commit("addComponent", classof Select);
		route.layout.commit("addComponent", classof SelectLabel);
		route.layout.commit("addComponent", classof TextArea);
	}
	
	
	/**
	 * Init widget table
	 */
	async static void initWidgetTable
	(
		ModelProxy<BaseModel> page_model,
		ModelProxy<BaseModel> widget,
		BaseRoute route
	)
	{
		/* Api name */
		widget.commit("setApiName", "app.workspace");
		
		/* Set fields */
		widget.commit("setFields", static::fields());
		
		/* Setup get href */
		widget.commit("setGetHref", new Callback(static::getClassName(), "getHref"));
		
		/* Set table fields list */
		widget.commit("setFieldsList", [
			new FieldItem{"name": "row_number"},
			new FieldItem{"name": "name", "component": classof Label},
			new FieldItem{"name": "uid", "component": classof Label},
			new FieldItem{"name": "row_buttons"},
		]);
		
		/* Setup page */
		widget.commit("setPage", route.container.request.query.get("page", 1));
	}
	
	
	/**
	 * Init widget form
	 */
	async static void initWidgetForm
	(
		ModelProxy<BaseModel> page_model,
		ModelProxy<BaseModel> widget,
		BaseRoute route
	)
	{
		/* Api name */
		widget.commit("setApiName", "app.workspace");
		
		/* Set fields */
		widget.commit("setFields", static::fields());
		
		/* Set form fields list */
		widget.commit("setFieldsList", [
			new FieldItem{"name": "name", "component": classof Input},
			new FieldItem{"name": "uid", "component": classof Input},
		]);
		
		/* Setup primary key */
		if (route.container.route.name != "app:workspace:add")
		{
			widget.commit("setPrimaryKey", {
				"id": route.container.route.matches.get("id"),
			});
		}
		
		/* Setup back page */
		route.page_model.commit("setBackPage", static::url("app:workspace:index"));
		
		/* Add widget versions */
		if (
			page_model.data("action") == "save" and
			not widget.call("isNew")
		)
		{
			TableDialogModel domains = await route.addWidget(
				new TableDialogModel{ "widget_name": "domains" }
			);
			await static::initWidgetDomains(page_model, domains, route);
		}
	}
	
	
	/**
	 * Setup widget routes
	 */
	async static void initWidgetDomains
	(
		ModelProxy<BaseModel> page_model,
		ModelProxy<BaseModel> widget,
		BaseRoute route
	)
	{
		/* Add components */
		await DomainPageModel::initComponents(page_model, route);
		
		/* Init table */
		await DomainPageModel::initWidgetTable(page_model, widget, route);
		
		/* Set table fields list */
		widget.commit("setFieldsList", [
			new FieldItem{"name": "row_number"},
			new FieldItem{"name": "domain_name", "component": classof Label},
			new FieldItem{"name": "row_buttons",
				"render_method": new Callback{
					"obj": static::getClassName(), "name": "renderRowButtons"
				},
			},
		]);
		
		/* Init form */
		ModelProxy<BaseModel> form = widget.proxy(["widgets", "form"]);
		
		/* Set fields */
		form.commit("setFields", {
			"domain_id": new FieldInfo{
				"label": "Domain",
				"field_name": "domain_id",
			},
		});
		form.commit("setFieldsList", [
			new FieldItem{"name": "domain_id", "component": classof Select},
		]);
		
		/* Add domain dictionary  */
		form.commit("addDictionaryField", {
			"from": "domains",
			"to": "domain_id",
			"option": new Callback(static::getClassName(), "getOptionDomain"),
		});
		
		/* Set get names  */
		form.commit("setGetNames", new Callback(classof DomainPageModel, "getNames"));
		
		/* Set api name */
		widget.commit("setApiName", "app.workspace.domain");
		form.commit("setApiName", "app.workspace.domain");
		
		/* Set foreign key */
		int space_id = (int)page_model.data(["widgets", "form", "item_pk", "id"]);
		widget.commit("setForeignKey", "space_id", space_id);
		form.commit("setForeignKey", "space_id", space_id);
		
		/* Remove space_id */
		form.commit("removeFieldFromList", "space_id");
	}
	
	
	/**
	 * Dictionary domain
	 */
	static Dict getOptionDomain(Dict item) =>
	{
		"label": item["domain_name"],
		"value": item["id"]
	};
	
	
	/**
	 * Render row buttons
	 */
	static html renderRowButtons(int row_number, FieldItem field, Dict item)
	{
		<div class="web_table__td_row_buttons">
			<Button type="danger small"
				@event:MouseClickEvent="onDeleteClick" data-item={{ item }}>Delete</Button>
		</div>
	}
	
	
	/**
	 * Returns href
	 */
	static string getHref(string name, Dict params = null)
	{
		if (name == "add")
		{
			return static::url("app:workspace:add");
		}
		else if (name == "edit")
		{
			return static::url("app:workspace:edit", {"id": params["item", "id"]});
		}
		else if (name == "delete")
		{
			return static::url("app:workspace:delete", {"id": params["item", "id"]});
		}
		return "";
	}
	
	
	/**
	 * Get names
	 */
	static string getNames(string action, Dict obj = null)
	{
		if (action == "name")
		{
			return "workspace";
		}
		if (action == "names")
		{
			return "workspaces";
		}
		else if (action == "item_name")
		{
			return obj["item", "name"] ~ " <" ~ obj["item", "uid"]  ~ ">";
		}
	}
	
}