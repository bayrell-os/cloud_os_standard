/*!
 *  Bayrell Cloud OS
 *
 *  (c) Copyright 2020-2023 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Bayrell.CloudOS.Components.Workspace;

use Runtime.re;
use Runtime.DateTime;
use Runtime.Exceptions.ApiException;
use Runtime.ORM.Connection;
use Runtime.ORM.Query;
use Runtime.ORM.Relation;
use Runtime.Widget.Crud.Api.CrudApi;
use Runtime.Widget.Crud.Api.CrudRule;
use Runtime.Widget.Crud.Api.Dictionary;
use Runtime.Widget.Crud.Api.Filter;
use Runtime.Widget.Crud.Api.LowerCase;
use Runtime.Widget.Crud.Api.Purify;
use Runtime.Widget.Crud.Api.Required;
use Runtime.Widget.Crud.Api.Unique;


class DomainApi extends CrudApi
{
	/**
	 * Returns api name
	 */
	pure string getApiName() => "app.workspace.domain";
	
	
	/**
	 * Returns table name
	 */
	pure string getTableName() => "domains";
	
	
	/**
	 * Returns api methods
	 */
	pure string getApiMethod(string api_name)
	{
		if (api_name == "crud.search") return "actionSearch";
		if (api_name == "crud.dictionary") return "actionDictionary";
		if (api_name == "crud.save") return "actionSave";
		if (api_name == "crud.delete") return "actionDelete";
		return "";
	}
	
	
	/**
	 * Returns item fields
	 */
	Collection getItemFields() => [
		"id",
		"domain_name",
		"gmtime_created",
		"gmtime_updated",
	];
	
	
	/**
	 * Returns save fields
	 */
	Collection getSaveFields() => [
		"domain_id",
	];
	
	
	/**
	 * Returns rules
	 */
	Collection<CrudRule> getRules() =>
	[
		new Purify{ "name": "domain_id" },
		new LowerCase{ "name": "domain_id" },
		new Required{ "name": "domain_id" },
		
		/* ForeignKey */
		new Dictionary{
			"dictionary_name": "domains",
			"table_name": "domains",
			"fields": [
				"id",
				"space_id",
				"is_deleted",
				"domain_name",
			],
			"query": Query (DomainApi api, Dictionary d, Query q)
			{
				q.where("space_id", "=", null);
				return q;
			},
		},
	];
	
	
	/**
	 * Build search query
	 */
	async Query buildSearchQuery(Query q)
	{
		int space_id = (int)this.post_data.get("space_id");
		
		q.where("space_id", "=", space_id);
		q.orderBy("domains.domain_name", "asc");
		
		return q;
	}
	
	
	/**
	 * Update item
	 */
	async void updateItem(Relation item, Dict update_data)
	{
		Connection conn = this.getDatabaseConnection();
		
		int space_id = update_data["space_id"];
		int domain_id = update_data["domain_id"];
		
		Relation space = Relation::findById("spaces", conn, space_id);
		if (!space)
		{
			throw new ApiException("Space not found");
		}
		
		Relation domain = Relation::findById("domains", conn, domain_id);
		if (!domain)
		{
			throw new ApiException("Domain not found");
		}
		if (domain.get("space_id") != 0)
		{
			throw new ApiException("Domain not found");
		}
		
		domain.set("space_id", space_id);
		domain.save(conn);
	}
	
	
	/**
	 * Delete item
	 */
	async void deleteItem(Relation item)
	{
		Connection conn = this.getDatabaseConnection();
		item.set("space_id", null);
		item.save(conn);
	}
	
}