/*!
 *  Bayrell Cloud OS
 *
 *  (c) Copyright 2020-2023 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Bayrell.CloudOS.Components.Templates;

use Runtime.lib;
use Runtime.ModelProxy;
use Runtime.Web.ApiResult;
use Runtime.Web.Bus;
use Runtime.Web.Crud.CrudPageModel;
use Runtime.Web.Crud.DialogModel;
use Runtime.Web.Crud.FieldInfo;
use Runtime.Web.Crud.FormModel;
use Bayrell.CloudOS.Models.Template;
use Bayrell.CloudOS.Models.TemplateVersion;


struct VersionPageModel extends CrudPageModel
{
	int template_id = 0;
	DialogModel save_dialog = new DialogModel{
		"auto_hide": false,
		"is_modal": true,
		"width": "800px",
		"style": DialogModel::STYLE_CONTENT,
	};
	DialogModel delete_dialog = new DialogModel{
		"auto_hide": false,
		"is_modal": true,
		"width": "500px",
		"style": DialogModel::STYLE_CONTENT,
	};
	
	Dict fields = {
		"content": new FieldInfo{
			"label": "Content",
			"field_name": "content",
		}
	};
	
	
	/**
	 * Returns api name
	 */
	pure string getApiName() => "app.template.version";
	
	
	/**
	 * Returns model name
	 */
	pure string getModelName() => classof TemplateVersion;
	
	
	/**
	 * Set template id
	 */
	VersionPageModel setTemplateId(int template_id) => this.copy{
		"template_id": template_id
	};
	
	
	/**
	 * Event
	 */
	async static Dict event(ModelProxy model, string event, Dict data)
	{
		data = await parent::event(model, event, data);
		
		int template_id = model.data().template_id;
		
		if (
			event == "crudSearchBefore" or
			event == "crudItemBefore"
		)
		{
			int template_id = model.data("template_id");
			if (template_id > 0)
			{
				data <= post_data <= template_id <= template_id;
			}
		}
		
		return data;
	}
	
}