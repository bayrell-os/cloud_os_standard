<!--
 *  Bayrell Cloud OS
 *
 *  (c) Copyright 2020-2023 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
-->

<class name="Bayrell.CloudOS.Components.DockerServices.ServiceTable"
	extends="Runtime.Widget.Table.Table">

<use name="Runtime.BaseModel" />
<use name="Runtime.ModelProxy" />
<use name="Runtime.Web.ApiResult" />
<use name="Runtime.Web.Bus" />
<use name="Runtime.Web.Message" />
<use name="Runtime.Web.Events.MouseClickEvent" />
<use name="Runtime.Widget.Button" />
<use name="Runtime.Widget.Dialog.Dialog" component="true" />
<use name="Runtime.Widget.Dialog.DialogEvent" />
<use name="Bayrell.CloudOS.Components.Applications.ServiceInfoComponent" component="true" />


<style>
.service_table .web_table, .service_table %(ServiceInfoComponent)service_info{
	display: inline-block;
	vertical-align: top;
}
.web_table tr.web_table__row_item{
	cursor: pointer;
}
</style>


<template name="renderField" args="int row_number, FieldInfo field, Dict item">

	%if (field.name == "stop_button")
	{
		<Button type="danger small" data-item={{ item }}
			@event:MouseClickEvent="onStopClick">Stop</Button>
	}
	
	%else
	{
		%render parent::renderField(row_number, field, item);
	}

</template>


<template name="renderTable">
	<div class="service_table">
		%render parent::renderTable();
		<ServiceInfoComponent @model=["widgets", "service_info"] />
	</div>
</template>


<template>
	%render parent::render();
	%render static::renderDialog();
</template>


<template name="renderDialog">
	<Dialog @ref="dialog"
		@model=["widgets", "stop", "dialog"] @event:DialogEvent="onDialogEvent"
	/>
</template>


<script>


/**
 * Row click
 */
async void onRowClick(Message<MouseClickEvent> msg)
{
	ModelProxy model = this.proxy();
	int row_number = msg.sender.params.get("data-row-number");
	model.proxy("data").commit("setSelected", row_number);
	
	/* Load data */
	Dict item = model.data(["data", "items", row_number]);
	
	/* Update service name */
	await model.proxy(["widgets", "service_info"]).commitAsync("updateService", item);
}


/**
 * Stop click
 */
async void onStopClick(Message<MouseClickEvent> msg)
{
	/* Show dialog */
	ModelProxy stop_model = this.proxy(["widgets", "stop"]);
	ModelProxy dialog = this.proxy(["widgets", "stop", "dialog"]);
	stop_model.commit("setItem", msg.sender.params.get("data-item"));
	dialog.commit("setTitle", "Stop item");
	dialog.commit("show");
}


/**
 * Dialog event
 */
async void onDialogEvent(Message<MouseClickEvent> msg)
{
	ModelProxy stop_model = this.proxy(["widgets", "stop"]);
	ModelProxy dialog = this.proxy(["widgets", "stop", "dialog"]);
	ModelProxy table_proxy = this.proxy();
	
	if (msg.event.button_result == "cancel")
	{
		dialog.commit("hide");
		return;
	}
	
	/* Stop item */
	if (msg.event.button_result == "yes")
	{
		dialog.commit("setWaitMessage");
		
		Dict crud_item = stop_model.data("item");
		int service_id = crud_item["service_id"];
		
		/* Send api */
		string api_name = table_proxy.data(["data", "api_name"]);
		Dict post_data = {
			"pk": {
				"service_id": service_id,
			}
		};
		ApiResult res = await Bus::callApi(api_name ~ "::service_stop", post_data);
		
		/* Check if success */
		dialog.commit("setMessage", res.getErrorMessage());
		dialog.commit("setErrorCode", res.getErrorCode());
		await table_proxy.commitAsync("doSearch");
	}
}


</script>


</class>