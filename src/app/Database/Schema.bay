/*!
 *  Bayrell Cloud OS
 *
 *  (c) Copyright 2020-2023 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Bayrell.CloudOS.Database;

use Runtime.re;
use Runtime.BaseStruct;
use Runtime.ORM.DatabaseSchema;
use Runtime.ORM.Annotations.AutoIncrement;
use Runtime.ORM.Annotations.BigIntType;
use Runtime.ORM.Annotations.CollectionType;
use Runtime.ORM.Annotations.DateTimeType;
use Runtime.ORM.Annotations.DictType;
use Runtime.ORM.Annotations.ForeignKey;
use Runtime.ORM.Annotations.Index;
use Runtime.ORM.Annotations.ManyToMany;
use Runtime.ORM.Annotations.Primary;
use Runtime.ORM.Annotations.StringType;
use Runtime.ORM.Annotations.Table;
use Runtime.ORM.Annotations.TinyIntType;
use Runtime.ORM.Annotations.Unique;
use Bayrell.CloudOS.Models.AppEnvironment;
use Bayrell.CloudOS.Models.AppVolume;
use Bayrell.CloudOS.Models.Application;
use Bayrell.CloudOS.Models.Modificator;
use Bayrell.CloudOS.Models.Template;
use Bayrell.CloudOS.Models.User;


class Schema
{
	
	/**
	 * Applications
	 */
	@Table{ "name": "applications", "model_name": classof Application }
	pure memorize Collection<BaseStruct> applications() =>
	[
		/* Fields */
		new BigIntType{"name": "id", "no_default": true},
		new StringType{"name": "stack_name"},
		new StringType{"name": "name"},
		new BigIntType{"name": "template_version_id"},
		new TinyIntType{"name": "status"},
		new StringType{"name": "content"},
		new CollectionType{
			"name": "patches",
			"annotations": "modificators",
			"model_name": classof Modificator,
		},
		new StringType{"name": "custom_patch"},
		new StringType{"name": "yaml"},
		new BigIntType{"name": "yaml_file_id"},
		new DictType{"name": "variables"},
		new CollectionType{
			"name": "environments",
			"model_name": classof AppEnvironment,
			"annotations": [
			],
		},
		new CollectionType{
			"name": "volumes",
			"model_name": classof AppVolume,
			"annotations": [
				new StringType{"name": "key"},
				new StringType{"name": "value"},
				new BigIntType{"name": "enable"},
			],
		},
		new DateTimeType{"name": "gmtime_created"},
		new DateTimeType{"name": "gmtime_updated"},
		
		/* Index */
		new AutoIncrement{"name": "id"},
		new Primary{"keys": ["id"]},
		new Unique{"keys": ["stack_name", "name"]},
		new Index{"keys": ["template_version_id"]},
		
		/* ForeignKey */
		new ForeignKey
		{
			"relation": "templates_versions",
			"primary_key": "id",
			"foreign_key": "template_version_id",
		},
		new ForeignKey
		{
			"relation": "yaml_files",
			"primary_key": "id",
			"foreign_key": "yaml_file_id",
		},
		new ManyToMany
		{
			"relation": "app_modificators",
			"foreign_name": "modificators",
			"primary_key": {
				"external": "id",
				"key": "modificator_id",
			},
			"foreign_key": {
				"external": "id",
				"key": "app_id",
			},
			"field_name": "modificators",
			"resolve": Collection (Collection<Dict> items, Application item) =>
				items
					.filter(
						bool (Dict obj) use (item) => obj["app_id"] == item.id,
					)
					.map(
						int (Dict obj) => obj["modificator_id"]
					)
				,
		},
	];
	
	
	/**
	 * Applications To Modificators
	 */
	@Table{ "name": "app_modificators" }
	pure memorize Collection<BaseStruct> app_modificators() =>
	[
		/* Fields */
		new BigIntType{"name": "app_id"},
		new BigIntType{"name": "modificator_id"},
		
		/* Index */
		new Unique{"keys": ["app_id", "modificator_id"]},
		new Index{"keys": ["modificator_id"]},
	];
	
	
	/**
	 * Modificators
	 */
	@Table{ "name": "modificators" }
	pure memorize Collection<BaseStruct> modificators() =>
	[
		/* Fields */
		new BigIntType{"name": "id", "no_default": true},
		new StringType{"name": "uid"},
		new StringType{"name": "version"},
		new StringType{"name": "name"},
		new StringType{"name": "content"},
		new BigIntType{"name": "priority"},
		new DateTimeType{"name": "gmtime_created"},
		new DateTimeType{"name": "gmtime_updated"},
		
		/* Index */
		new AutoIncrement{"name": "id"},
		new Primary{"keys": ["id"]},
		new Unique{"keys": ["uid"]},
	];
	
	
	/**
	 * Template
	 */
	@Table{ "name": "templates", "model_name": classof Template }
	pure memorize Collection<BaseStruct> templates() =>
	[
		/* Fields */
		new BigIntType{"name": "id", "no_default": true},
		new StringType{"name": "uid"},
		new StringType{"name": "name"},
		new DateTimeType{"name": "gmtime_created"},
		new DateTimeType{"name": "gmtime_updated"},
		
		/* Index */
		new AutoIncrement{"name": "id"},
		new Primary{"keys": ["id"]},
		new Unique{"keys": ["uid"]},
	];
	
	
	/**
	 * Template version
	 */
	@Table{ "name": "templates_versions" }
	pure memorize Collection<BaseStruct> templates_versions() =>
	[
		/* Fields */
		new BigIntType{"name": "id", "no_default": true},
		new BigIntType{"name": "template_id"},
		new StringType{"name": "version"},
		new StringType{"name": "content"},
		new DateTimeType{"name": "gmtime_created"},
		new DateTimeType{"name": "gmtime_updated"},
		
		/* Index */
		new AutoIncrement{"name": "id"},
		new Primary{"keys": ["id"]},
		new Unique{"keys": ["template_id", "version"]},
		
		/* ForeignKey */
		new ForeignKey
		{
			"relation": "templates",
			"primary_key": "id",
			"foreign_key": "template_id",
		},
	];
	
	
	/**
	 * User
	 */
	@Table{ "name": "users", "model_name": classof User }
	pure memorize Collection<BaseStruct> users() =>
	[
		/* Fields */
		new BigIntType{"name": "id", "no_default": true},
		new StringType{"name": "login"},
		new StringType{"name": "name"},
		new TinyIntType{"name": "banned"},
		new TinyIntType{"name": "is_deleted"},
		new DateTimeType{"name": "gmtime_created"},
		new DateTimeType{"name": "gmtime_updated"},
		
		/* Index */
		new AutoIncrement{"name": "id"},
		new Primary{"keys": ["id"]},
		new Unique{"keys": ["login"]},
	];
}