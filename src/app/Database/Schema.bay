/*!
 *  Bayrell Cloud OS
 *
 *  (c) Copyright 2020-2023 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Bayrell.CloudOS.Database;

use Runtime.re;
use Runtime.BaseStruct;
use Runtime.DateTime;
use Runtime.ORM.DatabaseSchema;
use Runtime.ORM.Relation;
use Runtime.ORM.Annotations.AutoIncrement;
use Runtime.ORM.Annotations.BigIntType;
use Runtime.ORM.Annotations.CollectionType;
use Runtime.ORM.Annotations.DateTimeType;
use Runtime.ORM.Annotations.DictType;
use Runtime.ORM.Annotations.ForeignKey;
use Runtime.ORM.Annotations.Index;
use Runtime.ORM.Annotations.Primary;
use Runtime.ORM.Annotations.StringType;
use Runtime.ORM.Annotations.Table;
use Runtime.ORM.Annotations.TinyIntType;
use Runtime.ORM.Annotations.Unique;
use Bayrell.CloudOS.Models.AppEnvironment;
use Bayrell.CloudOS.Models.AppVolume;
use Bayrell.CloudOS.Models.Application;
use Bayrell.CloudOS.Models.DockerStack;
use Bayrell.CloudOS.Models.DockerYamlFile;
use Bayrell.CloudOS.Models.Domain;
use Bayrell.CloudOS.Models.DomainSSLGroup;
use Bayrell.CloudOS.Models.Modificator;
use Bayrell.CloudOS.Models.NginxFile;
use Bayrell.CloudOS.Models.Route;
use Bayrell.CloudOS.Models.Template;
use Bayrell.CloudOS.Models.User;
use Bayrell.CloudOS.Models.Workspace;


class Schema extends DatabaseSchema
{
	
	/**
	 * Register hooks
	 */
	void register_hooks()
	{
		this.register( static::SAVE_BEFORE );
	}
	
	
	/**
	 * Applications
	 */
	@Table{ "name": "applications", "model_name": classof Application }
	pure memorize Collection<BaseStruct> applications() =>
	[
		/* Fields */
		new BigIntType{"name": "id"},
		new StringType{"name": "stack_name"},
		new StringType{"name": "name"},
		new BigIntType{"name": "template_version_id"},
		new TinyIntType{"name": "status"},
		new StringType{"name": "content"},
		new StringType{"name": "custom_patch"},
		new StringType{"name": "yaml"},
		new BigIntType{"name": "yaml_file_id"},
		new DictType{"name": "variables"},
		new DateTimeType{"name": "gmtime_created"},
		new DateTimeType{"name": "gmtime_updated"},
		
		/* Index */
		new AutoIncrement{"name": "id"},
		new Primary{"keys": ["id"]},
		new Unique{"keys": ["stack_name", "name"]},
		new Index{"keys": ["template_version_id"]},
		
		/* ForeignKey */
		new ForeignKey
		{
			"name": "applications__docker_stack",
			"table_name": "stacks",
			"primary_key": "stack_name",
			"foreign_key": "stack_name",
		},
		new ForeignKey
		{
			"name": "applications__templates_versions",
			"table_name": "templates_versions",
			"primary_key": "id",
			"foreign_key": "template_version_id",
		},
		new ForeignKey
		{
			"name": "applications__yaml_files",
			"table_name": "yaml_files",
			"primary_key": "id",
			"foreign_key": "yaml_file_id",
		}
	];
	
	
	/**
	 * Applications To Modificators
	 */
	@Table{ "name": "app_modificators" }
	pure memorize Collection<BaseStruct> app_modificators() =>
	[
		/* Fields */
		new BigIntType{"name": "app_id"},
		new BigIntType{"name": "modificator_id"},
		
		/* Index */
		new Primary{"keys": ["app_id", "modificator_id"]},
		new Index{"keys": ["modificator_id"]},
		
		/* ForeignKey */
		new ForeignKey
		{
			"name": "app_modificators__application",
			"table_name": "applications",
			"primary_key": "id",
			"foreign_key": "app_id",
		},
		new ForeignKey
		{
			"name": "app_modificators__modificator",
			"table_name": "modificators",
			"primary_key": "id",
			"foreign_key": "modificator_id",
		},
	];
	
	
	/**
	 * Docker yaml files
	 */
	@Table{ "name": "docker_yaml_files", "model_name": classof DockerYamlFile }
	pure memorize Collection<BaseStruct> docker_yaml_files() =>
	[
		/* Fields */
		new BigIntType{"name": "id"},
		new StringType{"name": "file_name"},
		new StringType{"name": "stack_name", "default": "app"},
		new StringType{"name": "content"},
		new BigIntType{"name": "timestamp"},
		new BigIntType{"name": "is_deleted"},
		new DateTimeType{"name": "gmtime_created"},
		new DateTimeType{"name": "gmtime_updated"},
		
		/* Index */
		new AutoIncrement{"name": "id"},
		new Primary{"keys": ["id"]},
		new Index{"keys": ["file_name"]},
		new Unique{"keys": ["stack_name", "file_name"]},
	];
	
	
	/**
	 * Domains
	 */
	@Table{ "name": "domains", "model_name": classof Domain }
	pure memorize Collection<BaseStruct> domains() =>
	[
		/* Fields */
		new BigIntType{"name": "id"},
		new BigIntType{"name": "space_id", "nullable": true},
		new BigIntType{"name": "ssl_id", "nullable": true},
		new BigIntType{"name": "https_redirect"},
		new StringType{"name": "domain_name"},
		new StringType{"name": "nginx_template"},
		new TinyIntType{"name": "is_deleted"},
		new DateTimeType{"name": "gmtime_created"},
		new DateTimeType{"name": "gmtime_updated"},
		
		/* ForeignKey */
		new ForeignKey
		{
			"name": "domains__spaces",
			"table_name": "spaces",
			"primary_key": "id",
			"foreign_key": "space_id",
		},
		
		/* Index */
		new AutoIncrement{"name": "id"},
		new Primary{"keys": ["id"]},
		new Unique{"keys": ["domain_name"]},
	];
	
	
	/**
	 * Domains ssl group
	 */
	@Table{ "name": "domains_ssl_groups", "model_name": classof DomainSSLGroup }
	pure memorize Collection<BaseStruct> domains_ssl_groups() =>
	[
		/* Fields */
		new BigIntType{"name": "id"},
		new StringType{"name": "name"},
		new StringType{"name": "container_name"},
		new DictType{"name": "cert_info"},
		new StringType{"name": "public_key"},
		new StringType{"name": "private_key"},
		new DateTimeType{"name": "gmtime_created"},
		new DateTimeType{"name": "gmtime_updated"},
		
		/* Index */
		new AutoIncrement{"name": "id"},
		new Primary{"keys": ["id"]},
		new Unique{"keys": ["domain_name"]},
	];
	
	
	/**
	 * Modificators
	 */
	@Table{ "name": "modificators" }
	pure memorize Collection<BaseStruct> modificators() =>
	[
		/* Fields */
		new BigIntType{"name": "id"},
		new StringType{"name": "uid"},
		new StringType{"name": "version"},
		new StringType{"name": "name"},
		new StringType{"name": "content"},
		new BigIntType{"name": "priority"},
		new DateTimeType{"name": "gmtime_created"},
		new DateTimeType{"name": "gmtime_updated"},
		
		/* Index */
		new AutoIncrement{"name": "id"},
		new Primary{"keys": ["id"]},
		new Unique{"keys": ["uid"]},
	];
	
	
	/**
	 * Nginx files
	 */
	@Table{ "name": "nginx_files", "model_name": classof NginxFile }
	pure memorize Collection<BaseStruct> nginx_files() =>
	[
		/* Fields */
		new BigIntType{"name": "id"},
		new StringType{"name": "name"},
		new BigIntType{"name": "enable"},
		new StringType{"name": "content"},
		new BigIntType{"name": "timestamp"},
		new TinyIntType{"name": "is_deleted"},
		new DateTimeType{"name": "gmtime_created"},
		new DateTimeType{"name": "gmtime_updated"},
		
		/* Index */
		new AutoIncrement{"name": "id"},
		new Primary{"keys": ["id"]},
		new Unique{"keys": ["name"]},
	];
	
	
	/**
	 * Routes
	 */
	@Table{ "name": "routes", "model_name": classof Route }
	pure memorize Collection<BaseStruct> routes() =>
	[
		/* Fields */
		new BigIntType{"name": "id"},
		new BigIntType{"name": "enable"},
		new StringType{"name": "protocol"},
		new DictType{"name": "protocol_data", "default": {}},
		new StringType{"name": "domain_id"},
		new StringType{"name": "route_prefix", "default": "/"},
		new StringType{"name": "docker_name"},
		new StringType{"name": "source_port", "default": "80"},
		new StringType{"name": "target_port", "default": "80"},
		new StringType{"name": "target_prefix", "default": "/"},
		new StringType{"name": "nginx_config"},
		new DateTimeType{"name": "gmtime_created"},
		new DateTimeType{"name": "gmtime_updated"},
		
		/* Index */
		new AutoIncrement{"name": "id"},
		new Primary{"keys": ["id"]},
		new Unique{"keys": ["name"]},
		
		/* ForeignKey */
		new ForeignKey
		{
			"name": "routes__domain_id",
			"table_name": "domains",
			"primary_key": "id",
			"foreign_key": "domain_id",
		},
	];
	
	
	/**
	 * Workspace
	 */
	@Table{ "name": "spaces", "model_name": classof Workspace }
	pure memorize Collection<BaseStruct> spaces() =>
	[
		/* Fields */
		new BigIntType{"name": "id"},
		new StringType{"name": "uid"},
		new StringType{"name": "name"},
		new DateTimeType{"name": "gmtime_created"},
		new DateTimeType{"name": "gmtime_updated"},
		
		/* Index */
		new AutoIncrement{"name": "id"},
		new Primary{"keys": ["id"]},
		new Unique{"keys": ["uid"]},
	];
	
	
	/**
	 * Workspace roles
	 */
	@Table{ "name": "spaces_roles" }
	pure memorize Collection<BaseStruct> spaces_roles() =>
	[
		/* Fields */
		new BigIntType{"name": "id"},
		new BigIntType{"name": "space_id"},
		new StringType{"name": "name"},
		new TinyIntType{"name": "is_deleted"},
		new DateTimeType{"name": "gmtime_created"},
		new DateTimeType{"name": "gmtime_updated"},
		
		/* Index */
		new AutoIncrement{"name": "id"},
		new Primary{"keys": ["id"]},
		new Unique{"keys": ["space_id", "name"]},
	];
	
	
	/**
	 * Workspace users
	 */
	@Table{ "name": "spaces_users" }
	pure memorize Collection<BaseStruct> spaces_users() =>
	[
		/* Fields */
		new BigIntType{"name": "id"},
		new BigIntType{"name": "space_id"},
		new BigIntType{"name": "user_id"},
		new DateTimeType{"name": "gmtime_created"},
		new DateTimeType{"name": "gmtime_updated"},
		
		/* Index */
		new AutoIncrement{"name": "id"},
		new Primary{"keys": ["id"]},
		new Unique{"keys": ["space_id", "user_id"]},
		
		/* ForeignKey */
		new ForeignKey
		{
			"name": "spaces_users__user_id",
			"table_name": "users",
			"primary_key": "id",
			"foreign_key": "user_id",
		},
	];
	
	
	/**
	 * Workspace users
	 */
	@Table{ "name": "spaces_users_roles" }
	pure memorize Collection<BaseStruct> spaces_users_roles() =>
	[
		/* Fields */
		new BigIntType{"name": "user_id"},
		new BigIntType{"name": "role_id"},
		new TinyIntType{"name": "is_deleted"},
		new DateTimeType{"name": "gmtime_created"},
		new DateTimeType{"name": "gmtime_updated"},
		
		/* Index */
		new Primary{"keys": ["user_id", "role_id"]},
		
		/* ForeignKey */
		new ForeignKey
		{
			"name": "spaces_users_roles__role_id",
			"table_name": "spaces_roles",
			"primary_key": "id",
			"foreign_key": "role_id",
		},
		new ForeignKey
		{
			"name": "spaces_users_roles__user_id",
			"table_name": "users",
			"primary_key": "id",
			"foreign_key": "user_id",
		},
	];
	
	
	/**
	 * Docker stack
	 */
	@Table{ "name": "stacks", "model_name": classof DockerStack }
	pure memorize Collection<BaseStruct> stacks() =>
	[
		/* Fields */
		new StringType{"name": "stack_name"},
		new DateTimeType{"name": "gmtime_created"},
		new DateTimeType{"name": "gmtime_updated"},
		
		/* Index */
		new Primary{"keys": ["stack_name"]},
	];
	
	
	/**
	 * Template
	 */
	@Table{ "name": "templates", "model_name": classof Template }
	pure memorize Collection<BaseStruct> templates() =>
	[
		/* Fields */
		new BigIntType{"name": "id"},
		new StringType{"name": "uid"},
		new StringType{"name": "name"},
		new DateTimeType{"name": "gmtime_created"},
		new DateTimeType{"name": "gmtime_updated"},
		
		/* Index */
		new AutoIncrement{"name": "id"},
		new Primary{"keys": ["id"]},
		new Unique{"keys": ["uid"]},
	];
	
	
	/**
	 * Template version
	 */
	@Table{ "name": "templates_versions" }
	pure memorize Collection<BaseStruct> templates_versions() =>
	[
		/* Fields */
		new BigIntType{"name": "id"},
		new BigIntType{"name": "template_id"},
		new StringType{"name": "version"},
		new StringType{"name": "content"},
		new DateTimeType{"name": "gmtime_created"},
		new DateTimeType{"name": "gmtime_updated"},
		
		/* Index */
		new AutoIncrement{"name": "id"},
		new Primary{"keys": ["id"]},
		new Unique{"keys": ["template_id", "version"]},
		
		/* ForeignKey */
		new ForeignKey
		{
			"name": "templates_versions__templates",
			"table_name": "templates",
			"primary_key": "id",
			"foreign_key": "template_id",
		},
	];
	
	
	/**
	 * User
	 */
	@Table{ "name": "users", "model_name": classof User }
	pure memorize Collection<BaseStruct> users() =>
	[
		/* Fields */
		new BigIntType{"name": "id"},
		new StringType{"name": "login"},
		new StringType{"name": "name"},
		new TinyIntType{"name": "banned"},
		new TinyIntType{"name": "is_deleted"},
		new DateTimeType{"name": "gmtime_created"},
		new DateTimeType{"name": "gmtime_updated"},
		
		/* Index */
		new AutoIncrement{"name": "id"},
		new Primary{"keys": ["id"]},
		new Unique{"keys": ["login"]},
	];
	
	
	/**
	 * Save item
	 */
	Dict onBeforeSave(Dict d)
	{
		Relation item = d["item"];
		if (
			item.getTableName() == "docker_yaml_files" or
			item.getTableName() == "domains" or
			item.getTableName() == "domains_ssl_groups" or
			item.getTableName() == "modificators" or
			item.getTableName() == "nginx_files" or
			item.getTableName() == "routes" or
			item.getTableName() == "spaces" or
			item.getTableName() == "spaces_roles" or
			item.getTableName() == "spaces_users" or
			item.getTableName() == "spaces_users_roles" or
			item.getTableName() == "stacks" or
			item.getTableName() == "templates" or
			item.getTableName() == "templates_versions" or
			item.getTableName() == "users"
		)
		{
			if (item.isNew())
			{
				item.set("gmtime_created", DateTime::now());
			}
			item.set("gmtime_updated", DateTime::now());
		}
		
		if (item.getTableName() == "spaces")
		{
			string uid = item.get("uid");
			if (uid == "")
			{
				item.set("uid", rtl::uid());
			}
		}
		
		return d;
	}
}