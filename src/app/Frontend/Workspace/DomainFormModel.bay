/*!
 *  Bayrell Cloud OS
 *
 *  (c) Copyright 2020-2024 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Bayrell.CloudOS.Frontend.Workspace;

use Runtime.Callback;
use Runtime.Widget.ButtonModel;
use Runtime.Widget.Input;
use Runtime.Widget.RowButtons;
use Runtime.Widget.RowButtonsModel;
use Runtime.Widget.Select;
use Runtime.Widget.TextArea;
use Runtime.Widget.Crud.CrudApiStorage;
use Runtime.Widget.Crud.Dictionary;
use Runtime.Widget.Form.FormModel;


class DomainFormModel extends FormModel
{
	/**
	 * Create data storage
	 */
	CrudApiStorage createDataStorage() => new CrudApiStorage{
		"layout": this.layout,
		"class_name": "app.workspace.domain",
		"primary_keys": ["id"],
	};
	
	
	/**
	 * Init widget settings
	 */
	void initWidget(Dict params)
	{
		parent(params);
		
		/* Domains */
		Dictionary domain_id = this.addWidget(
			classof Dictionary,
			{
				"storage": new CrudApiStorage{
					"layout": this.layout,
					"class_name": "app.domain",
				},
				"widget_name": "domain_id",
				"transform": Map (Dict item) => {
					"label": item.get("domain_name"),
					"value": item.get("id"),
				},
			}
		);
		
		/* Domain name */
		this.addField({
			"label": "Domain name",
			"name": "domain_id",
			"component": classof Select,
			"model": domain_id,
		});
	}
	
	
	/**
	 * Get page title
	 */
	string getPageTitle(string action = "")
	{
		if (action == "add")
		{
			return "Add domain";
		}
		if (action == "edit")
		{
			return "Edit domain " ~ this.storage.item.get("domain_name");
		}
		if (action == "delete")
		{
			return "Delete domain " ~ this.storage.item.get("domain_name");
		}
		return "";
	}
}