/*!
 *  Bayrell Cloud OS
 *
 *  (c) Copyright 2020-2023 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Bayrell.CloudOS.Frontend.Workspace;

use Runtime.Callback;
use Runtime.ModelProxy;
use Runtime.Web.BaseModel;
use Runtime.Web.BaseRoute;
use Runtime.Web.Layout;
use Runtime.Web.RouteInfo;
use Runtime.Web.Events.MouseClickEvent;
use Runtime.Widget.Crud.CrudDialogModel;
use Runtime.Widget.Crud.CrudPageModel;
use Runtime.Widget.Form.FormModel;
use Runtime.Widget.Table.TableDialogModel;
use Runtime.Widget.Table.TableModel;
use Runtime.Widget.Button;
use Runtime.Widget.FieldInfo;
use Runtime.Widget.FieldList;
use Runtime.Widget.Input;
use Runtime.Widget.Label;
use Runtime.Widget.Select;
use Bayrell.CloudOS.Frontend.Domains.DomainPageModel as BaseDomainPageModel;


struct DomainPageModel extends BaseDomainPageModel
{
	/**
	 * Api name
	 */
	pure static Dict getApiName(string type) => "app.workspace.domain";
	
	
	/**
	 * Factory table
	 */
	static TableModel createTableModel(ModelProxy<BaseModel> model, ModelProxy<Layout> layout)
		=> new TableDialogModel{};
	
	
	/**
	 * Init widget
	 */
	async static void initWidget(ModelProxy<CrudPageModel> model, ModelProxy<Layout> layout)
	{
		model.commit("setAction", "dialog");
		await parent::initWidget(model, layout);
	}
	
	
	/**
	 * Init table
	 */
	async static void initTableWidget(
		ModelProxy<CrudPageModel> model,
		ModelProxy<TableModel> table,
		ModelProxy<Layout> layout
	)
	{
		await parent::initTableWidget(model, table, layout);
		
		/* Setup fields */
		ModelProxy<FieldList> fields = table.proxy("fields");
		fields.commit("editField", new FieldInfo{
			"name": "row_buttons",
			"render_method": new Callback{
				"obj": static::getClassName(), "name": "renderRowButtons"
			},
		});
		fields.commit("setFieldsList", [
			"row_number",
			"domain_name",
			"row_buttons",
		]);
	}
	
	
	/**
	 * Init form
	 */
	async static void initFormWidget(
		ModelProxy<CrudPageModel> model,
		ModelProxy<FormModel> form,
		ModelProxy<Layout> layout
	)
	{
		await parent::initFormWidget(model, form, layout);
		
		/* Setup fields */
		ModelProxy<FieldList> fields = form.proxy("fields");
		fields.commit("setFields", {
			"domain_id": new FieldInfo{
				"label": "Domain",
				"name": "domain_id",
				"component": classof Select,
			},
		});
		
		/* Add domain dictionary */
		fields.commit("addDictionaryField", {
			"from": "domains",
			"to": "domain_id",
			"option": new Callback(static::getClassName(), "getDomainOption"),
		});
		fields.commit("setFieldsList", [
			"domain_id",
		]);
		
		/* Hide form buttons */
		form.commit("setShowTopButtons", false);
		
		/* Add components */
		layout.commit("addComponent", classof Select);
	}
	
	
	/**
	 * Dictionary domain
	 */
	static Dict getDomainOption(ModelProxy model, Dict item) =>
	{
		"label": item["domain_name"],
		"value": item["id"]
	};
	
	
	/**
	 * Render row buttons
	 */
	static html renderRowButtons(int row_number, FieldInfo field, Dict item)
	{
		<div class="web_table__td_row_buttons">
			<Button type="danger small"
				@event:MouseClickEvent="onDeleteClick" data-item={{ item }}>Delete</Button>
		</div>
	}
	
}