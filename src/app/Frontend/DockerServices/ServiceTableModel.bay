/*!
 *  Bayrell Cloud OS
 *
 *  (c) Copyright 2020-2023 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Bayrell.CloudOS.Frontend.DockerServices;

use Runtime.Callback;
use Runtime.Widget.ButtonModel;
use Runtime.Widget.RenderListModel;
use Runtime.Widget.RowButtons;
use Runtime.Widget.RowButtonsModel;
use Runtime.Widget.Crud.CrudApiStorage;
use Runtime.Widget.Table.RefreshButtonModel;
use Runtime.Widget.Table.TableModel;
use Bayrell.CloudOS.Frontend.DockerServices.StopDialogModel;


class ServiceTableModel extends TableModel
{
	/**
	 * Create data storage
	 */
	CrudApiStorage createDataStorage() => new CrudApiStorage{
		"layout": this.layout,
		"class_name": "app.docker.services",
		"primary_keys": ["id"],
	};
	
	
	/**
	 * Init styles
	 */
	void initStyles()
	{
		this.styles.add("border");
	}
	
	
	/**
	 * Init table widgets
	 */
	void initWidgets()
	{
		parent();
		
		/* Get render list widget */
		RenderListModel render_list = this.getWidget("render_list");
		
		/* Create stop wiget */
		StopDialogModel stop_dialog = new StopDialogModel{
			"parent_widget": this,
		};
		render_list.addRender(stop_dialog);
	}
	
	
	/**
	 * Init fields
	 */
	void initFields()
	{
		/* Row number */
		this.addField({
			"name": "row_number",
		});
		
		/* Field docker_name */
		this.addField({
			"label": "Docker name",
			"name": "docker_name",
		});
		
        /* Field docker_image */
		this.addField({
			"label": "Docker image",
			"name": "docker_image",
		});
        
        /* Field replicas */
		this.addField({
			"label": "Replicas",
			"name": "replicas",
		});
        
		/* Row buttons */
		this.addFieldRowButtons();
	}
	
	
	/**
	 * Init buttons
	 */
	void initButtons()
	{
		/* Refresh button */
		ButtonModel refresh_button = this.top_buttons.add(new RefreshButtonModel{
			"layout": this.layout,
			"table": this,
		});
	}
	
	
	/**
	 * Add field row buttons
	 */
	Map addFieldRowButtons()
	{
		/* Row buttons */
		RowButtonsModel row_buttons = new RowButtonsModel();
		
		/* Stop button */
		ButtonModel stop_button = row_buttons.add(new ButtonModel{
			"content": "Stop",
			"styles": [
				"danger",
				"small",
			],
		});
		stop_button.events.add("onClick", new Callback(this.getWidget("stop_dialog"), "onClick"));
		
		/* Add buttons */
		Map field = this.addField({
			"name": "row_buttons",
			"component": classof RowButtons,
			"model": row_buttons,
		});
		
		return field;
	}
	
	
	/**
	 * Returns item value
	 */
	var getItemValue(Map item, string field_name)
	{
		if (field_name == "docker_name")
		{
			string service_name = item.get("service_name");
			string stack_name = item.get("stack_name");
			return stack_name ~ "_" ~ service_name;
		}
		else if (field_name == "replicas")
		{
			string count_total = item.get("count_total");
			string count_work = item.get("count_work");
			return count_total ~ "/" ~ count_work;
		}
		return parent(item, field_name);
	}
}