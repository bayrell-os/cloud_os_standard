/*!
 *  Bayrell Cloud OS
 *
 *  (c) Copyright 2020-2023 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Bayrell.CloudOS.Frontend.DockerServices;

use Runtime.Callback;
use Runtime.ModelProxy;
use Runtime.Web.BaseModel;
use Runtime.Web.BaseRoute;
use Runtime.Web.Layout;
use Runtime.Web.RouteInfo;
use Runtime.Widget.Crud.CrudDataStorage;
use Runtime.Widget.Crud.CrudPageModel;
use Runtime.Widget.Form.FormModel;
use Runtime.Widget.Table.Table;
use Runtime.Widget.Table.TableDialogModel;
use Runtime.Widget.Table.TableModel;
use Runtime.Widget.Table.TopRefreshButton;
use Runtime.Widget.Table.TopRefreshModel;
use Runtime.Widget.FieldInfo;
use Runtime.Widget.FieldList;
use Runtime.Widget.Input;
use Runtime.Widget.Label;
use Runtime.Widget.TopButtonModel;
use Bayrell.CloudOS.Frontend.Applications.ServiceInfo;
use Bayrell.CloudOS.Frontend.DockerServices.ServiceTable;
use Bayrell.CloudOS.Frontend.DockerServices.StopButton;
use Bayrell.CloudOS.Frontend.DockerServices.StopModel;


struct ServicePageModel extends CrudPageModel
{
    /**
	 * Fields
	 */
	pure static Dict fields(string type) =>
	{
		"row_number": new FieldInfo{
			"name": "row_number",
		},
		"docker_name": new FieldInfo{
			"label": "Docker name",
			"name": "docker_name",
			"render_method": new Callback(static::getClassName(), "renderRow"),
		},
		"docker_image": new FieldInfo{
			"label": "Docker image",
			"name": "docker_image",
			"component": classof Label,
		},
		"replicas": new FieldInfo{
			"label": "Replicas",
			"name": "replicas",
			"render_method": new Callback(static::getClassName(), "renderRow"),
		},
		"stop_button": new FieldInfo{
			"name": "stop_button",
		},
	};
	
	
	/**
	 * Factory table
	 */
	static TableModel createTableModel(ModelProxy<BaseModel> model, ModelProxy<Layout> layout)
		=> new TableModel{
			"component_name": classof ServiceTable,
		};
	
	
	/**
	 * Primary keys
	 */
	pure static Collection getPrimaryKeys() => ["service_id"];
	
	
	/**
	 * Api name
	 */
	pure static Dict getApiName(string type) => "app.docker.services";
	
	
	/**
	 * Init widget
	 */
	async static void initWidget(ModelProxy<CrudPageModel> model, ModelProxy<Layout> layout)
	{
		await parent::initWidget(model, layout);
	}
	
	
	/**
	 * Init table
	 */
	async static void initTableWidget(
		ModelProxy<CrudPageModel> model,
		ModelProxy<TableModel> table,
		ModelProxy<Layout> layout
	)
	{
		await parent::initTableWidget(model, table, layout);
		
		/* Set fields list */
		ModelProxy<FieldList> fields = table.proxy("fields");
		fields.commit("setFieldsList", [
			"row_number",
			"docker_name",
			"docker_image",
			"replicas",
			"stop_button",
		]);
		
		/* Add save top button */
		table.commit("clearTopButtons");
		table.commit("addTopButton",
			new TopRefreshModel{}
		);
		
		/* Add Service */
		table.commit("addWidget", new ServiceInfo{});
		
		/* Stop widget */
		table.commit("addWidget", new StopModel() );
		
		/* Add components */
		layout.commit("addComponent", classof Label);
		layout.commit("addComponent", classof ServiceTable);
		layout.commit("addComponent", classof TopRefreshButton);
	}
	
	
	/**
	 * Render row buttons
	 */
	static html renderRow(int row_number, FieldInfo field, Dict item)
	{
		%if (field.name == "docker_name")
		{
			{{ item["stack_name"] ~ "_" ~ item["service_name"] }}
		}
		%elseif (field.name == "replicas")
		{
			{{ item["count_work"] ~ "/" ~ item["count_total"] }}
		}
	}
	
	
	/**
	 * Get page title
	 */
	string getPageTitle(string action)
	{
		if (action == "name")
		{
			return "service";
		}
		if (action == "names")
		{
			return "services";
		}
		return parent::getPageTitle(action);
	}
	
}