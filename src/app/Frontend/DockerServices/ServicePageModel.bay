/*!
 *  Bayrell Cloud OS
 *
 *  (c) Copyright 2020-2024 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Bayrell.CloudOS.Frontend.DockerServices;

use Runtime.Callback;
use Runtime.Entity.Factory;
use Runtime.Web.ApiResult;
use Runtime.Web.BasePageModel;
use Runtime.Web.ModelFactory;
use Runtime.Web.RenderContainer;
use Runtime.Web.Messages.ClickMessage;
use Runtime.Web.Messages.Message;
use Runtime.Widget.ButtonModel;
use Runtime.Widget.RowButtonsModel;
use Runtime.Widget.Dialog.ConfirmDialogModel;
use Runtime.Widget.Dialog.DialogModelException;
use Runtime.Widget.Form.FormModel;
use Runtime.Widget.Table.RefreshButtonModel;
use Runtime.Widget.Table.TableDialogModel;
use Bayrell.CloudOS.Frontend.DockerServices.ServicePage;


class ServicePageModel extends BasePageModel
{
	string component = classof ServicePage;
	FormModel form = null;
	TableDialogModel table = null;
	RowButtonsModel top_buttons = null;
	
	
	/**
	 * Init widget settings
	 */
	void initWidget(Dict params)
	{
		parent(params);
		
		/* Add table */
		this.table = this.addWidget(
			classof TableDialogModel,
			{
				"widget_name": "table",
				"get_title": void (Dict params)
				{
					return "";
				},
				"styles": ["border"],
				
				/* Table storage */
				"storage": new Factory
				(
					"Runtime.Widget.Table.TableStorage",
					{
						"api_name": "app.docker.services::search",
					}
				),
				
				/* Set page */
				"page": this.layout.request_query.get("page", 1) - 1,
				
				/* Events */
				"events":
				{
					"row_click": new Callback(this, "onRowClick"),
				},
				
				/* Table fields */
				"fields":
				[
					{
						"name": "row_number",
					},
					{
						"name": "docker_name",
						"label": "Docker name",
						"calculate": var (Dict data)
						{
							Dict item = data.get("item");
							string service_name = item.get("service_name");
							string stack_name = item.get("stack_name");
							return stack_name ~ "_" ~ service_name;
						}
					},
					{
						"name": "docker_image",
						"label": "Docker image",
					},
					{
						"name": "replicas",
						"label": "Replicas",
						"calculate": var (Dict data)
						{
							Dict item = data.get("item");
							string count_total = item.get("count_total");
							string count_work = item.get("count_work");
							return count_work ~ "/" ~ count_total;
						}
					},
					{
						"name": "row_buttons",
						"model": new ModelFactory(
							"Runtime.Widget.Table.TableRowButtonsModel",
							{
								"edit": false,
								"delete": false,
								"buttons":
								[
									{
										"widget_name": "stop_button",
										"content": "Stop",
										"styles": ["danger", "small"],
										"events":
										{
											"click": new Callback(this, "onStopClick"),
										},
									}
								],
							}
						),
					},
				],
			}
		);
		
		/* Add top buttons */
		this.top_buttons = this.addWidget(
			classof RowButtonsModel,
			{
				"widget_name": "top_buttons",
				"buttons":
				[
					new ModelFactory(
						classof RefreshButtonModel,
						{
							"table": this.table,
						}
					),
				],
				"styles": ["top_buttons"],
				"events":
				{
				},
			}
		);
		
		/* Add stop dialog */
		this.stop_dialog = this.addWidget(
			classof ConfirmDialogModel,
			{
				"events":
				{
					"confirm": new Callback(this, "onStopConfirmClick"),
				},
			}
		);
		
		/* Change confirm button */
		ButtonModel confirm_button = this.stop_dialog.buttons.getWidget("confirm_button");
		confirm_button.content = "Stop";
		confirm_button.styles = ["danger"];
	}
	
	
	/**
	 * Build title
	 */
	void buildTitle(RenderContainer container)
	{
		this.layout.setPageTitle("List of services");
	}
	
	
	/**
	 * Row click
	 */
	void onRowClick(Message message)
	{
		this.table.row_selected = message.data.get("row_number");
	}
	
	
	/**
	 * Stop button click
	 */
	void onStopClick(ClickMessage message)
	{
		Dict item = message.data.get("item");
		string service_name = item.get("service_name");
		string stack_name = item.get("stack_name");
		this.stop_dialog.data.set("service_id", item.get("service_id"));
		this.stop_dialog.data.set("docker_name", stack_name ~ "_" ~ service_name);
		this.stop_dialog.title = "Stop service " ~ stack_name ~ "_" ~ service_name ~ "?";
		this.stop_dialog.show();
	}
	
	
	/**
	 * Stop confirm click
	 */
	async void onStopConfirmClick(ClickMessage message)
	{
		int service_id = this.stop_dialog.data.get("service_id");
		
		/* Stop service */
		this.stop_dialog.result.setWaitMessage();
		ApiResult res = await this.layout.callApi({
			"api_name": "app.docker.services::save",
			"method_name": "actionStop",
			"data": {
				"pk": {
					"service_id": service_id,
				},
			}
		});
		
		/* Error message */
		if (not res.isSuccess())
		{
			throw new DialogModelException(res.message);
		}
		
		/* Reload table */
		await this.table.reload();
	}
}