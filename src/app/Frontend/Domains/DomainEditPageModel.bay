/*!
 *  Bayrell Cloud OS
 *
 *  (c) Copyright 2020-2024 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Bayrell.CloudOS.Frontend.Domains;

use Runtime.Callback;
use Runtime.Entity.Factory;
use Runtime.Web.BasePageModel;
use Runtime.Web.ModelFactory;
use Runtime.Web.RenderContainer;
use Runtime.Web.Messages.ClickMessage;
use Runtime.Widget.ButtonModel;
use Runtime.Widget.RowButtonsModel;
use Runtime.Widget.SelectModel;
use Runtime.Widget.Form.FormDeleteStorage;
use Runtime.Widget.Form.FormSubmitModel;
use Runtime.Widget.Form.FormSubmitStorage;
use Runtime.Widget.Table.TableDialogModel;
use Bayrell.CloudOS.Frontend.Domains.DomainEditPage;
use Bayrell.CloudOS.Frontend.Routes.RouteTableModel;


class DomainEditPageModel extends BasePageModel
{
	string component = classof DomainEditPage;
	SelectModel space_id = null;
	FormSubmitModel form = null;
	TableDialogModel table = null;
	RowButtonsModel top_buttons = null;
	
	
	/**
	 * Init widget settings
	 */
	void initWidget(Dict params)
	{
		parent(params);
		
		/* Spaces */
		this.space_id = this.addWidget(
			classof SelectModel,
			{
				"storage": new Factory
				(
					"Runtime.Widget.Table.TableStorage",
					{
						"api_name": "app.workspace::search",
					}
				),
				"widget_name": "space_id",
				"transform": Map (Dict item) => {
					"key": item.get("id"),
					"value": item.get("name"),
				},
			}
		);
		
		/* Add form */
		this.form = this.addWidget(
			classof FormSubmitModel,
			{
				"widget_name": "edit_form",
				"primary_key": ["id"],
				"storage": new Factory
				(
					"Runtime.Widget.Form.FormSaveStorage",
					{
						"api_name": "app.domain::save",
					}
				),
				"pk":
				{
					"id": this.layout.route.matches.get("id"),
				},
				"submit_button":
				{
					"text": "Save",
					"styles": ["primary", "large"],
				},
				"fields":
				[
					{
						"name": "domain_name",
						"label": "Domain name",
						"component": "Runtime.Widget.Input",
						"props":
						{
							"readonly": "true",
						},
					},
					{
						"name": "space_id",
						"label": "Space name",
						"model": this.space_id,
					}
				],
			}
		);
		
		/* Add routes */
		this.routes = this.addWidget(
			classof RouteTableModel,
			{
				"foreign_key":
				{
					"domain_id": this.layout.route.matches.get("id"),
				},
			}
		);
		
		/* Remove domain id */
		this.routes.form.removeField("domain_id");
	}
	
	
	/**
	 * Build title
	 */
	void buildTitle(RenderContainer container)
	{
		string title = "Edit domain";
		if (this.form.item != null)
		{
			title = "Edit domain '" ~ this.form.item.get("domain_name") ~ "'";
		}
		this.layout.setPageTitle(title);
	}
	
	
	/**
	 * Top buttons click
	 */
	void onTopButtonsClick(ClickMessage message)
	{
		if (message.widget.widget_name == "add_button")
		{
			this.table.save_dialog.showAdd();
		}
	}
}