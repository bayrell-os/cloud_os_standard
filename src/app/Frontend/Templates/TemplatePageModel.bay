/*!
 *  Bayrell Cloud OS
 *
 *  (c) Copyright 2020-2024 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Bayrell.CloudOS.Frontend.Templates;

use Runtime.Callback;
use Runtime.Entity.Factory;
use Runtime.Web.BasePageModel;
use Runtime.Web.ModelFactory;
use Runtime.Web.RenderContainer;
use Runtime.Web.Messages.ClickMessage;
use Runtime.Widget.ButtonModel;
use Runtime.Widget.RowButtonsModel;
use Runtime.Widget.Form.FormDeleteStorage;
use Runtime.Widget.Form.FormModel;
use Runtime.Widget.Form.FormSubmitStorage;
use Runtime.Widget.Table.TableDialogModel;
use Bayrell.CloudOS.Frontend.Templates.TemplatePage;


class TemplatePageModel extends BasePageModel
{
	string component = classof TemplatePage;
	FormModel form = null;
	TableDialogModel table = null;
	RowButtonsModel top_buttons = null;
	
	
	/**
	 * Init widget settings
	 */
	void initWidget(Dict params)
	{
		parent(params);
		
		/* Add top buttons */
		this.top_buttons = this.addWidget(
			classof RowButtonsModel,
			{
				"widget_name": "top_buttons",
				"buttons":
				[
					{
						"content": "Add",
						"widget_name": "add_button",
						"href": string () => this.layout.url("app:templates:import"),
						"styles": [
							"success",
						]
					},
				],
				"styles": ["top_buttons"],
			}
		);
		
		/* Add table */
		this.table = this.addWidget(
			classof TableDialogModel,
			{
				"widget_name": "table",
				"get_title": void (Dict params)
				{
					string action = params.get("action");
					Dict item = params.get("item");
					if (action == "add")
					{
						return "Add template";
					}
					if (action == "edit")
					{
						return "Edit template '" ~ item.get("name") ~ "'";
					}
					if (action == "delete")
					{
						return "Delete template '" ~ item.get("name") ~ "'";
					}
					return "";
				},
				"styles": ["border"],
				
				/* Table storage */
				"storage": new Factory
				(
					"Runtime.Widget.Table.TableStorage",
					{
						"api_name": "app.template::search",
					}
				),
				
				/* Set page */
				"page": this.layout.request_query.get("page", 1) - 1,
				
				/* Delete form */
				"delete_form": new ModelFactory(
					classof FormModel,
					{
						"widget_name": "delete_form",
						"primary_key": ["id"],
						"storage": new Factory(
							classof FormDeleteStorage,
							{
								"api_name": "app.template::save"
							}
						),
					}
				),
				
				/* Table fields */
				"fields":
				[
					{
						"name": "row_number",
					},
					{
						"name": "name",
						"label": "Name",
					},
					{
						"name": "uid",
						"label": "UID",
					},
					{
						"name": "row_buttons",
						"model": new ModelFactory("Runtime.Widget.Table.TableRowButtonsModel"),
					},
				],
			}
		);
		
		/* Edit button */
		RowButtonsModel row_buttons = this.table.getWidget("row_buttons");
		ButtonModel edit_button = row_buttons.getWidget("edit_button");
		edit_button.clearListener("click");
		edit_button.href = string (Dict data)
		{
			Dict item = data.get("item");
			return this.layout.url("app:templates:edit", {"id": item.get("id")});
		};
	}
	
	
	/**
	 * Build title
	 */
	void buildTitle(RenderContainer container)
	{
		this.layout.setPageTitle("List of templates");
	}
}