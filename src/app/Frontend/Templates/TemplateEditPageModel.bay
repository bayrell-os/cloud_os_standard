/*!
 *  Bayrell Cloud OS
 *
 *  (c) Copyright 2020-2024 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Bayrell.CloudOS.Frontend.Templates;

use Runtime.Callback;
use Runtime.Entity.Factory;
use Runtime.Web.BasePageModel;
use Runtime.Web.ModelFactory;
use Runtime.Web.RenderContainer;
use Runtime.Web.Messages.ClickMessage;
use Runtime.Widget.ButtonModel;
use Runtime.Widget.RowButtonsModel;
use Runtime.Widget.SelectModel;
use Runtime.Widget.Form.FormModel;
use Runtime.Widget.Form.FormDeleteStorage;
use Runtime.Widget.Form.FormSubmitModel;
use Runtime.Widget.Form.FormSubmitStorage;
use Runtime.Widget.Table.TableDialogModel;
use Bayrell.CloudOS.Frontend.Templates.TemplateEditPage;
use Bayrell.CloudOS.Frontend.Templates.VersionTableModel;


class TemplateEditPageModel extends BasePageModel
{
	string component = classof TemplateEditPage;
	FormSubmitModel form = null;
	TableDialogModel versions = null;
	
	
	/**
	 * Init widget settings
	 */
	void initWidget(Dict params)
	{
		parent(params);
		
		/* Add form */
		this.form = this.addWidget(
			classof FormSubmitModel,
			{
				"widget_name": "form",
				"primary_key": ["id"],
				"storage": new Factory
				(
					"Runtime.Widget.Form.FormSaveStorage",
					{
						"api_name": "app.template::save",
					}
				),
				"pk":
				{
					"id": this.layout.route.matches.get("id"),
				},
				"submit_button":
				{
					"text": "Save",
					"styles": ["primary", "large"],
				},
				"fields":
				[
					{
						"name": "name",
						"label": "Name",
						"component": "Runtime.Widget.Input",
					},
					{
						"name": "uid",
						"label": "UID",
						"component": "Runtime.Widget.Input",
					}
				],
			}
		);
		
		this.versions = this.addWidget(
			classof VersionTableModel,
			{
				"foreign_key":
				{
					"template_id": this.layout.route.matches.get("id"),
				},
			}
		);
	}
	
	
	/**
	 * Build title
	 */
	void buildTitle(RenderContainer container)
	{
		string title = "Item not found";
		if (this.form.load.isSuccess())
		{
			title = "Edit template '" ~ this.form.item.get("name") ~ "'";
		}
		else
		{
			container.response.http_code = 404;
		}
		this.layout.setPageTitle(title);
	}
}