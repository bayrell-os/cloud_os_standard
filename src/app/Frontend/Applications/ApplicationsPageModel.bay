/*!
 *  Bayrell Cloud OS
 *
 *  (c) Copyright 2020-2024 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Bayrell.CloudOS.Frontend.Applications;

use Runtime.Callback;
use Runtime.Entity.Factory;
use Runtime.Web.BasePageModel;
use Runtime.Web.ModelFactory;
use Runtime.Web.RenderContainer;
use Runtime.Web.Messages.ClickMessage;
use Runtime.Widget.ButtonModel;
use Runtime.Widget.RowButtonsModel;
use Runtime.Widget.SelectModel;
use Runtime.Widget.Form.FormDeleteStorage;
use Runtime.Widget.Form.FormModel;
use Runtime.Widget.Form.FormSubmitStorage;
use Runtime.Widget.Table.TableDialogModel;
use Bayrell.CloudOS.Frontend.Applications.ApplicationsPage;
use Bayrell.CloudOS.Frontend.Applications.TableFieldAdmin;


class ApplicationsPageModel extends BasePageModel
{
	string component = classof ApplicationsPage;
	FormModel form = null;
	TableDialogModel table = null;
	RowButtonsModel top_buttons = null;
	int info_row_number = -1;
	
	
	/**
	 * Init widget settings
	 */
	void initWidget(Dict params)
	{
		parent(params);
		
		/* Stacks */
		this.stack_name = this.addWidget(
			classof SelectModel,
			{
				"storage": new Factory
				(
					"Runtime.Widget.Table.TableStorage",
					{
						"api_name": "app.docker.stack::search",
					}
				),
				"widget_name": "stack_name",
				"transform": Map (Dict item) => {
					"key": item.get("stack_name"),
					"value": item.get("stack_name"),
				},
			}
		);
		
		/* Templates */
		this.templates = this.addWidget(
			classof SelectModel,
			{
				"storage": new Factory
				(
					"Runtime.Widget.Table.TableStorage",
					{
						"api_name": "app.template::search",
					}
				),
				"widget_name": "templates",
				"transform": Map (Dict item) => {
					"key": item.get("id"),
					"value": item.get("name") ~ " <" ~ item.get("uid") ~ ">",
				},
			}
		);
		
		/* Versions */
		this.versions = this.addWidget(
			classof SelectModel,
			{
				"widget_name": "versions",
				"storage": new Factory
				(
					"Runtime.Widget.Table.TableStorage",
					{
						"api_name": "app.template.version::search",
					}
				),
				"filter": bool (Dict item)
				{
					int template_id = this.form.item.get("template_id");
					return item.get("template_id") == template_id;
				},
				"transform": Map (Dict item) => {
					"key": item.get("id"),
					"value": item.get("version"),
					"template_id": item.get("template_id"),
				},
			}
		);
		
		/* Add form */
		this.form = this.addWidget(
			classof FormModel,
			{
				"widget_name": "form",
				"primary_key": ["id"],
				"storage": new Factory
				(
					"Runtime.Widget.Form.FormSaveStorage",
					{
						"api_name": "app:applications::save",
					}
				),
				"fields":
				[
					{
						"name": "stack_name",
						"label": "Stack name",
						"model": this.stack_name,
					},
					{
						"name": "name",
						"label": "App name",
						"component": "Runtime.Widget.Input",
					},
					{
						"name": "template_id",
						"label": "Template",
						"model": this.templates,
					},
					{
						"name": "template_version_id",
						"label": "Version",
						"model": this.versions,
					},
				],
			}
		);
		
		/* Add table */
		this.table = this.addWidget(
			classof TableDialogModel,
			{
				"widget_name": "table",
				"get_title": void (Dict params)
				{
					string action = params.get("action");
					Dict item = params.get("item");
					if (action == "add")
					{
						return "Add application";
					}
					if (action == "edit")
					{
						return "Edit application '" ~ static::getApplicationName(item) ~ "'";
					}
					if (action == "delete")
					{
						return "Delete application '" ~ static::getApplicationName(item) ~ "'";
					}
					return "";
				},
				"styles": ["border"],
				
				/* Table storage */
				"storage": new Factory
				(
					"Runtime.Widget.Table.TableStorage",
					{
						"api_name": "app:applications::search",
					}
				),
				
				/* Set page */
				"page": this.layout.request_query.get("page", 1) - 1,
				
				/* Form */
				"add_form": this.form,
				"edit_form": this.form,
				
				/* Delete form */
				"delete_form": new ModelFactory(
					classof FormModel,
					{
						"widget_name": "delete_form",
						"primary_key": ["id"],
						"storage": new Factory(
							classof FormDeleteStorage,
							{
								"api_name": "app:applications::save"
							}
						),
					}
				),
				
				/* Table fields */
				"fields":
				[
					{
						"name": "row_number",
					},
					{
						"name": "service_name",
						"label": "Service name",
						"calculate": string (Dict data) =>
							static::getApplicationName(data.get("item")),
					},
					{
						"name": "status",
						"label": "Status",
						"component": "Runtime.Widget.SelectLabel",
						"props":
						{
							"options": [
								{"key": "0", "value": "STOP"},
								{"key": "1", "value": "RUN"},
							],
						}
					},
					{
						"name": "replicas",
						"label": "Replicas",
						"calculate": string (Dict data)
						{
							Dict item = data.get("item");
							string count_total = item.get("count_total");
							string count_work = item.get("count_work");
							if (count_total === null or count_work === null)
							{
								return "";
							}
							return count_work ~ "/" ~ count_total;
						},
					},
					{
						"name": "admin",
						"label": "Admin",
						"component": classof TableFieldAdmin,
						"model": this,
					},
					{
						"name": "row_buttons",
						"model": new ModelFactory(
							"Runtime.Widget.Table.TableRowButtonsModel",
							{
								"delete": false,
								"buttons":
								[
									{
										"content": "Stop",
										"widget_name": "stop_button",
										"styles": ["danger", "small"],
									},
									{
										"content": "Restart",
										"widget_name": "restart_button",
										"styles": ["default", "small"],
									},
									{
										"content": "Info",
										"widget_name": "info_button",
										"styles": ["default", "small"],
										"events":
										{
											"click": new Callback(this, "onButtonInfoClick"),
										},
									},
								],
							}
						),
					},
				],
			}
		);
		
		/* Add top buttons */
		this.top_buttons = this.addWidget(
			classof RowButtonsModel,
			{
				"widget_name": "top_buttons",
				"styles": ["top_buttons"],
				"buttons":
				[
					new ModelFactory
					(
						"Runtime.Widget.Table.AddButtonModel",
						{
							"table": this.table,
						}
					)
				],
			}
		);
		
		/* Edit button */
		RowButtonsModel row_buttons = this.table.getWidget("row_buttons");
		ButtonModel edit_button = row_buttons.getWidget("edit_button");
		edit_button.clearListener("click");
		edit_button.href = string (Dict data)
		{
			Dict item = data.get("item");
			return this.layout.url("app:applications:edit", {"id": item.get("id")});
		};
	}
	
	
	/**
	 * Button info click
	 */
	void onButtonInfoClick(ClickMessage message)
	{
		this.info_row_number = message.data.get("row_number");
	}
	
	
	/**
	 * Build title
	 */
	void buildTitle(RenderContainer container)
	{
		this.layout.setPageTitle("List of applications");
	}
	
	
	/**
	 * Returns application name
	 */
	static string getApplicationName(Dict item)
	{
		string app_name = item.get("name");
		string stack_name = item.get("stack_name");
		return stack_name ~ "_" ~ app_name;
	}
}