/*!
 *  Bayrell Cloud OS
 *
 *  (c) Copyright 2020-2023 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Bayrell.CloudOS.Frontend.Applications;

use Runtime.ModelProxy;
use Runtime.Web.ApiResult;
use Runtime.Web.Bus;
use Runtime.Widget.TopButtonModel;
use Runtime.Widget.Dialog.DialogModel;
use Runtime.Widget.Form.FormModel;
use Bayrell.CloudOS.Frontend.Applications.ComposeButton;


struct ComposeModel extends TopButtonModel
{
	string name = "";
	string component_name = classof ComposeButton;
	string error_message = "";
	int error_code = 0;
	
	
	DialogModel dialog = new DialogModel{
		"auto_hide": false,
		"is_modal": true,
		"width": "500px",
		"style": "compose",
	};
	
	
	/**
	 * Returns form class
	 */
	string getErrorClass()
	{
		if (this.error_message == "") return "web_form__result--hide";
		if (this.error_code > 0) return "web_form__result--success";
		if (this.error_code < 0) return "web_form__result--error";
		return "";
	}
	
	
	/**
	 * Error
	 */
	ComposeModel setError(string error_message, int error_code = -1) => this.copy
	{
		"error_message": error_message,
		"error_code": error_code,
	};
	
	
	/**
	 * Set api result
	 */
	static void setApiResult(ModelProxy model, string action, ApiResult res)
	{
		if (res == null) return;
		
		if (res.isSuccess() and action == "app_compose")
		{
			ModelProxy data_storage = model.parentProxy().parentProxy().proxy("data");
			
			Dict item = res["data", "item"];
			data_storage.commit("setItem", item);
			
			Dict pk = res["data", "pk"];
			data_storage.commit("setPrimaryKey", pk);
		}
		
		/* Set error */
		model.commit("setError", res.getErrorMessage(), res.getErrorCode());
	}
	
	
	/**
	 * Returns true if error
	 */
	bool isError() => this.error_code < 0;
	
	
	/**
	 * Returns true if success
	 */
	bool isSuccess() => this.error_code > 0;
	
	
	/**
	 * Compose
	 */
	async static ApiResult doCompose(ModelProxy<FormModel> model)
	{
		/* Get form */
		ModelProxy form = model.parentProxy().parentProxy();
		
		/* Get data storage */
		ModelProxy data = form.proxy("data");
		if (not data.call("isReady")) return;
		
		/* Get data storage */
		ModelProxy data = form.proxy("data");
		
		/* Get post data */
		Dict search_data = form.data("search_data");
		Dict post_data = data.call("getItemPostData", search_data);
		post_data <= item <= data.data("item");
		
		/* Before event */
		Dict d = await static::callEvent(form, "app_compose_before", {
			"post_data": post_data,
			"success": true,
		});
		
		if (not d["success"]) return;
		
		/* Send api */
		ApiResult res = await static::callApiCompose(form, d["post_data"]);
		
		/* Set api result */
		data.commit("setApiResult", "app_compose", res);
		form.commit("setApiResult", "app_compose", res);
		model.commit("setApiResult", "app_compose", res);
		
		/* After event */
		Dict d = await static::callEvent(form, "app_compose_after", {
			"api": res,
			"post_data": d["post_data"],
		});
	}
	
	
	/**
	 * Call api compose
	 */
	async static ApiResult callApiCompose(ModelProxy<FormModel> model, Dict post_data)
	{
		string api_name = model.proxy("data").data("api_name") ~ "::compose";
		return await Bus::callApi(api_name, post_data);
	}
	
	
	/**
	 * Stop
	 */
	async static ApiResult doStop(ModelProxy<FormModel> model)
	{
		/* Get form */
		ModelProxy form = model.parentProxy().parentProxy();
		
		/* Get data storage */
		ModelProxy data = form.proxy("data");
		if (not data.call("isReady")) return;
		
		/* Get data storage */
		ModelProxy data = form.proxy("data");
		
		/* Get post data */
		Dict search_data = form.data("search_data");
		Dict post_data = data.call("getItemPostData", search_data);
		
		/* Before event */
		Dict d = await static::callEvent(form, "app_stop_before", {
			"post_data": post_data,
			"success": true,
		});
		
		if (not d["success"]) return;
		
		/* Send api */
		ApiResult res = await static::callApiStop(form, d["post_data"]);
		
		/* Set api result */
		data.commit("setApiResult", "app_stop", res);
		form.commit("setApiResult", "app_stop", res);
		model.commit("setApiResult", "app_stop", res);
		
		/* After event */
		Dict d = await static::callEvent(form, "app_stop_after", {
			"api": res,
			"post_data": d["post_data"],
		});
	}
	
	
	/**
	 * Call api stop
	 */
	async static ApiResult callApiStop(ModelProxy<FormModel> model, Dict post_data)
	{
		string api_name = model.proxy("data").data("api_name") ~ "::stop";
		return await Bus::callApi(api_name, post_data);
	}
	
}