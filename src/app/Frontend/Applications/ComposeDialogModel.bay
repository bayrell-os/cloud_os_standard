/*!
 *  Bayrell Cloud OS
 *
 *  (c) Copyright 2020-2023 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Bayrell.CloudOS.Frontend.Applications;

use Runtime.BaseObject;
use Runtime.Callback;
use Runtime.Serializer;
use Runtime.Web.ApiResult;
use Runtime.Web.BaseModel;
use Runtime.Widget.ButtonModel;
use Runtime.Widget.Dialog.DialogModel;
use Runtime.Widget.Dialog.DialogModel;
use Runtime.Widget.Table.TableModel;
use Bayrell.CloudOS.Frontend.Applications.AppFormModel;
use Bayrell.CloudOS.Frontend.Applications.AppTableModel;
use Bayrell.CloudOS.Frontend.Applications.ComposeDialog;


class ComposeDialogModel extends BaseModel
{
	string action = "";
	string widget_name = "compose_dialog";
	string component = classof ComposeDialog;
	AppFormModel form = null;
	AppTableModel table = null;
	DialogModel dialog = new DialogModel;
	Dict item_pk = null;
	
	
	/**
	 * Constructor
	 */
	void constructor(Map params = null)
	{
		parent(params);
		
		if (params)
		{
			if (params.has("table")) this.table = params.get("table");
			if (params.has("form")) this.form = params.get("form");
		}
		
		/* Setup dialog */
		this.dialog.title = "Compose item";
		this.dialog.buttons.styles.add("align-end");
		
		/* Setup close buttons */
		ButtonModel close_button = this.dialog.buttons.add(new ButtonModel{
			"content": "Close",
			"widget_name": "close_button",
			"styles": [
				"gray"
			],
		});
		close_button.events.add("onClick", new Callback(this, "onCloseButtonClick"));
		
		/* Setup confirm button */
		ButtonModel confirm_button = this.dialog.buttons.add(new ButtonModel{
			"content": "Stop",
			"widget_name": "confirm_button",
			"styles": [
				"danger"
			],
		});
		confirm_button.events.add("onClick", new Callback(this, "onConfirmButtonClick"));
	}
	
	
	/**
	 * On compose
	 */
	async void onCompose(Dict data = null)
	{
		/* Form */
		if (this.form)
		{
			this.action = "compose";
			this.dialog.title = this.form.getPageTitle("compose");
			
			/* Set button label */
			ButtonModel confirm_button = this.dialog.buttons.find("confirm_button");
			confirm_button.content = "Compose";
			
			/* Save item pk */
			Collection keys = this.form.storage.getPrimaryKeys();
			Dict item = this.form.storage.getItem();
			Dict item_pk = item.intersect(keys);
			this.item_pk = Serializer::copy(item_pk);
			
			/* Show dialog */
			this.dialog.result.clear();
			this.dialog.show();
		}
	}
	
	
	/**
	 * On recompose
	 */
	async void onRecompose(Dict data = null)
	{
		/* Table */
		if (this.table)
		{
			int row_number = -1;
			if (data != null and data.has("row_number"))
			{
				row_number = data.get("row_number");
			}
			if (row_number == -1) return;
			
			/* Set item */
			Dict item = this.table.getItemByRowNumber(row_number);
			item = Serializer::copy(item);
			this.form.storage.setItem(item);
			
			/* Set item pk */
			Collection keys = this.form.storage.getPrimaryKeys();
			Dict item_pk = item.intersect(keys);
			this.item_pk = Serializer::copy(item_pk);
			
			/* Set title */
			this.action = "recompose";
			this.dialog.title = this.form.getPageTitle("recompose");
			
			/* Show dialog */
			this.dialog.result.clear();
			this.dialog.show();
		}
	}
	
	
	/**
	 * On stop
	 */
	async void onStop(Dict data = null)
	{
		/* Form */
		if (this.form)
		{
			this.action = "stop";
			this.dialog.title = this.form.getPageTitle("stop");
			
			/* Set button label */
			ButtonModel confirm_button = this.dialog.buttons.find("confirm_button");
			confirm_button.content = "Stop";
			
			/* Save item pk */
			Collection keys = this.form.storage.getPrimaryKeys();
			Dict item = this.form.storage.getItem();
			Dict item_pk = item.intersect(keys);
			this.item_pk = Serializer::copy(item_pk);
			
			/* Show dialog */
			this.dialog.result.clear();
			this.dialog.show();
		}
	}
	
	
	/**
	 * On close button click
	 */
	void onCloseButtonClick()
	{
		this.dialog.hide();
	}
	
	
	/**
	 * On confirm button click
	 */
	async void onConfirmButtonClick()
	{
		if (this.action == "compose")
		{
			this.compose();
		}
		if (this.action == "recompose")
		{
			this.recompose();
		}
		if (this.action == "stop")
		{
			this.stop();
		}
	}
	
	
	/**
	 * Compose service
	 */
	async void compose()
	{
		this.dialog.result.setWaitMessage();
		ApiResult res = await this.layout.callApi({
			"api_name": "app.application::crud",
			"method": "actionCompose",
			"data": {
				"item_pk": this.item_pk,
			}
		});
		this.dialog.result.setApiResult(res);
	}
	
	
	/**
	 * Recompose service
	 */
	async void recompose()
	{
		this.dialog.result.setWaitMessage();
		ApiResult res = await this.layout.callApi({
			"api_name": "app.application::crud",
			"method": "actionRecompose",
			"data": {
				"item_pk": this.item_pk,
			}
		});
		this.dialog.result.setApiResult(res);
	}
	
	
	/**
	 * Stop service
	 */
	async void stop()
	{
		this.dialog.result.setWaitMessage();
		ApiResult res = await this.layout.callApi({
			"api_name": "app.application::crud",
			"method": "actionStop",
			"data": {
				"item_pk": this.item_pk,
			}
		});
		this.dialog.result.setApiResult(res);
	}
}
