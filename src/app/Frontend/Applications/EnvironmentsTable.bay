/*!
 *  Bayrell Cloud OS
 *
 *  (c) Copyright 2020-2024 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Bayrell.CloudOS.Frontend.Applications;

use Runtime.Callback;
use Runtime.Entity.Factory;
use Runtime.Web.BasePageModel;
use Runtime.Web.ModelFactory;
use Runtime.Web.RenderContainer;
use Runtime.Web.Messages.ClickMessage;
use Runtime.Widget.ButtonModel;
use Runtime.Widget.RenderListModel;
use Runtime.Widget.RowButtonsModel;
use Runtime.Widget.SelectModel;
use Runtime.Widget.Form.FormDeleteStorage;
use Runtime.Widget.Form.FormModel;
use Runtime.Widget.Form.FormSubmitStorage;
use Runtime.Widget.Tab.TabsModel;
use Runtime.Widget.Table.TableDialogModel;


class EnvironmentsTable extends RenderListModel
{
	FormModel form = null;
	TableDialogModel table = null;
	RowButtonsModel top_buttons = null;
	
	
	/**
	 * Init widget settings
	 */
	void initWidget(Dict params)
	{
		parent(params);
		
		/* Add form */
		this.form = this.addWidget(
			classof FormModel,
			{
				"widget_name": "form",
				"fields":
				[
					{
						"name": "key",
						"label": "Key",
						"component": "Runtime.Widget.Input",
					},
					{
						"name": "value",
						"label": "Value",
						"component": "Runtime.Widget.Input",
					},
					{
						"name": "enable",
						"label": "Enable",
						"component": "Runtime.Widget.Select",
						"default": "1",
						"props": {
							"options": [
								{"key": "1", "value": "Yes"},
								{"key": "0", "value": "No"},
							],
						},
					},
				],
			}
		);
		
		/* Add table */
		this.table = this.addWidget(
			classof TableDialogModel,
			{
				"widget_name": "table",
				"get_title": void (Dict params)
				{
					string action = params.get("action");
					Dict item = params.get("item");
					if (action == "add")
					{
						return "Add volume";
					}
					if (action == "edit")
					{
						return "Edit volume '" ~ item.get("key") ~ "'";
					}
					if (action == "delete")
					{
						return "Delete volume '" ~ item.get("key") ~ "'";
					}
					return "";
				},
				"styles": ["border"],
				
				/* Form */
				"add_form": this.form,
				"edit_form": this.form,
				"delete_form": this.form,
				
				/* Table fields */
				"fields":
				[
					{
						"name": "row_number",
					},
					{
						"name": "key",
						"label": "Key",
					},
					{
						"name": "value",
						"label": "Value",
					},
					{
						"name": "enable",
						"label": "Enable",
						"component": "Runtime.Widget.SelectLabel",
						"props": {
							"options": [
								{"key": "1", "value": "Yes"},
								{"key": "0", "value": "No"},
							],
						},
					},
					{
						"name": "row_buttons",
						"model": new ModelFactory("Runtime.Widget.Table.TableRowButtonsModel"),
					},
				]
			}
		);
		
		/* Add top buttons */
		this.top_buttons = this.addWidget(
			classof RowButtonsModel,
			{
				"widget_name": "top_buttons",
				"styles": ["top_buttons"],
				"buttons":
				[
					new ModelFactory
					(
						"Runtime.Widget.Table.AddButtonModel",
						{
							"table": this.table,
						}
					)
				],
			}
		);
		
		/* Add render list */
		this.addItem(this.top_buttons);
		this.addItem(this.table);
	}
}