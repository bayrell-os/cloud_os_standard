<!--
 *  Bayrell Cloud OS
 *
 *  (c) Copyright 2020-2024 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
-->

<class name="Bayrell.CloudOS.Frontend.Applications.AppForm"
	extends="Runtime.Widget.Form.Form"
>

<use name="Runtime.Web.BaseModel" />
<use name="Runtime.Widget.Input" component="true" />
<use name="Runtime.Widget.TextArea" component="true" />
<use name="Runtime.Widget.CodeMirror.CodeMirror" component="true" />
<use name="Runtime.Widget.Tab.Tab" component="true" />
<use name="Runtime.Widget.Tab.Tabs" component="true" />


<style>
.app %(TextArea)widget_textarea{
	min-height: 500px;
}
.app %(CodeMirror)CodeMirror{
	min-height: 500px;
}
.app_variables{
	margin-right: 20px;
}
.app_total_patches{
	display: flex;
}
.app_total_patches__items{
	width: 200px;
	padding-right: 20px;
}
.app_total_patches__item{
	padding: 5px 10px;
	cursor: pointer;
}
.app_total_patches__item--active{
    background-color: var(--widget-color-selected);
    color: var(--widget-color-selected-text);
}
.app_total_patches__content{
	width: calc(100% - 200px);
}
</style>


<template name="renderVariables">
	%set Vector variables = this.model.storage.item.get("variables");
	<div class="app_variables">
		%if (variables != null)
		{
			%for (int i=0; i<variables.count(); i++)
			{
				%set Map variable = variables.get(i);
				%set Map variable_name = variable.get("name");
				%set Map variable_label = variable.get("label");
				%set Map variable_value = variable.get("value");
				%if (
					variable_name != "_var_app_name_" and
					variable_name != "_var_service_name_"
				)
				{
					<div class="widget_form_group__row h-1808"
						@key={{ variable_name }} data-name={{ variable_name }}
					>
						<label class="widget_form_group__row_label h-1808">{{ variable_label }}</label>
						<Input name={{ variable_name }}
							value={{ variable_value }}
							@event:onChange={{
								void (var e) use (i, variable_name) =>
									this.onChangeVariable(i, variable_name, e.target.value)
							}}
						/>
					</div>
				}
			}
		}
	</div>
</template>


<template name="renderPatches">
	%set Vector patches = this.model.storage.item.get("patches");
	<div class="app_total_patches">
		<div class="app_total_patches__items">
		%if (patches != null)
		{
			%for (int i=0; i<patches.count(); i++)
			{
				%set Dict item = patches.get(i);
				<div class="app_total_patches__item" @key={{ i }} data-index={{ i }}
					class={{ this.patch_selected == i ? "app_total_patches__item--active" : "" }}
					@event:onClick={{ this.onPatchSelect(i) }}
				>
					{{ item.get("name") }}
				</div>
			}
		}
		</div>
		<div class="app_total_patches__content">
		%if (this.patch_selected >= 0 and this.patch_selected < patches.count())
		{
			%set Dict item = patches.get(this.patch_selected);
			<CodeMirror @ref="code_mirror_total_patches"
				value={{ item.get("content") }} readonly="true" height="500px"
			/>
		}
		</div>
	</div>
</template>


<template name="renderWidgetsInfo">
	
	%set string component = "";
	%set BaseModel widget = null;
	
	<h2>Modificators</h2>
	<div class="d-flex">
		<div class="w-50">
			%render this.renderVariables();
		</div>
		<div class="w-50">
			%set widget = this.model.getWidget('modificators');
			%set component = widget.component;
			<{component} @model={{ widget }} />
		</div>
	</div>
	<div class="d-flex">
		<div class="w-50">
			<h2>Environments</h2>
			%set widget = this.model.getWidget('environments');
			%set component = widget.component;
			<{component} @model={{ widget }} />
		</div>
		<div class="w-50">
			<h2>Volumes</h2>
			%set widget = this.model.getWidget('volumes');
			%set component = widget.component;
			<{component} @model={{ widget }} />
		</div>
	</div>
	
</template>


<template name="renderForm">
	%if (this.model.action == "edit")
	{
		<div class="app">
			<Tabs @model={{ this.model.tabs }} @event:onSelect={{ this.onTabSelect }}>
				<Tab name="info" @model={{ this.model.tabs }}>
					<form method="POST"
						enctype="multipart/form-data" onsubmit="return false;"
					>
						%render this.renderContent();
					</form>
					%render this.renderWidgetsInfo();
				</Tab>
				<Tab name="custom_patch" @model={{ this.model.tabs }}>
					<CodeMirror
						@event:onValueChanged={{ this.onCodeMirrorValueChanged("custom_patch") }}
						value={{ this.model.storage.item.get("custom_patch") }}
						height="500px"
					/>
				</Tab>
				<Tab name="total_patches" @model={{ this.model.tabs }}>
					%render this.renderPatches();
				</Tab>
				<Tab name="result" @model={{ this.model.tabs }}>
					<CodeMirror
						@ref="code_mirror_result"
						@event:onValueChanged={{ this.onCodeMirrorValueChanged("content") }}
						value={{ this.model.storage.item.get("content") }}
						readonly="true" height="500px"
					/>
				</Tab>
				<Tab name="yaml" @model={{ this.model.tabs }}>
					<CodeMirror
						@ref="code_mirror_yaml"
						@event:onValueChanged={{ this.onCodeMirrorValueChanged("yaml") }}
						value={{ this.model.storage.item.get("yaml") }}
						readonly="true" height="500px"
					/>
				</Tab>
			</Tabs>
		</div>
	}
	%else
	{
		%render parent();
	}
</template>


<script>

int patch_selected = -1;

/* Tab select */
void onTabSelect(string tab_name)
{
	#ifcode JAVASCRIPT then
	
	var code_mirror = this.getRef("code_mirror_" + tab_name);
	if (code_mirror)
	{
		/*this.$nextTick(()=>{
			code_mirror.instance.refresh();
		});*/
	}
	
	#endif
}


void onChangeVariable(int i, string variable_name, string value)
{
	Vector variables = this.model.storage.item.get('variables');
	Map variable = variables.get(i);
	variable.set("value", value);
}


void onCodeMirrorValueChanged(string api_name)
{
	return void (string value) use (api_name)
	{
		if (api_name == "custom_patch") this.model.storage.item.set("custom_patch", value);
		/*if (api_name == "content") this.model.storage.item.set("content", value);
		if (api_name == "yaml") this.model.storage.item.set("yaml", value);*/
	};
}


void onPatchSelect(int index)
{
	return void (var e) use (index)
	{
		this.patch_selected = index;
	}
}

</script>


</class>