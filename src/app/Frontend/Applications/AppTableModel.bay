/*!
 *  Bayrell Cloud OS
 *
 *  (c) Copyright 2020-2024 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Bayrell.CloudOS.Frontend.Applications;

use Runtime.Callback;
use Runtime.DateTime;
use Runtime.Widget.Button;
use Runtime.Widget.ButtonModel;
use Runtime.Widget.RenderListModel;
use Runtime.Widget.RowButtons;
use Runtime.Widget.RowButtonsModel;
use Runtime.Widget.SelectLabel;
use Runtime.Widget.Crud.CrudApiStorage;
use Runtime.Widget.Table.RefreshButtonModel;
use Runtime.Widget.Table.SaveDialogModel;
use Runtime.Widget.Table.TableDialogModel;
use Bayrell.CloudOS.Frontend.Applications.AppFormModel;
use Bayrell.CloudOS.Frontend.Applications.AppTable;
use Bayrell.CloudOS.Frontend.Applications.ComposeDialogModel;
use Bayrell.CloudOS.Frontend.Applications.TableFieldAdmin;
use Runtime.Widget.Tab.TabsModel;


class AppTableModel extends TableDialogModel
{
	string component = classof AppTable;
	TabsModel tabs = null;	
	
	
	/**
	 * Create data storage
	 */
	CrudApiStorage createDataStorage() => new CrudApiStorage{
		"layout": this.layout,
		"class_name": "app.application",
		"primary_keys": ["id"],
	};
	
	
	/**
	 * Init widget settings
	 */
	void initWidget()
	{
		/* Create form */
		AppFormModel form = this.addWidget(classof AppFormModel);
		
		parent();
		
		/* Create compose wiget */
		ComposeDialogModel compose_dialog = this.addWidget(
			classof ComposeDialogModel,
			{
				"table": this,
				"form": form,
			}
		);
		this.render_list.addItem(compose_dialog);
		
		/* Row number */
		this.addField({
			"name": "row_number",
		});
		
		 /* Field replicas */
		this.addField({
			"label": "Service name",
			"name": "service_name",
		});
		
		/* Field status */
		this.addField({
			"label": "Status",
			"name": "status",
			"props":
			{
				"options": [
					{"label": "STOP", "value": "0"},
					{"label": "RUN", "value": "1"},
				],
			}
			"component": classof SelectLabel,
		});
		
		/* Field replicas */
		string status = this.layout.request_query.get("status", "");
		if (status != "stop")
		{
			this.addField({
				"label": "Replicas",
				"name": "replicas",
			});
		
			/* Field admin */
			this.addField({
				"label": "Admin",
				"name": "admin",
				"component": classof TableFieldAdmin,
				"model": this,
			});
		}
		
		/* Row buttons */
		this.addField({
			"name": "row_buttons",
			"model": this.row_buttons,
		});
		
		/* Edit button */
		ButtonModel edit_button = this.row_buttons.getWidget("edit_button");
		edit_button.href = string (Dict data)
		{
			int row_number = data.get("row_number");
			Dict item = this.getItemByRowNumber(row_number);
			return this.layout.url("app:applications:edit", {"id":item.get("id")});
		};
		edit_button.events.clear("onClick");
		
		/* Compose buttons */
		string status = this.layout.request_query.get("status", "");
		if (status != "stop")
		{
			/* Recompose button */
			ButtonModel recompose_button = this.row_buttons.addWidget(
				classof ButtonModel,
				{
					"content": "Recompose",
					"widget_name": "recompose_button",
					"styles": [
						"default",
						"small",
					],
				}
			);
			
			/* Recompose onClick */
			ComposeDialogModel compose_dialog = this.getWidget("compose_dialog");
			recompose_button.events.add("onClick", new Callback(compose_dialog, "onRecompose"));
			
			ButtonModel show_status_button = this.row_buttons.addWidget(
				classof ButtonModel,
				{
					"content": "Status",
					"widget_name": "show_status_button",
					"styles": [
						"default",
						"small",
					],
				}
			);
			show_status_button.events.add("onClick", new Callback(this, "onShowServiceInfo"));
		}
		
		/* Refresh button */
		ButtonModel refresh_button = this.top_buttons.addWidget(
			classof RefreshButtonModel,
			{
				"layout": this.layout,
				"table": this,
			}
		);
		
		/* Add tabs */
		this.tabs = this.addWidget(
			classof TabsModel,
				{
				"active": "run",
				"tabs": [
					{
						"name": "run",
						"label": "Run",
						"href": this.layout.url("app:applications:index", {"status": "run"}),
					},
					{
						"name": "stop",
						"label": "Stopped",
						"href": this.layout.url("app:applications:index", {"status": "stop"}),
					}
				],
			}
		);
		
		/* Filter status */
		string status = this.layout.request_query.get("status", "");
		if (status == "stop")
		{
			this.tabs.active = "stop";
			this.storage.setPostData("status", "stop");
		}
		else
		{
			this.storage.setPostData("status", "run");
		}
		
		/* Set form result */
		form.show_result = true;
		/*
		SaveDialogModel save_dialog = this.getWidget("save_dialog");
		save_dialog.dialog.result = form.storage.result;
		*/
	}
	
	
	/**
	 * Add compose buttons
	 */
	Map addComposeButtons()
	{
		/* Row buttons */
		RowButtonsModel row_buttons = new RowButtonsModel();
		
		this.addRecomposeButton(row_buttons);
		
		/* Add buttons */
		Map field = this.addField({
			"name": "compose_buttons",
			"component": classof RowButtons,
			"model": row_buttons,
		});
		
		return field;
	}
	
	
	/**
	 * Add field row buttons
	 */
	Map addFieldRowButtons()
	{
		string status = this.layout.request_query.get("status", "");
		
		/* Row buttons */
		RowButtonsModel row_buttons = new RowButtonsModel();
		
		this.addEditFieldRowButtons(row_buttons);
		if (status != "stop")
		{
			this.addShowStatusButton(row_buttons);
		}
		this.addDeleteFieldRowButtons(row_buttons);
		
		/* Add buttons */
		Map field = this.addField({
			"name": "row_buttons",
			"component": classof RowButtons,
			"model": row_buttons,
		});
		
		return field;
	}
	
	
	/**
	 * Returns item value
	 */
	var getItemValue(Map item, string field_name)
	{
		if (field_name == "service_name")
		{
			string app_name = item.get("name");
			string stack_name = item.get("stack_name");
			return stack_name ~ "_" ~ app_name;
		}
		else if (field_name == "replicas")
		{
			string count_total = item.get("count_total");
			string count_work = item.get("count_work");
			if (count_total === null or count_work === null)
			{
				return "";
			}
			return count_work ~ "/" ~ count_total;
		}
		return parent(item, field_name);
	}
	
	
	int service_info_row_number = -1;
	
	
	/**
	 * Show service info
	 */
	void onShowServiceInfo(Dict data)
	{
		this.service_info_row_number = data.get("row_number");
	}
	
	
	/**
	 * Returns service info item
	 */
	Dict getServiceInfo() => this.storage.getItemByRowNumber(this.service_info_row_number);
	
	
	/**
	 * Update docker tasks
	 */
	Vector updateDockerTasks(Vector docker_tasks)
	{
		if (docker_tasks == null) return null;
		docker_tasks = docker_tasks.copy();
		
		for (int i=0; i<docker_tasks.count(); i++)
		{
			Map task = docker_tasks[i].copy();
			
			DateTime CreatedAt = DateTime::fromString(rs::substr(task.get("CreatedAt"), 0, 19));
			DateTime UpdatedAt = DateTime::fromString(rs::substr(task.get("UpdatedAt"), 0, 19));
			
			CreatedAt.tz = "UTC";
			UpdatedAt.tz = "UTC";
					
			task.set("CreatedAt", CreatedAt);
			task.set("UpdatedAt", UpdatedAt);
			
			docker_tasks.set(i, task);
		}
		
		docker_tasks = docker_tasks.sort(
			int (Dict a, Dict b)
			{
				int time_a = a.get("UpdatedAt").getTimestamp();
				int time_b = b.get("UpdatedAt").getTimestamp();
				return time_b - time_a;
			}
		);
		
		return docker_tasks;
	}
	
}