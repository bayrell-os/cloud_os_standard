/*!
 *  Bayrell Cloud OS
 *
 *  (c) Copyright 2020-2023 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Bayrell.CloudOS.Frontend.Applications;

use Runtime.Callback;
use Runtime.Widget.Button;
use Runtime.Widget.ButtonModel;
use Runtime.Widget.RenderListModel;
use Runtime.Widget.RowButtons;
use Runtime.Widget.RowButtonsModel;
use Runtime.Widget.SelectLabel;
use Runtime.Widget.Crud.CrudApiStorage;
use Runtime.Widget.Table.RefreshButtonModel;
use Runtime.Widget.Table.TableDialogModel;
use Bayrell.CloudOS.Frontend.Applications.AppFormModel;
use Bayrell.CloudOS.Frontend.Applications.AppTable;
use Bayrell.CloudOS.Frontend.Applications.ComposeDialogModel;
use Bayrell.CloudOS.Frontend.Applications.TableFieldAdmin;
use Runtime.Widget.Tab.TabsModel;


class AppTableModel extends TableDialogModel
{
	string component = classof AppTable;
	TabsModel tabs = null;
	
	
	/**
	 * Create data storage
	 */
	CrudApiStorage createDataStorage() => new CrudApiStorage{
		"layout": this.layout,
		"class_name": "app.application",
		"primary_keys": ["id"],
	};
	
	
	/**
	 * Init styles
	 */
	void initStyles()
	{
		this.styles.add("border");
	}
	
	
	/**
	 * Init table widgets
	 */
	void initWidgets()
	{
		/* Create form */
		AppFormModel form = new AppFormModel{ "parent_widget": this };
		
		parent();
		
		/* Get render list widget */
		RenderListModel render_list = this.getWidget("render_list");
		
		/* Create compose wiget */
		ComposeDialogModel compose_dialog = new ComposeDialogModel{
			"parent_widget": this,
		};
		render_list.addRender(compose_dialog);
		
		/* Add tabs */
		this.tabs = new TabsModel{
			"active": "run",
			"tabs": [
				{
					"name": "run",
					"label": "Run",
					"href": this.layout.url("app:applications:index", {"status": "run"}),
				},
				{
					"name": "stop",
					"label": "Stopped",
					"href": this.layout.url("app:applications:index", {"status": "stop"}),
				}
			],
		};
		
		/* Filter status */
		string status = this.layout.request_query.get("status", "");
		if (status == "stop")
		{
			this.tabs.active = "stop";
			this.storage.setPostData("status", "stop");
		}
		else
		{
			this.storage.setPostData("status", "run");
		}
		
		/* Set page */
		this.storage.setPage(this.layout.request_query.get("page", 1));
	}
	
	
	/**
	 * Init fields
	 */
	void initFields()
	{
		/* Row number */
		this.addField({
			"name": "row_number",
		});
		
		 /* Field replicas */
		this.addField({
			"label": "Service name",
			"name": "service_name",
		});
		
		/* Field status */
		this.addField({
			"label": "Status",
			"name": "status",
			"props":
			{
				"options": [
					{"label": "STOP", "value": "0"},
					{"label": "RUN", "value": "1"},
				],
			}
			"component": classof SelectLabel,
		});
		
        /* Field replicas */
		string status = this.layout.request_query.get("status", "");
		if (status != "stop")
		{
			this.addField({
				"label": "Replicas",
				"name": "replicas",
			});
		}
        
        /* Field admin */
		this.addField({
			"label": "Admin",
			"name": "admin",
			"component": classof TableFieldAdmin,
			"model": this,
		});
        
		/* Row buttons */
		this.addFieldRowButtons();
	}
	
	
	/**
	 * Init buttons
	 */
	void initButtons()
	{
		parent();
		
		/* Refresh button */
		ButtonModel refresh_button = this.top_buttons.add(new RefreshButtonModel{
			"layout": this.layout,
			"table": this,
		});
		
		/*this.top_buttons.styles.add("no-gap");*/
	}
	
	
	/**
	 * Add edit field row buttons
	 */
	ButtonModel addEditFieldRowButtons(RowButtonsModel row_buttons)
	{
		ButtonModel edit_button = row_buttons.add(new ButtonModel{
			"content": "Edit",
			"styles": [
				"default",
				"small",
			],
			"href": string (Dict data)
			{
				int row_number = data.get("row_number");
				Dict item = this.getItemByRowNumber(row_number);
				return this.layout.url("app:applications:edit", {"id":item.get("id")});
			},
		});
		return edit_button;
	}
	
	
	/**
	 * Returns item value
	 */
	var getItemValue(Map item, string field_name)
	{
		if (field_name == "service_name")
		{
			string app_name = item.get("name");
			string stack_name = item.get("stack_name");
			return stack_name ~ "_" ~ app_name;
		}
		else if (field_name == "replicas")
		{
			string count_total = item.get("count_total");
			string count_work = item.get("count_work");
			if (count_total === null or count_work === null)
			{
				return "";
			}
			return count_total ~ "/" ~ count_work;
		}
		return parent(item, field_name);
	}
}