/*!
 *  Bayrell Cloud OS
 *
 *  (c) Copyright 2020-2023 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Bayrell.CloudOS.Frontend.Applications;

use Runtime.Callback;
use Runtime.Widget.Button;
use Runtime.Widget.ButtonModel;
use Runtime.Widget.RenderListModel;
use Runtime.Widget.RowButtons;
use Runtime.Widget.RowButtonsModel;
use Runtime.Widget.SelectLabel;
use Runtime.Widget.Show;
use Runtime.Widget.ShowModel;
use Runtime.Widget.Crud.CrudApiStorage;
use Runtime.Widget.Table.RefreshButtonModel;
use Runtime.Widget.Table.TableModel;
use Bayrell.CloudOS.Frontend.Applications.ComposeDialogModel;


class AppTableModel extends TableModel
{	
	/**
	 * Create data storage
	 */
	CrudApiStorage createDataStorage() => new CrudApiStorage(this.layout, "app.application");
	
	
	/**
	 * Init styles
	 */
	void initStyles()
	{
		this.styles.add("border");
	}
	
	
	/**
	 * Init table widgets
	 */
	void initWidgets()
	{
		parent();
		
		/* Get render list widget */
		RenderListModel render_list = this.getWidget("render_list");
		
		/* Create compose wiget */
		ComposeDialogModel compose_dialog = new ComposeDialogModel{
			"parent_widget": this,
		};
		render_list.addRender(compose_dialog);
	}
	
	
	/**
	 * Init fields
	 */
	void initFields()
	{
		/* Row number */
		this.addField({
			"name": "row_number",
		});
		
		 /* Field replicas */
		this.addField({
			"label": "Service name",
			"name": "service_name",
		});
		
		/* Field status */
		this.addField({
			"label": "Status",
			"name": "status",
			"props":
			{
				"options": [
					{"label": "STOP", "value": "0"},
					{"label": "RUN", "value": "1"},
				],
			}
			"component": classof SelectLabel,
		});
		
        /* Field replicas */
		this.addField({
			"label": "Replicas",
			"name": "replicas",
		});
        
        /* Field admin */
		this.addField({
			"label": "Admin",
			"name": "admin",
			"component": classof Show,
			"model": new ShowModel{
				"component": classof Button,
				"model": new ButtonModel{
					"content": "Admin",
					"styles": [
						"default",
						"small",
					],
					"href": string (Dict data)
					{
						return "";
					},
				},
				"condition": string (Dict data)
				{
					int row_number = (data != null and data.has("row_number"))
						? data.get("row_number")
						: -1
					;
					
					Dict item = this.getItemByRowNumber(row_number);
					if (item == null) return false;
					
					int status = (int)item.get("status");
					if (status == 0) return false;
					
					int is_admin = (int)item.get("is_admin");
					if (is_admin != 1) return false;
					
					return true;
				},
			},
		});
        
		/* Row buttons */
		this.addFieldRowButtons();
	}
	
	
	/**
	 * Init top buttons
	 */
	void initTopButtons()
	{
		/* Refresh button */
		ButtonModel refresh_button = this.top_buttons.add(new RefreshButtonModel{
			"table": this,
		});
	}
	
	
	/**
	 * Returns item value
	 */
	var getItemValue(Map item, string field_name)
	{
		if (field_name == "service_name")
		{
			string app_name = item.get("name");
			string stack_name = item.get("stack_name");
			return stack_name ~ "_" ~ app_name;
		}
		else if (field_name == "replicas")
		{
			string count_total = item.get("count_total");
			string count_work = item.get("count_work");
			if (count_total == null or count_work == null)
			{
				return "";
			}
			return count_total ~ "/" ~ count_work;
		}
		return parent(item, field_name);
	}
}