/*!
 *  Bayrell Cloud OS
 *
 *  (c) Copyright 2020-2024 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Bayrell.CloudOS.Frontend.Applications;

use Runtime.Callback;
use Runtime.Web.BaseObject;
use Runtime.Web.BaseModel;
use Runtime.Widget.Select;
use Runtime.Widget.SelectLabel;
use Runtime.Widget.Crud.CrudProxyStorage;
use Runtime.Widget.Form.FormModel;
use Runtime.Widget.Table.TableDialogModel;


class AppVolumesTableModel extends TableDialogModel
{
	string widget_name = "volumes";
	
	
	/**
	 * Create data storage
	 */
	BaseObject createDataStorage() => new CrudProxyStorage{
		"layout": this.layout,
		"primary_keys": ["key"],
		"container": this.parent_widget.storage,
		"path": ["item", "volumes"],
	};
	
	
	/**
	 * Init widget settings
	 */
	void initWidget()
	{
		/* Create form */
		FormModel form = this.addWidget(
			classof FormModel,
			{
				"storage": this.createDataStorage(),
			}
		);
		
		parent();
		
		/* Row number */
		this.addField({
			"name": "row_number",
		});
		
		/* Add fields */
		this.addWidgetFields(this);
		this.addWidgetFields(form);
		
		/* Row buttons */
		this.addField({
			"name": "row_buttons",
			"model": this.row_buttons,
		});
	}
	
	
	/**
	 * Add fields
	 */
	void addWidgetFields(BaseModel widget)
	{
		/* Field source */
		widget.addField({
			"label": "Source",
			"name": "key",
		});
		
		/* Field mount point */
		widget.addField({
			"label": "Mount point",
			"name": "value",
		});
		
		/* Field enable */
		widget.addField({
			"label": "Enable",
			"name": "enable",
			"props": {
				"options": [
					{"label": "Yes", "value": "1"},
					{"label": "No", "value": "0"},
				],
			},
			"component": widget == this ? classof SelectLabel : classof Select,
		});
	}
	
	
	/**
	 * Returns item value
	 */
	var getItemValue(Map item, string field_name)
	{
		return parent(item, field_name);
	}
}