/*!
 *  Bayrell Cloud OS
 *
 *  (c) Copyright 2020-2023 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Bayrell.CloudOS.Frontend.Applications;

use Runtime.Callback;
use Runtime.ModelProxy;
use Runtime.Web.BaseModel;
use Runtime.Web.BaseRoute;
use Runtime.Web.Layout;
use Runtime.Web.RouteInfo;
use Runtime.Web.Events.MouseClickEvent;
use Runtime.Widget.Crud.CrudDialogModel;
use Runtime.Widget.Crud.CrudWidget;
use Runtime.Widget.Form.FormModel;
use Runtime.Widget.Table.TableDialogModel;
use Runtime.Widget.Table.TableModel;
use Runtime.Widget.Button;
use Runtime.Widget.FieldInfo;
use Runtime.Widget.FieldList;
use Runtime.Widget.Label;
use Runtime.Widget.Select;
use Runtime.Widget.SelectLabel;


struct AppModCrudModel extends CrudWidget
{
	/**
	 * Fields
	 */
	pure static Dict fields(string type) =>
	{
		"row_number": new FieldInfo{
			"name": "row_number",
		},
		"modificator_uid": new FieldInfo{
			"label": "UID",
			"name": "modificator_uid",
			"component": classof Label,
		},
		"modificator_id": new FieldInfo{
			"label": "Name",
			"name": "modificator_id",
			"options": [],
			"component": type == "form" ? classof Select : classof SelectLabel,
		},
		"modificator_name": new FieldInfo{
			"label": "Name",
			"name": "modificator_name",
			"component": classof Label,
		},
		"modificator_version": new FieldInfo{
			"label": "Version",
			"name": "modificator_version",
			"component": classof Label,
		},
		"modificator_priority": new FieldInfo{
			"label": "Priority",
			"name": "modificator_priority",
			"component": classof Label,
		},
		"row_buttons": new FieldInfo{
			"name": "row_buttons",
		},
	};
	
	
	/**
	 * Api name
	 */
	pure static Dict getApiName(string type) => "app.application.modificator";
	
	
	/**
	 * Primary keys
	 */
	pure static Collection getPrimaryKeys() => ["app_id", "modificator_id"];
	
	
	/**
	 * Factory table
	 */
	static TableModel createTableModel(ModelProxy<BaseModel> model, ModelProxy<Layout> layout)
		=> new TableDialogModel{};
	
	
	/**
	 * Init widget
	 */
	async static void initWidget(ModelProxy<CrudWidget> model, ModelProxy<Layout> layout)
	{
		model.commit("setAction", "dialog");
		await parent::initWidget(model, layout);
	}
	
	
	/**
	 * Init table
	 */
	async static void initTableWidget(
		ModelProxy<CrudWidget> model,
		ModelProxy<TableModel> table,
		ModelProxy<Layout> layout
	)
	{
		await parent::initTableWidget(model, table, layout);
		
		/* Set fields list */
		ModelProxy<FieldList> fields = table.proxy("fields");
		fields.commit("setFieldsList", [
			"row_number",
			"modificator_name",
			"modificator_priority",
			"row_buttons",
		]);
		
		/* Row buttons */
		fields.commit("editField", new FieldInfo{
			"name": "row_buttons",
			"render_method": new Callback{
				"obj": static::getClassName(), "name": "renderRowButtons"
			},
		});
		
		/* Add components */
		layout.commit("addComponent", classof Label);
		layout.commit("addComponent", classof SelectLabel);
	}
	
	
	/**
	 * Init form
	 */
	async static void initFormWidget(
		ModelProxy<CrudWidget> model,
		ModelProxy<FormModel> form,
		ModelProxy<Layout> layout
	)
	{
		await parent::initFormWidget(model, form, layout);
		
		/* Set fields list */
		ModelProxy<FieldList> fields = form.proxy("fields");
		fields.commit("setFieldsList", [
			"modificator_id",
		]);
		
		/* Add modificator dictionary */
		fields.commit("addDictionaryField", {
			"from": "modificators",
			"to": "modificator_id",
			"option": new Callback(static::getClassName(), "getModificatorOption"),
		});
		
		/* Add components */
		layout.commit("addComponent", classof Select);
	}
	
	
	/**
	 * Dictionary modificator
	 */
	static Dict getModificatorOption(ModelProxy model, Dict item) =>
	{
		"label": item["name"],
		"value": item["id"]
	};
	
	
	/**
	 * Render row buttons
	 */
	static html renderRowButtons(int row_number, FieldInfo field, Dict item)
	{
		<div class="web_table__td_row_buttons">
			<Button type="danger small"
				@event:MouseClickEvent="onDeleteClick" data-item={{ item }}>Delete</Button>
		</div>
	}
	
	
	/**
	 * Get names
	 */
	string getPageTitle(string action)
	{
		if (action == "name")
		{
			return "modificator";
		}
		if (action == "names")
		{
			return "modificators";
		}
		else if (action == "item_name")
		{
			Dict item = this.getWidget("form").data.item;
			return item["modificator_name"];
		}
		return parent::getPageTitle(action);
	}
}