/*!
 *  Bayrell Cloud OS
 *
 *  (c) Copyright 2020-2023 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Bayrell.CloudOS.Components.Applications;

use Runtime.DateTime;
use Runtime.ModelProxy;
use Runtime.Web.BaseModel;
use Bayrell.CloudOS.Components.Applications.ServiceInfoComponent;


struct ServiceInfo extends BaseModel
{
	string widget_name = "service_info";
	string component_name = classof ServiceInfoComponent;
	Dict item = null;
	Collection tasks = null;
	
	
	/**
	 * Set item
	 */
	ServiceInfo setItem(Dict item) => this.clone{
		"item": item,
	};
	
	
	/**
	 * Set tasks
	 */
	ServiceInfo setTasks(Collection tasks) => this.clone{
		"tasks": tasks,
	};
	
	
	/**
	 * Update service
	 */
	async static void updateService(ModelProxy model, Dict item)
	{
		Vector docker_tasks = item["docker_tasks"];
		
		if (docker_tasks == null)
		{
			model.commit("setItem", null);
			model.commit("setTasks", null);
		}
		
		docker_tasks = docker_tasks.toVector();
		
		for (int i=0; i<docker_tasks.count(); i++)
		{
			Dict task = docker_tasks[i];
			
			DateTime CreatedAt = DateTime::from(task.get("CreatedAt"));
			DateTime UpdatedAt = DateTime::from(task.get("UpdatedAt"));
			
			CreatedAt <= tz <= "UTC";
			UpdatedAt <= tz <= "UTC";
			
			docker_tasks <= { i } <= CreatedAt <= CreatedAt;
			docker_tasks <= { i } <= UpdatedAt <= UpdatedAt;
		}
		
		docker_tasks = docker_tasks.sort(
			int (Dict a, Dict b)
			{
				int time_a = a.get("UpdatedAt").getTimestamp();
				int time_b = b.get("UpdatedAt").getTimestamp();
				return time_b - time_a;
			}
		);
		
		model.commit("setItem", item);
		model.commit("setTasks", docker_tasks.toCollection());
	}
	
}