/*!
 *  Bayrell Cloud OS
 *
 *  (c) Copyright 2020-2024 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Bayrell.CloudOS.Frontend.Applications;

use Runtime.Callback;
use Runtime.Widget.ButtonModel;
use Runtime.Widget.Input;
use Runtime.Widget.RenderListModel;
use Runtime.Widget.RowButtons;
use Runtime.Widget.RowButtonsModel;
use Runtime.Widget.Select;
use Runtime.Widget.Crud.CrudApiStorage;
use Runtime.Widget.Crud.Dictionary;
use Runtime.Widget.Form.FormModel;
use Runtime.Widget.Form.SaveButtonModel;
use Runtime.Widget.Tab.TabsModel;
use Runtime.Widget.Table.TableDialogModel;
use Bayrell.CloudOS.Frontend.Applications.AppEnvironmentsTableModel;
use Bayrell.CloudOS.Frontend.Applications.AppForm;
use Bayrell.CloudOS.Frontend.Applications.AppModTableModel;
use Bayrell.CloudOS.Frontend.Applications.AppVolumesTableModel;
use Bayrell.CloudOS.Frontend.Applications.ComposeDialogModel;


class AppFormModel extends FormModel
{
	string component = classof AppForm;
	bool show_result = false;
	
	
	/**
	 * Create data storage
	 */
	CrudApiStorage createDataStorage() => new CrudApiStorage{
		"layout": this.layout,
		"class_name": "app.application",
		"primary_keys": ["id"],
		"save_fields": [
			"custom_patch",
			"environments",
			"name",
			"stack_name",
			"status",
			"template_version_id",
			"variables",
			"volumes",
		],
	};
	
	
	/**
	 * Init widget settings
	 */
	void initWidget()
	{
		parent();
		
		/* Stacks */
		Dictionary stack_id = this.addWidget(
			classof Dictionary,
			{
				"storage": new CrudApiStorage{
					"layout": this.layout,
					"class_name": "app.docker.stack",
				},
				"widget_name": "stack_id",
				"transform": Map (Dict item) => {
					"label": item.get("stack_name"),
					"value": item.get("stack_name"),
				},
			}
		);
		
		/* Field stack_name */
		this.addField({
			"label": "Stack name",
			"name": "stack_name",
			"component": classof Select,
			"model": stack_id,
		});
		
		/* Field app name */
		this.addField({
			"label": "App name",
			"name": "name",
			"component": classof Input,
		});
		
		/* Templates */
		Dictionary template_id = this.addWidget(
			classof Dictionary,
			{
				"storage": new CrudApiStorage{
					"layout": this.layout,
					"class_name": "app.template",
				},
				"widget_name": "template_id",
				"transform": Map (Dict item) => {
					"label": item.get("name") ~ " <" ~ item.get("uid") ~ ">",
					"value": item.get("id"),
				},
			}
		);
		
		/* Field template id */
		this.addField({
			"label": "Template",
			"name": "template_id",
			"component": classof Select,
			"model": template_id,
		});
		
		/* Versions */
		Dictionary version_id = this.addWidget(
			classof Dictionary,
			{
				"storage": new CrudApiStorage{
					"layout": this.layout,
					"class_name": "app.template.version",
				},
				"widget_name": "version_id",
				"filter": bool (Dict item)
				{
					int template_id = this.storage.item.get("template_id");
					return item.get("template_id") == template_id;
				},
				"transform": Map (Dict item) => {
					"label": item.get("version"),
					"value": item.get("id"),
				},
			}
		);
		template_id.events.add("onValueChanged", new Callback(version_id, "reloadOptions"));
		
		/* Field version id */
		this.addField({
			"label": "Version",
			"name": "template_version_id",
			"component": classof Select,
			"model": version_id,
		});
		
		if (this.action == "edit")
		{
			/* Add compose dialog */
			ComposeDialogModel compose_dialog = this.addWidget(
				classof ComposeDialogModel,
				{
					"form": this,
				}
			);
			this.render_list.addItem(compose_dialog);
			
			/* Modificators */
			AppModTableModel modificators = this.addWidget(
				classof AppModTableModel,
				{
					"widget_name": "modificators",
					"foreign_key": {
						"app_id": this.layout.route.matches.get("id"),
					},
				}
			);
			
			/* Set foreign key */
			int app_id = this.layout.route.matches.get("id");
			modificators.storage.setForeignKey("app_id", app_id );
			modificators.getWidget("form").storage.setForeignKey("app_id", app_id );
			
			/* Environments */
			AppEnvironmentsTableModel environments = this.addWidget(
				classof AppEnvironmentsTableModel
			);
			
			/* Volumes */
			AppVolumesTableModel volumes = this.addWidget(
				classof AppVolumesTableModel
			);
			
			/* Top buttons */
			this.top_buttons.styles.add("no-gap");
			
			/* Back button */
			this.top_buttons.addWidget(
				classof ButtonModel,
				{
					"content": "Back",
					"styles": [
						"default",
					],
					"href": this.layout.url("app:applications:index"),
				}
			);
			
			/* Compose button */
			ButtonModel compose_button = this.top_buttons.addWidget(
				classof ButtonModel,
				{
					"content": "Compose",
					"styles": [
						"default",
					],
				}
			);
			compose_button.events.add("onClick", new Callback(compose_dialog, "onCompose"));
			
			/* Stop button */
			ButtonModel stop_button = this.top_buttons.addWidget(
				classof ButtonModel,
				{
					"content": "Stop",
					"styles": [
						"default",
					],
				}
			);
			stop_button.events.add("onClick", new Callback(compose_dialog, "onStop"));
			
			/* Save button */
			this.top_buttons.addWidget(
				classof SaveButtonModel,
				{
					"form": this,
					"show_result": true,
					"styles": [
						"default"
					],
				}
			);
			
			/* Tabs */
			this.tabs = this.addWidget(
				classof TabsModel,
				{
					"active": "info",
					"tabs": [
						{
							"name": "info",
							"label": "Info",
						},
						{
							"name": "custom_patch",
							"label": "Custom patch",
						},
						{
							"name": "total_patches",
							"label": "Total patches",
						},
						{
							"name": "result",
							"label": "Result",
						},
						{
							"name": "yaml",
							"label": "Yaml",
						},
					],
				}
			);
		}
		
		this.layout.addComponent(classof AppForm);
	}
	
	
	/**
	 * Get page title
	 */
	string getPageTitle(string action = "")
	{
		if (action == "add")
		{
			return "Add app";
		}
		if (action == "compose")
		{
			return "Compose " ~ this.storage.item.get("stack_name") ~
				"_" ~ this.storage.item.get("name")
			;
		}
		if (action == "stop")
		{
			return "Stop " ~ this.storage.item.get("stack_name") ~
				"_" ~ this.storage.item.get("name")
			;
		}
		if (action == "recompose")
		{
			return "Restart " ~ this.storage.item.get("stack_name") ~
				"_" ~ this.storage.item.get("name")
			;
		}
		if (action == "edit")
		{
			return "Edit " ~ this.storage.item.get("stack_name") ~
				"_" ~ this.storage.item.get("name")
			;
		}
		if (action == "delete")
		{
			return "Delete " ~ this.storage.item.get("stack_name") ~
				"_" ~ this.storage.item.get("name")
			;
		}
		return "";
	}
}