/*!
 *  Bayrell Cloud OS
 *
 *  (c) Copyright 2020-2023 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Bayrell.CloudOS.Frontend.Applications;

use Runtime.Callback;
use Runtime.Widget.ButtonModel;
use Runtime.Widget.Input;
use Runtime.Widget.RowButtons;
use Runtime.Widget.RowButtonsModel;
use Runtime.Widget.Select;
use Runtime.Widget.Crud.CrudApiStorage;
use Runtime.Widget.Crud.Dictionary;
use Runtime.Widget.Form.FormModel;
use Bayrell.CloudOS.Frontend.Applications.AppForm;
use Bayrell.CloudOS.Frontend.Applications.AppModTableModel;


class AppFormModel extends FormModel
{
	string component = classof AppForm;
	
	/**
	 * Primary keys
	 */
	Vector getPrimaryKeys() => ["id"];
	
	
	/**
	 * Create data storage
	 */
	CrudApiStorage createDataStorage() => new CrudApiStorage(this.layout, "app.application");
	
	
	/**
	 * Init table widgets
	 */
	void initWidgets()
	{
		parent();
		
		if (this.action == "edit")
		{
			this.top_buttons.add(new ButtonModel{
				"content": "Back",
				"styles": [
					"default",
				],
				"href": this.layout.url("app:applications:index"),
			});
			
			ButtonModel save_button = this.bottom_buttons.add(new ButtonModel{
				"content": "Save",
				"styles": [
					"primary",
					"large",
				],
			});
			save_button.events.add("onClick", new Callback(this, "save"));
			
			/* Add modificators table */
			AppModTableModel modificators = new AppModTableModel{
				"parent_widget": this,
				"widget_name": "modificators",
			};
			modificators.storage.setPage(1);
			
			/* Set foreign key */
			int app_id = this.layout.route.matches.get("id");
			modificators.storage.setForeignKey("app_id", app_id );
			modificators.getWidget("form").storage.setForeignKey("app_id", app_id );
		}
	}
	
	
	/**
	 * Init fields
	 */
	void initFields()
	{
		/* Field stack_name */
		this.addField({
			"label": "Stack name",
			"name": "stack_name",
			"component": classof Input,
		});
		
		/* Field app name */
		this.addField({
			"label": "App name",
			"name": "name",
			"component": classof Input,
		});
		
		/* Templates */
		Dictionary template_id = new Dictionary{
			"storage": new CrudApiStorage(this.layout, "app.template"),
			"widget_name": "template_id",
			"parent_widget": this,
			"transform": Map (Dict item) => {
				"label": item.get("name") ~ " <" ~ item.get("uid") ~ ">",
				"value": item.get("id"),
			},
		};
		
		/* Field template id */
		this.addField({
			"label": "Template",
			"name": "template_id",
			"component": classof Select,
			"model": template_id,
		});
		
		/* Versions */
		Dictionary version_id = new Dictionary{
			"storage": new CrudApiStorage(this.layout, "app.template.version"),
			"widget_name": "version_id",
			"parent_widget": this,
			"filter": bool (Dict item)
			{
				int template_id = this.storage.item.get("template_id");
				return item.get("template_id") == template_id;
			},
			"transform": Map (Dict item) => {
				"label": item.get("version"),
				"value": item.get("id"),
			},
		};
		template_id.events.add("onChanged", new Callback(version_id, "reloadOptions"));
		
		/* Field version id */
		this.addField({
			"label": "Version",
			"name": "template_version_id",
			"component": classof Select,
			"model": version_id,
		});
	}
	
	
	/**
	 * Get page title
	 */
	string getPageTitle(string action = "")
	{
		if (action == "add")
		{
			return "Add app";
		}
		if (action == "edit")
		{
			return "Edit " ~ this.storage.item.get("stack_name") ~
				"_" ~ this.storage.item.get("name")
			;
		}
		if (action == "delete")
		{
			return "Delete " ~ this.storage.item.get("stack_name") ~
				"_" ~ this.storage.item.get("name")
			;
		}
		return "";
	}
}