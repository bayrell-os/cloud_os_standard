<!--
 *  Bayrell Cloud OS
 *
 *  (c) Copyright 2020 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
-->

<class name="Bayrell.CloudOS.Frontend.DefaultLayout">

<use name="Runtime.Core.Message" />
<use name="Runtime.Web.LayoutModel" />
<use name="Runtime.Web.Events.MouseClickEvent" />
<use name="Bayrell.CloudOS.ModuleDescription" />


<style>
.app_layout{
	height: 100%;
}
.app_layout_wrap{
	position: relative;
	display: flex;
	align-items: stretch;
	min-height: 100%;
}
.app_layout_menu_wrap{
	position: relative;
	width: 200px;
}
.app_layout_content_wrap{
	position: relative;
	width: calc(100% - 200px);
	padding-bottom: 10px;
}
.app_layout_site_name, .app_layout_title, .app_layout_top_menu{
	font-size: 16px;
	height: 40px;
}
.app_layout_site_name, .app_layout_title, .app_layout_top_menu,
.app_layout_page, .app_layout_content{
	padding: 10px;
}
.app_layout_top_menu_item{
	padding-left: 10px;
	padding-right: 10px;
}
.app_layout_site_name{
	border-right: 1px ${ vars["color_border"] } solid;
}
.app_layout_top_menu{
	display: flex;
	align-items: stretch;
}
.app_layout_content{
	position: relative;
	height: calc(100% - 70px);
	padding-bottom: 0;
	/*padding-right: 0;*/
}
.app_layout_menu{
	position: relative;
	height: calc(100% - 40px);
	overflow-y: auto;
	border-right: 1px ${ vars["color_border"] } solid;
}
.app_layout_menu_item_label{
	font-size: 1rem;
    font-weight: bold;
    padding: 0.5rem;
}
.app_layout_menu_item a{
	display: block;
	padding: 10px;
	border-bottom: 1px solid ${ vars["color_border"] };
}
.app_layout_menu_item a:hover{
	background-color: ${ vars["color_hover"] };
}
.app_layout_menu_item a.active, .app_layout_menu_item a.active:hover{
	background-color: ${ vars["color_selected"] };
	border-color: ${ vars["color_selected"] };
	color: ${ vars["color_selected_background"] };
}
</style>


<template name="renderMenuItem" args="Dict item">
	<div class='app_layout_menu_item'>
		
		%if (item.has("items"))
		{
			<div class="app_layout_menu_item_label">{{ item["title"] }}</div>
			
			%set Collection items = item["items"];
			%for (int i=0; i<items.count(); i++)
			{
				%set Dict sub_item = items[i];
				<div class="app_layout_menu_item">
					%set bool is_active = this.isMenuActive(sub_item);
					<a href={{ this.layout.url(sub_item["link"]) }} class="nolink"
						class={{ is_active ? "active" : "" }}
					>{{ sub_item["title"] }}</a>
				</div>
			}
		}
		
		%else
		{
			%set bool is_active = this.isMenuActive(item);
			<div class="app_layout_menu_item">
				<a href={{ this.layout.url(item["link"]) }} class="nolink"
					class={{ is_active ? "active" : "" }}
				>{{ item["title"] }}</a>
			</div>
		}
		
	</div>
</template>


<template>
	
	<div class='app_layout'>
		<div class='app_layout_wrap'>
			<div class='app_layout_menu_wrap'>
				<div class='app_layout_site_name'>
					<a class='nolink' href='/'>{{ this.getHostname() }}</a>
				</div>
				<div class='app_layout_menu'>
					%set Collection menu = this.getMenu();
					%for (int i=0; i<menu.count(); i++)
					{
						%render this.renderMenuItem(menu[i]);
					}
				</div>
			</div>
			<div class='app_layout_content_wrap'>
				<div class='app_layout_title'>{{ this.layout.title }}</div>
				<div class='app_layout_content'>
					%var string current_page = this.layout.current_page;
					%var string current_page_model = this.layout.current_page_model;
					<{current_page} @model=[ "widgets", current_page_model ] />
				</div>
			</div>
		</div>
	</div>
	
</template>


<script>

string route_name_old = "";


/**
 * Returns true if component is changed and need to repaint
 */
bool isChanged(var model, Dict params, var content)
{
	return parent::isChanged(model, params, content);
	if (this.provider.layout.route.name == this.route_name_old)
	{
		return false;
	}
	return true;
}


/**
 * Update params
 */
void updateParams(Collection model_path, Dict params, var content)
{
	parent::updateParams(model_path, params, content);
	
	this.route_name_old = this.provider.layout.route.name;
}


/**
 * Returns hostname
 */
string getHostname() => "Hostname";


/**
 * Returns true if menu is active
 */
bool isMenuActive(Dict item)
{
	if (this.layout.route == null)
	{
		return false;
	}
	if (item.has("link") and this.layout.route.name == item["link"])
	{
		return true;
	}
	if (item.has("links") and item["links"].indexOf(this.layout.route.name) > -1)
	{
		return true;
	}
	return false;
}


/**
 * Returns menu items
 */
Vector getMenu()
{
	return [
		
		{
			"title": "Main",
			"link": "app:page:index",
		},
		{
			"title": "Applications",
			"items":
			[
				{
					"title": "Applications",
					"link": "app:applications:index",
					"links": [
						"app:applications:index",
						"app:applications:add",
						"app:applications:edit",
						"app:applications:delete",
					],
				},
				{
					"title": "Import XML",
					"link": "app:templates:import",
				},
				{
					"title": "Templates",
					"link": "app:templates:index",
					"links": [
						"app:templates:index",
						"app:templates:add",
						"app:templates:edit",
						"app:templates:delete",
					],
				},
				{
					"title": "Modificators",
					"link": "app:modificators:index",
					"links": [
						"app:modificators:index",
						"app:modificators:add",
						"app:modificators:edit",
						"app:modificators:delete",
					],
				},
			]
		},
		
		{
			"title": "Docker Swarm",
			"items":
			[
				{
					"title": "Services",
					"link": "app:docker:services:index",
				},
				{
					"title": "Yaml files",
					"link": "app:docker:yaml:index",
					"links": [
						"app:docker:yaml:index",
						"app:docker:yaml:add",
						"app:docker:yaml:edit",
						"app:docker:yaml:delete",
					],
				},
				{
					"title": "Stacks",
					"link": "app:docker:stack:index",
					"links": [
						"app:docker:stack:index",
						"app:docker:stack:add",
						"app:docker:stack:edit",
						"app:docker:stack:delete",
					],
				},
			]
		},
		
		{
			"title": "Load balancing",
			"items":
			[
				{
					"title": "Workspace",
					"link": "app:workspace:index",
					"links": [
						"app:workspace:index",
						"app:workspace:add",
						"app:workspace:edit",
						"app:workspace:delete",
					],
				},
				{
					"title": "Domains",
					"link": "app:domains:index",
					"links": [
						"app:domains:index",
						"app:domains:add",
						"app:domains:edit",
						"app:domains:delete",
					],
				},
				{
					"title": "SSL Group",
					"link": "app:ssl:index",
					"links": [
						"app:ssl:index",
						"app:ssl:add",
						"app:ssl:edit",
						"app:ssl:delete",
					],
				},
				{
					"title": "Routes",
					"link": "app:routes:index",
					"links": [
						"app:routes:index",
						"app:routes:add",
						"app:routes:edit",
						"app:routes:delete",
					],
				},
				{
					"title": "Nginx files",
					"link": "app:nginx_files:index",
					"links": [
						"app:nginx_files:index",
						"app:nginx_files:add",
						"app:nginx_files:edit",
						"app:nginx_files:delete",
					],
				},
			]
		},
		{
			"title": "Other",
			"items":
			[
				{
					"title": "Settings",
					"link": "app:settings:index",
				},
				{
					"title": "About",
					"link": "app:page:about",
				},
			]
		},
		
	];
}

</script>


</class>