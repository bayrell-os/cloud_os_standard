/*!
 *  Bayrell Cloud OS
 *
 *  (c) Copyright 2020-2023 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Bayrell.CloudOS.Api;

use Runtime.re;
use Runtime.ORM.Connection;
use Runtime.ORM.Query;
use Runtime.ORM.QueryResult;
use Runtime.ORM.Relation;
use Runtime.Web.Crud.CrudPageApi;
use Runtime.Web.Crud.Rules.CrudRule;
use Bayrell.CloudOS.Api.Rules.ApplicationModificator;
use Bayrell.CloudOS.Models.Application;


class ApplicationApi extends CrudPageApi
{
	/**
	 * Returns api name
	 */
	pure string getApiName() => "app.application";
	
	
	/**
	 * Returns model name
	 */
	pure string getModelName() => classof Application;
	
	
	/**
	 * Returns table name
	 */
	pure string getTableName() => "applications";
	
	
	/**
	 * Returns api methods
	 */
	pure string getApiMethod(string api_name)
	{
		if (api_name == "crud.search") return "actionSearch";
		if (api_name == "crud.search_one") return "actionSearchOne";
		if (api_name == "crud.item") return "actionItem";
		if (api_name == "crud.save") return "actionSave";
		if (api_name == "crud.delete") return "actionDelete";
		return "";
	}
	
	
	/**
	 * Returns rules
	 */
	Collection<CrudRule> getRules() =>
	[
	];
	
	
	/**
	 * Build search query
	 */
	async Query buildSearchQuery(Query q)
	{
		string status = this.post_data["status"];
		
		if (status == "run") q.where("applications.status", "=", 1);
		else if (status == "stop") q.where("applications.status", "=", 0);
		
		q = q
			.orderBy("applications.stack_name", "asc")
			.orderBy("applications.name", "asc")
			
			.innerJoinKey("templates_versions")
			.innerJoinKey("templates")
			
			.addFields([
				"templates_versions.version as template_version",
				"templates.name as template_name",
				"templates.uid as template_uid",
			])
		;
		return q;
	}
	
	
	/**
	 * Returns database params
	 */
	Dict getDatabaseParams() => { "name": "default" };
	
	
	/**
	 * Search final event
	 */
	async void onSearchFinal()
	{
		Connection conn = this.getDatabaseConnection();
		
		await parent::onSearchFinal();
		
	}
	
}