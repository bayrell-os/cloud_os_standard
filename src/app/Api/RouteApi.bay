/*!
 *  Bayrell Cloud OS
 *
 *  (c) Copyright 2020-2023 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Bayrell.CloudOS.Api;

use Runtime.re;
use Runtime.DateTime;
use Runtime.ORM.Query;
use Runtime.ORM.Relation;
use Runtime.Web.Crud.CrudPageApi;
use Runtime.Web.Crud.Rules.CrudRule;
use Runtime.Web.Crud.Rules.ForeignKey;
use Runtime.Web.Crud.Rules.LowerCase;
use Runtime.Web.Crud.Rules.Purify;
use Runtime.Web.Crud.Rules.Required;
use Runtime.Web.Crud.Rules.SaveFields;
use Runtime.Web.Crud.Rules.Unique;
use Bayrell.CloudOS.Models.Domain;
use Bayrell.CloudOS.Models.Route;


class RouteApi extends CrudPageApi
{
	/**
	 * Returns api name
	 */
	pure string getApiName() => "app.route";
	
	
	/**
	 * Returns model name
	 */
	pure string getModelName() => classof Route;
	
	
	/**
	 * Returns table name
	 */
	pure string getTableName() => "routes";
	
	
	/**
	 * Returns api methods
	 */
	pure string getApiMethod(string api_name)
	{
		if (api_name == "crud.search") return "actionSearch";
		if (api_name == "crud.search_one") return "actionSearchOne";
		if (api_name == "crud.item") return "actionItem";
		if (api_name == "crud.save") return "actionSave";
		if (api_name == "crud.delete") return "actionDelete";
		return "";
	}
	
	
	/**
	 * Returns rules
	 */
	Collection<CrudRule> getRules() =>
	[
		new SaveFields
		{
			"fields":
			[
				"enable",
				"protocol",
				/*"protocol_data",*/
				"domain_id",
				"route_prefix",
				"docker_name",
				"source_port",
				"target_port",
				"target_prefix",
				"nginx_config",
			]
		},
		new Purify{ "name": "docker_name" },
		new LowerCase{ "name": "docker_name" },
		new Required{ "name": "docker_name" },
		new Required{ "name": "domain_id" },
		new Required{ "name": "enable" },
		new Required{ "name": "protocol" },
		
		/* ForeignKey */
		new ForeignKey{
			"name": "routes_domain_id",
			"dictionary_name": "domains",
			"model_name": classof Domain,
		},
	];
	
	
	/**
	 * Build search query
	 */
	async Query buildSearchQuery(Query q)
	{
		int domain_id = (int)this.post_data["domain_id"];
		if (domain_id > 0)
		{
			q = q.where("domain_id", "=", domain_id)
		}
		
		q = q
			|> .orderBy("id", "asc")
		;
		
		return q;
	}
	
}