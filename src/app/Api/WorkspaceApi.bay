/*!
 *  Bayrell Cloud OS
 *
 *  (c) Copyright 2020-2023 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Bayrell.CloudOS.Api;

use Runtime.re;
use Runtime.DateTime;
use Runtime.Exceptions.ApiException;
use Runtime.ORM.Connection;
use Runtime.ORM.Query;
use Runtime.ORM.Relation;
use Runtime.Web.Crud.CrudPageApi;
use Runtime.Web.Crud.Rules.CrudRule;
use Runtime.Web.Crud.Rules.LowerCase;
use Runtime.Web.Crud.Rules.Purify;
use Runtime.Web.Crud.Rules.Required;
use Runtime.Web.Crud.Rules.SaveFields;
use Runtime.Web.Crud.Rules.Unique;
use Bayrell.CloudOS.Models.Workspace;


class WorkspaceApi extends CrudPageApi
{
	/**
	 * Returns api name
	 */
	pure string getApiName() => "app.workspace";
	
	
	/**
	 * Returns model name
	 */
	pure string getModelName() => classof Workspace;
	
	
	/**
	 * Returns table name
	 */
	pure string getTableName() => "spaces";
	
	
	/**
	 * Returns api methods
	 */
	pure string getApiMethod(string api_name)
	{
		if (api_name == "crud.search") return "actionSearch";
		if (api_name == "crud.search_one") return "actionSearchOne";
		if (api_name == "crud.item") return "actionItem";
		if (api_name == "crud.save") return "actionSave";
		if (api_name == "crud.delete") return "actionDelete";
		if (api_name == "domain.add") return "actionAddDomain";
		if (api_name == "domain.delete") return "actionDeleteDomain";
		if (api_name == "user.add") return "actionAddUser";
		if (api_name == "user.delete") return "actionDeleteUser";
		return "";
	}
	
	
	/**
	 * Returns rules
	 */
	Collection<CrudRule> getRules() =>
	[
		new SaveFields
		{
			"fields":
			[
				"name",
				"uid",
			]
		},
		new Purify{ "name": "name" },
		new Required{ "name": "name" },
		new Purify{ "name": "uid" },
		new LowerCase{ "name": "uid" },
		new Unique{"keys": ["uid"]},
	];
	
	
	/**
	 * Build search query
	 */
	async Query buildSearchQuery(Query q)
	{
		q = q
			|> .orderBy("id", "asc")
		;
		return q;
	}
	
	
	/**
	 * Add domain
	 */
	async void actionAddDomain()
	{
		int space_id = this.post_data["space_id"];
		int domain_id = this.post_data["domain_id"];
		
		Connection conn = this.getDatabaseConnection();
		Relation space = await Relation::findById("spaces", conn, space_id);
		Relation domain = await Relation::findById("domains", conn, domain_id);
		
		if (space == null)
		{
			this.container.fail( new ApiException("Space not found") );
			return;
		}
		
		if (domain == null)
		{
			this.container.fail( new ApiException("Domain not found") );
			return;
		}
		
		domain.set("space_id", space_id);
		domain.save(conn);
		
		/* Set api result */
		this.container.success();
	}
	
	
	/**
	 * Delete domain
	 */
	async void actionDeleteDomain()
	{
		int space_id = this.post_data["space_id"];
		int domain_id = this.post_data["domain_id"];
		
		Connection conn = this.getDatabaseConnection();
		Relation domain = await Relation::findById("domains", conn, domain_id);
		
		if (domain == null)
		{
			this.container.fail( new ApiException("Domain not found") );
			return;
		}
		
		domain.set("space_id", null);
		domain.save(conn);
		
		/* Set api result */
		this.container.success();
	}
	
	
	/**
	 * Add user
	 */
	async void actionAddUser()
	{
		int space_id = this.post_data["space_id"];
		int user_login = this.post_data["user_login"];
		
		Connection conn = this.getDatabaseConnection();
		Relation space = await Relation::findById("spaces", conn, space_id);
		Relation user = await Relation::findItem("users", conn, {
			"login": user_login,
		});
		
		if (space == null)
		{
			this.container.fail( new ApiException("Space not found") );
			return;
		}
		
		if (user == null)
		{
			this.container.fail( new ApiException("User not found") );
			return;
		}
		
		Relation space_user = await Relation::findItem("spaces_users", conn, {
			"space_id": space_id,
			"user_id": user.get("id"),
		});
		if (space_user != null)
		{
			this.container.fail( new ApiException("User already exists") );
			return;
		}
		
		space_user = new Relation("spaces_users");
		space_user.set("space_id", space_id);
		space_user.set("user_id", user.get("id"));
		space_user.save(conn);
		
		/* Set api result */
		this.container.success();
	}
	
	
	/**
	 * Delete user
	 */
	async void actionDeleteUser()
	{
		int space_id = this.post_data["space_id"];
		int user_id = this.post_data["user_id"];
		
		Connection conn = this.getDatabaseConnection();
		Relation space = await Relation::findById("spaces", conn, space_id);
		Relation user = await Relation::findItem("users", conn, {
			"id": user_id,
		});
		
		if (space == null)
		{
			this.container.fail( new ApiException("Space not found") );
			return;
		}
		
		if (user == null)
		{
			this.container.fail( new ApiException("User not found") );
			return;
		}
		
		Relation space_user = await Relation::findItem("spaces_users", conn, {
			"space_id": space_id,
			"user_id": user.get("id"),
		});
		if (space_user != null)
		{
			space_user.delete(conn);
		}
		
		this.container.success({});
	}
	
}