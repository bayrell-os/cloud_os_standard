/*!
 *  Bayrell Cloud OS
 *
 *  (c) Copyright 2020-2023 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Bayrell.CloudOS.Backend.Api;

use Runtime.DateTime;
use Runtime.Exceptions.ApiError;
use Runtime.Exceptions.ItemNotFound;
use Runtime.Exceptions.RuntimeException;
use Runtime.ORM.Connection;
use Runtime.ORM.Query;
use Runtime.ORM.Relation;
use Runtime.Web.Annotations.ApiMethod;
use Runtime.Widget.Crud.CrudApi;
use Runtime.Widget.Crud.CrudRule;
use Runtime.Widget.Crud.LowerCase;
use Runtime.Widget.Crud.Purify;
use Runtime.Widget.Crud.Required;
use Runtime.Widget.Crud.Unique;


class WorkspaceDomainApi extends CrudApi
{
	/**
	 * Returns api name
	 */
	pure string getApiName() => "app.workspace.domain::crud";
	
	
	/**
	 * Returns table name
	 */
	pure string getTableName() => "domains";
	
	
	/**
	 * Returns item fields
	 */
	Collection getItemFields() => [
		"id",
		"domain_name",
		"gmtime_created",
		"gmtime_updated",
	];
	
	
	/**
	 * Returns save fields
	 */
	Collection getSaveFields() => [
		"domain_id",
	];
	
	
	/**
	 * Returns rules
	 */
	Collection<CrudRule> getRules() =>
	[
		new Purify{ "name": "domain_id" },
		new LowerCase{ "name": "domain_id" },
		new Required{ "name": "domain_id" },
	];
	
	
	/**
	 * Build search query
	 */
	async Query buildSearchQuery(Query q)
	{
		int space_id = (int)this.post_data.get("space_id");
		
		q.where("space_id", "=", space_id);
		q.orderBy("domains.domain_name", "asc");
		
		return q;
	}
	
	
	/**
	 * Update item
	 */
	async void updateItem(Map update_data)
	{
		if (not this.item.isNew())
		{
			throw new ApiError(new RuntimeException("Edit item are not allowed"));
		}
		
		int space_id = update_data["space_id"];
		int domain_id = update_data["domain_id"];
		
		Relation space = this.connection.findRelationById("spaces", space_id);
		if (!space)
		{
			throw new ApiError(new ItemNotFound("Space"));
		}
		
		Relation domain = this.connection.findRelationById("domains", domain_id);
		if (!domain)
		{
			throw new ApiError(new ItemNotFound("Domain"));
		}
		if (domain.get("space_id") != 0)
		{
			throw new ApiError(new ItemNotFound("Domain"));
		}
		
		domain.set("space_id", space_id);
		domain.save(this.connection);
	}
	
	
	/**
	 * Delete item
	 */
	async void deleteItem()
	{
		this.item.set("space_id", null);
		this.item.save(this.connection);
	}
	
	
	/**
	 * Action search
	 */
	@ApiMethod
	async void actionSearch()
	{
		await parent::actionSearch();
	}
	
	
	/**
	 * Action item
	 */
	@ApiMethod
	async void actionItem()
	{
		await parent::actionItem();
	}
	
	
	/**
	 * Action save
	 */
	@ApiMethod
	async void actionSave()
	{
		await parent::actionSave();
	}
	
	
	/**
	 * Action delete
	 */
	@ApiMethod
	async void actionDelete()
	{
		await parent::actionDelete();
	}
}