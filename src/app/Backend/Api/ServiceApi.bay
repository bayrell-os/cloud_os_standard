/*!
 *  Bayrell Cloud OS
 *
 *  (c) Copyright 2020-2023 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Bayrell.CloudOS.Backend.Api;

use Runtime.re;
use Runtime.DateTime;
use Runtime.ORM.Connection;
use Runtime.ORM.Query;
use Runtime.ORM.Relation;
use Runtime.Exceptions.ApiError;
use Runtime.Exceptions.ItemNotFound;
use Runtime.Exceptions.RuntimeException;
use Runtime.Web.Annotations.ApiMethod;
use Runtime.Widget.Crud.CrudApi;
use Runtime.Widget.Crud.CrudRule;
use Runtime.Widget.Crud.LowerCase;
use Runtime.Widget.Crud.Purify;
use Runtime.Widget.Crud.Required;
use Runtime.Widget.Crud.Unique;
use Bayrell.CloudOS.Backend.Lib.DockerService;


class ServiceApi extends CrudApi
{
	/**
	 * Returns api name
	 */
	pure string getApiName() => "app.docker.services::crud";
	
	
	/**
	 * Returns table name
	 */
	pure string getTableName() => "docker_services";
	
	
	/**
	 * Returns item fields
	 */
	Collection getItemFields() => [
		"service_id",
		"stack_name",
		"service_name",
		"docker_image",
		"docker_tasks",
		"count_work",
		"count_total",
		"gmtime_created",
		"gmtime_updated",
	];
	
	
	/**
	 * Returns save fields
	 */
	Collection getSaveFields() => [
	];
	
	
	/**
	 * Returns rules
	 */
	Collection<CrudRule> getRules() =>
	[
	];
	
	
	/**
	 * Build search query
	 */
	async Query buildSearchQuery(Query q)
	{
        q.where("is_deleted", "=", 0);
        q.where("enable", "=", 1);
		q.orderBy("stack_name", "asc");
		return q;
	}
	
	
	/**
	 * Action search
	 */
	@ApiMethod
	async void actionSearch()
	{
		await parent::actionSearch();
	}
	
	
	/**
	 * Action stop
	 */
	@ApiMethod
	async void actionStop()
	{
		Dict pk = this.post_data["pk"];
		Connection conn = this.getConnection();
		
		/* Find item */
		await this.findItem(pk);
		if (this.item == null)
		{
			throw new ApiError(new ItemNotFound());
		}
		
		/* Stop service */
		string service_name = this.item.get("stack_name") ~ "_" ~ this.item.get("service_name");
		string message = DockerService::stopService(service_name);
		Dict item_pk = this.item.getPrimaryKey();
		
		/* Set is delete */
		this.item.set("enable", 0);
		this.item.set("is_deleted", 1);
		this.item.save(conn);
		
		/* Set api result */
		this.result.success({
			"message": message,
			"data":
			{
				"pk": item_pk,
			}
		});
	}
}