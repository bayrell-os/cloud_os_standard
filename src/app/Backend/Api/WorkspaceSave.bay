/*!
 *  Bayrell Cloud OS
 *
 *  (c) Copyright 2020-2024 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Bayrell.CloudOS.Backend.Api;

use Runtime.ORM.Connection;
use Runtime.ORM.Relation;
use Runtime.ORM.Query;
use Runtime.ORM.QueryFilter;
use Runtime.ORM.QueryResult;
use Runtime.Web.Annotations.ApiMethod;
use Runtime.Widget.Crud.SaveRelationApi;
use Runtime.Widget.Crud.Rules.CrudRule;
use Runtime.Widget.Crud.Rules.LowerCase;
use Runtime.Widget.Crud.Rules.Purify;
use Runtime.Widget.Crud.Rules.ReadOnly;
use Runtime.Widget.Crud.Rules.Required;
use Runtime.Widget.Crud.Rules.Unique;


class WorkspaceSave extends SaveRelationApi
{
	/**
	 * Returns api name
	 */
	static string getApiName() => "app.workspace::save";
	
	
	/**
	 * Returns table name
	 */
	string getTableName() => "spaces";
	
	
	/**
	 * Returns rules
	 */
	Vector<CrudRule> getRules() =>
	[
		new Purify{ "name": "name" },
		new Required{ "name": "name" },
		new Purify{ "name": "uid" },
		new LowerCase{ "name": "uid" },
		new Unique{"keys": ["uid"]},
	];
	
	
	/**
	 * Returns item fields
	 */
	Collection getItemFields() =>
	[
		"id",
		"name",
		"uid",
		"gmtime_created",
		"gmtime_updated",
	];
	
	
	/**
	 * Returns save fields
	 */
	Collection getSaveFields() =>
	[
		"name",
		"uid",
	];
	
	
	/**
	 * Build search query
	 */
	async void buildSearchQuery(Query q)
	{
	}
	
	
	/**
	 * Action item
	 */
	@ApiMethod
	async void actionItem()
	{
		await parent();
	}
	
	
	/**
	 * Action save
	 */
	@ApiMethod
	async void actionSave()
	{
		await parent();
	}
	
	
	/**
	 * Action delete
	 */
	@ApiMethod
	async void actionDelete()
	{
		await parent();
	}
}