/*!
 *  Bayrell Cloud OS
 *
 *  (c) Copyright 2020-2024 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Bayrell.CloudOS.Backend.Api;

use Runtime.ORM.Connection;
use Runtime.ORM.Relation;
use Runtime.ORM.Query;
use Runtime.ORM.QueryFilter;
use Runtime.ORM.QueryResult;
use Runtime.Web.Annotations.ApiMethod;
use Runtime.Widget.Crud.SaveRelationApi;
use Runtime.Widget.Crud.Rules.CrudRule;
use Runtime.Widget.Crud.Rules.LowerCase;
use Runtime.Widget.Crud.Rules.Purify;
use Runtime.Widget.Crud.Rules.ReadOnly;
use Runtime.Widget.Crud.Rules.Required;
use Runtime.Widget.Crud.Rules.Unique;


class RouteSave extends SaveRelationApi
{
	/**
	 * Returns api name
	 */
	static string getApiName() => "app.route::save";
	
	
	/**
	 * Returns table name
	 */
	string getTableName() => "routes";
	
	
	/**
	 * Returns rules
	 */
	Vector<CrudRule> getRules() =>
	[
		new Purify{ "name": "docker_name" },
		new LowerCase{ "name": "docker_name" },
		new Required{ "name": "docker_name" },
		new Required{ "name": "domain_id" },
		new Required{ "name": "enable" },
		new Required{ "name": "protocol" },
	];
	
	
	/**
	 * Returns item fields
	 */
	Collection getItemFields() =>
	[
		"id",
		"enable",
		"protocol",
		"domain_id",
		"domain_name",
		"route_prefix",
		"docker_name",
		"source_port",
		"target_port",
		"target_prefix",
		"nginx_config",
		"gmtime_created",
		"gmtime_updated",
	];
	
	
	/**
	 * Returns save fields
	 */
	Collection getSaveFields() =>
	[
		"enable",
		"protocol",
		"domain_id",
		"route_prefix",
		"docker_name",
		"source_port",
		"target_port",
		"target_prefix",
		"nginx_config",
	];
	
	
	/**
	 * Process data
	 */
	async void processData()
	{
		await parent();
		
		/* Set domain_id */
		int domain_id = (int)this.post_data["foreign_key", "domain_id"];
		if (domain_id > 0)
		{
			this.item.set("domain_id", domain_id);
		}
	}
	
	
	/**
	 * Action item
	 */
	@ApiMethod
	async void actionItem()
	{
		await parent();
	}
	
	
	/**
	 * Action save
	 */
	@ApiMethod
	async void actionSave()
	{
		await parent();
	}
	
	
	/**
	 * Action delete
	 */
	@ApiMethod
	async void actionDelete()
	{
		await parent();
	}
}