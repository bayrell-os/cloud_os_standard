/*!
 *  Bayrell Cloud OS
 *
 *  (c) Copyright 2020-2023 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Bayrell.CloudOS.Backend.Api;

use Runtime.re;
use Runtime.DateTime;
use Runtime.ORM.Query;
use Runtime.ORM.QueryFilter;
use Runtime.ORM.Relation;
use Runtime.Web.Annotations.ApiMethod;
use Runtime.Widget.Crud.CrudApi;
use Runtime.Widget.Crud.CrudRule;
use Runtime.Widget.Crud.Filter;
use Runtime.Widget.Crud.LowerCase;
use Runtime.Widget.Crud.Purify;
use Runtime.Widget.Crud.ReadOnly;
use Runtime.Widget.Crud.Required;
use Runtime.Widget.Crud.Unique;
use Runtime.XML.XML;
use Bayrell.CloudOS.Backend.Lib.AppXml;
use Bayrell.CloudOS.Backend.Lib.DockerService;


class AppApi extends CrudApi
{
	AppXml xml;
	
	
	/**
	 * Constructor
	 */
	void constructor()
	{
		parent();
		
		/* Create xml */
		this.xml = new AppXml();
		this.xml.connection = this.getConnection();
	}
	
	
	/**
	 * Returns api name
	 */
	pure string getApiName() => "app.application::crud";
	
	
	/**
	 * Returns table name
	 */
	pure string getTableName() => "applications";
	
	
	/**
	 * Returns search fields
	 */
	Collection getSearchFields() => [
		"id",
		"name",
		"stack_name",
		"status",
		"template_id",
		"template_version_id",
		"count_work",
		"count_total",
		"docker_tasks",
		"gmtime_created",
		"gmtime_updated",
	];
	
	
	/**
	 * Returns item fields
	 */
	Collection getItemFields() => [
		"id",
		"content",
		"custom_patch",
		"environments",
		"name",
		"stack_name",
		"status",
		"template_id",
		"template_version_id",
		"volumes",
		"yaml",
		"gmtime_created",
		"gmtime_updated",
	];
	
	
	/**
	 * Returns save fields
	 */
	Collection getSaveFields() => [
		"stack_name",
		"name",
		"template_version_id",
		"status",
		"environments",
		"custom_patch",
		"volumes",
	];
	
	
	/**
	 * Returns rules
	 */
	Collection<CrudRule> getRules() =>
	[
		/* Stack name */
		new Purify{ "name": "stack_name" },
		new LowerCase{ "name": "stack_name" },
		new Required{ "name": "stack_name" },
		
		/* Name */
		new Purify{ "name": "name" },
		new LowerCase{ "name": "name" },
		new Required{ "name": "name" },
		
		/* Unique */
		new Unique{"keys": ["stack_name", "name"]},
	];
	
	
	/**
	 * Build search query
	 */
	async Query buildSearchQuery(Query q)
	{
		string status = this.post_data["status"];
		
		if (status == "run") q.where("applications.status", "=", 1);
		else if (status == "stop") q.where("applications.status", "=", 0);
		
		q = q
			.addFields([
				"templates_versions.version as template_version",
				"templates.name as template_name",
				"templates.id as template_id",
				"templates.uid as template_uid",
				"docker_services.count_work as count_work",
				"docker_services.count_total as count_total",
				"docker_services.docker_tasks as docker_tasks",
			])
			
			.orderBy("applications.stack_name", "asc")
			.orderBy("applications.name", "asc")
			
			.innerJoin(
				"templates_versions",
				[
					"applications.template_version_id=templates_versions.id"
				]
			)
			
			.innerJoin(
				"templates",
				[
					"templates_versions.template_id=templates.id"
				]
			)
			
			.leftJoin(
				"docker_services",
				[
					"applications.stack_name=docker_services.stack_name",
					"applications.name=docker_services.service_name",
					"docker_services.enable=1",
					"docker_services.is_deleted=0",
				]
			)
		;
		
		return q;
	}
	
	
	/**
	 * After save
	 */
	async void onSaveAfter()
	{
		await parent();
		
		Map item_variables = {};
		Map update_data = this.post_data["item"];
		
		/* Save variables */
		Collection variables = update_data.get("variables");
		if (variables)
		{
			for (int i=0; i<variables.count(); i++)
			{
				Dict variable = variables.get(i);
				string variable_name = variable.get("name");
				
				if (variable_name == "_var_app_name_") continue;
				if (variable_name == "_var_service_name_") continue;
				
				item_variables.set(
					variable.get("name"),
					variable.get("value")
				);
			}
		}
		
		/* Set variables */
		this.item.set("variables", item_variables);
		
		/* Build xml and yaml */
		this.xml.app = this.item;
		this.xml.buildContent(this.isCreate());
		
		/* Save item */
		this.item.set("content", this.xml.xml_content);
		this.item.set("yaml", this.xml.yaml_content);
		this.item.save(this.getConnection());
	}
	
	
	/**
	 * Build variables
	 */
	async void buildVariables()
	{
		if (this.xml.app == null)
		{
			this.xml.app = this.item;
			this.xml.template = XML::loadXml(this.item.get("content"));
			this.xml.loadTemplateFromDatabase();
			this.xml.loadModificators();
			this.xml.buildVariables();
		}
		
		Map data_item = this.result.data.get("item");
		
		/* Set patches */
		Collection patches = this.xml.getPatches();
		data_item.set("patches", patches);
		
		/* Set variables */
		data_item.set("variables", this.xml.variables);
		if (data_item.get("environments") == null)
		{
			data_item.set("environments", []);
		}
	}
	
	
	/**
	 * Action search
	 */
	@ApiMethod
	async void actionSearch()
	{
		await parent::actionSearch();
	}
	
	
	/**
	 * Action item
	 */
	@ApiMethod
	async void actionItem()
	{
		await parent::actionItem();
		await this.buildVariables();
	}
	
	
	/**
	 * Action save
	 */
	@ApiMethod
	async void actionSave()
	{
		await parent::actionSave();
		await this.buildVariables();
	}
	
	
	/**
	 * Action delete
	 */
	@ApiMethod
	async void actionDelete()
	{
		await parent::actionDelete();
	}
}