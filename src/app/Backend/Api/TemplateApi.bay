/*!
 *  Bayrell Cloud OS
 *
 *  (c) Copyright 2020-2024 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Bayrell.CloudOS.Backend.Api;

use Runtime.DateTime;
use Runtime.Exceptions.ApiException;
use Runtime.ORM.Connection;
use Runtime.ORM.Query;
use Runtime.ORM.Relation;
use Runtime.Web.Annotations.ApiMethod;
use Runtime.Web.BaseApi;
use Runtime.Widget.Crud.CrudApi;
use Runtime.Widget.Crud.CrudRule;
use Runtime.Widget.Crud.LowerCase;
use Runtime.Widget.Crud.Purify;
use Runtime.Widget.Crud.Required;
use Runtime.Widget.Crud.Unique;
use Runtime.XML.XML;


class TemplateApi extends BaseApi
{
	/**
	 * Returns api name
	 */
	pure string getApiName() => "app.template";
	
	
	/**
	 * Returns table name
	 */
	pure string getTableName() => "templates";
	
	
	/**
	 * Action import
	 */
    @ApiMethod
	async void actionImport()
	{
		string content = this.post_data["content"];
		
		XML xml = XML::loadXml(content);
		
		if (not xml.exists())
		{
			if (xml.errors.count() > 0)
			{
				string error_message = rs::join("\n", xml.errors);
				return this.result.fail({
					"message": error_message,
				});
			}
			return this.result.fail({
				"message": "XML is empty",
			});
		}
		
		string type = xml.getName();
		string name = xml.get("name").get(0) |> .value() |> default string "";
		string priority = xml.get("priority").get(0) |> .value() |> default string "";
		string uid = xml.get("uid").get(0) |> .value() |> default string "";
		string version = xml.get("version").get(0) |> .value() |> default string "";
		
		if (uid == "" or version == "" or name == "")
		{
			return this.result.fail({
				"message": "uid, name, version or type is empty",
			});
		}
		
		if (type != "template" and type != "modificator")
		{
			return this.result.fail({
				"message": "XML must be template or modificator",
			});
		}
		
		Connection conn = Connection::getConnection();
		
		if (type == "modificator")
		{
			Relation modificator = conn.findRelationByObject("modificators", {
				"uid": uid,
			});
			
			if (modificator == null)
			{
				modificator = new Relation("modificators");
				modificator.set("uid", uid);
			}
			
			modificator.set("content", content);
			modificator.set("name", name);
			modificator.set("priority", priority);
			modificator.set("version", version);
			modificator.save(conn);
			modificator.refresh(conn);
			
			return this.result.success({
				"message": "Ok",
			});
		}
		
		Relation template_item = conn.findRelationByObject("templates", {
			"uid": uid,
		});
		
		if (template_item == null)
		{
			template_item = new Relation("templates");
			template_item.set("uid", uid);
			template_item.set("name", name);
			template_item.save(conn);
			template_item.refresh(conn);
		}
		
		int template_id = template_item.get("id");
		Relation version_item = conn.findRelationByObject("templates_versions", {
			"template_id": template_id,
			"version": version,
		});
		
		if (version_item == null)
		{
			version_item = new Relation("templates_versions");
			version_item.set("template_id", template_id);
			version_item.set("version", version);
		}
		
		version_item.set("content", content);
		version_item.save(conn);
		version_item.refresh(conn);
		
		template_item.save(conn);
		
		return this.result.success({
			"message": "Ok",
		});
	}
}