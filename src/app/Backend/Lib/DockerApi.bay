/*!
 *  Bayrell Cloud OS
 *
 *  (c) Copyright 2020-2023 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Bayrell.CloudOS.Backend.Lib;

use Runtime.re;
use Runtime.Exceptions.ApiException;
use Runtime.ORM.Connection;
use Runtime.ORM.Query;
use Runtime.ORM.QueryResult;
use Runtime.ORM.Relation;
use Runtime.XML.XML;
use Runtime.XML.YamlConverter;


class DockerApi
{
	/**
	 * Send docker command
	 */
	static var exec(string cmd)
	{
		#ifcode PHP then
		
		@exec($cmd, $arr, $ret_var);
		
		$content = "";
		foreach ($arr as $value)
		{
			$content .= $value;
		}
		
		if ($ret_var != 0)
		{
			throw new \Runtime\Exceptions\ApiException($content);
		}
		
		return $content;
		#endif
	}
	
	
	/**
	 * Send docker command
	 */
	static var dockerApi(string url, string method="GET", Dict post=null)
	{
		#ifcode PHP then
		
		$content = "";
		$cmd = "sudo /usr/bin/curl -s -X " . $method . " -H 'Content-Type: application/json' ";
		if ($post != null)
		{
			$cmd .= "-d '" . $post . "' ";
		}
		$cmd .= "--unix-socket /var/run/docker.sock http:/v1.39" . $url;
		$cmd .= " 2>/dev/null";
		$content = static::exec($cmd);
		return $content;
		
		#endif
	}
	
	
	/**
	 * Get all services from docker
	 */
	static Collection getServices() => rtl::json_decode( static::dockerApi("/services") );
	
	
	/**
	 * Get service from docker by id
	 */
	static Dict getServiceByID(string service_id) =>
		rtl::json_decode( static::dockerApi("/services/" ~ service_id) );
	
	
	/**
	 * Get service tasks
	 */
	static Collection getServiceTasks(string service_name)
	{
		string url_api = "/tasks?filters=" ~
			rs::url_encode('{"service":{"' ~ service_name ~ '":true}}')
		;
		
		Collection tasks = rtl::json_decode( static::dockerApi(url_api) );
		
		tasks.sort(
			bool (Dict a, Dict b)
			{
				string time_a = a["Status", "Timestamp"];
				string time_b = a["Status", "Timestamp"];
				return time_b - time_a;
			}
		);
		
		return tasks;
	}
	
	
	/**
	 * Get nodes
	 */
	static Collection getNodes() => rtl::json_decode( static::dockerApi("/nodes") );
	
	
	/**
	 * Compose
	 */
	static string compose(string file_path, string stack_name)
	{
		string cmd = "sudo docker stack deploy -c " ~
			file_path ~ " " ~ stack_name ~ " --with-registry-auth"
		;
		string result = await static::exec(cmd ~ " 2>&1");
		return result;
	}
	
	
	/**
	 * Stop services
	 */
	static string removeService(string service_name)
	{
		string url_api = "/services/" ~ service_name;
		Dict obj = rtl::json_decode( static::dockerApi(url_api, "DELETE") );
		
		string error_message = obj["message"];
		if (error_message != "")
		{
			throw new ApiException(error_message);
		}
		
		return obj["message"];
	}
	
	
}