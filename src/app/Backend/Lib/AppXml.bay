/*!
 *  Bayrell Cloud OS
 *
 *  (c) Copyright 2020-2024 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Bayrell.CloudOS.Backend.Lib;

use Runtime.re;
use Runtime.Exceptions.ApiException;
use Runtime.ORM.Connection;
use Runtime.ORM.Query;
use Runtime.ORM.QueryResult;
use Runtime.ORM.Relation;
use Runtime.XML.XML;
use Runtime.XML.YamlConverter;


class AppXml
{
	Connection connection = null;
	Relation app = null;
	XML template = null;
	XML template_orig = null;
	string xml_content_orig = "";
	string xml_content = "";
	string yaml_content = "";
	Vector<XML> modificators = null;
	Vector<XML> operations = null;
	Vector<Dict> variables = null;
	
	
	/**
	 * Build content
	 */
	async void buildContent(bool init_template = false)
	{
		/* Load template */
		await this.loadTemplateFromDatabase();
		
		/* Add default modificators */
		if (init_template)
		{
			await this.addDefaultModificators();
		}
		
		/* Load operations */
		await this.loadModificators();
		
		/* Patch template */
		this.patchTemplate();
		this.buildVariables();
		
		/* Get yaml result */
		this.buildYamlContent();
	}
	
	
	/**
	 * Load template content
	 */
	async void loadTemplateFromDatabase()
	{
		if (this.template_orig and this.template_orig.exists()) return;
		
		int template_version_id = (int)this.app.get("template_version_id");
		Relation template_version = await this.connection.findRelationById(
			"templates_versions", template_version_id
		)
		
		if (template_version)
		{
			this.xml_content_orig = template_version.get("content");
			this.template_orig = XML::loadXml(this.xml_content_orig);
		}
	}
	
	
	/**
	 * Patch template
	 */
	void patchTemplate()
	{
		if (not this.template_orig) return;
		if (not this.template_orig.exists()) return;
		
		/* Copy original content */
		this.template = XML::loadXml(this.template_orig.toString());
		
		/* Patch by operations */
		for (int i=0; i<this.operations.count(); i++)
		{
			XML operation = this.operations.get(i);
			this.template.patch(operation);
		}
		
		/* Save new content */
		this.xml_content = this.template.toString({
			"indent-spaces": 2,
		});
	}
	
	
	/**
	 * Build variables
	 */
	void buildVariables()
	{
		this.variables = new Vector();
		
		if (not this.template) return;
		if (not this.template.exists()) return;
		
		Collection<XML> xml_variables = this.template
			|> .get("variables")
			|> .get(0)
			|> .get("variable")
		;
		
		if (xml_variables == null) return;
		
		Dict item_variables_values = this.app.get("variables");
		
		for (int i=0; i<xml_variables.count(); i++)
		{
			XML xml_variable = xml_variables.get(i);
			string name = xml_variable.get("name")
				|> .get(0) |> .value() |> default string ""
			;
			string label = xml_variable.get("label")
				|> .get(0) |> .value() |> default string ""
			;
			string default_value = xml_variable.get("default")
				|> .get(0) |> .value() |> default string ""
			;
			
			if (name == "") continue;
			
			if (item_variables_values.has(name))
			{
				this.variables.push({
					"name": name,
					"label": label,
					"value": item_variables_values.get(name),
				});
			}
			else
			{
				this.variables.push({
					"name": name,
					"label": label,
					"value": default_value,
				});
			}
		}
		
		/* Set app name */
		this.variables.push({
			"name": "_var_app_name_",
			"value": this.app.get("name"),
		});
		this.variables.push({
			"name": "_var_service_name_",
			"value": this.app.get("stack_name") ~ "_" ~ this.app.get("name"),
		});
	}
	
	
	/**
	 * Returns list of patches
	 */
	Collection getPatches()
	{
		Vector patches = new Vector();
		
		patches.push({
			"name": "Template",
			"content": this.xml_content_orig,
		});
		
		for (int i=0; i<this.modificators.count(); i++)
		{
			XML modificator = this.modificators.get(i);
			
			/* Check if xml is exists */
			if (modificator == null)
			{
				continue;
			}
			if (not modificator.exists())
			{
				continue;
			}
			
			/* Push modificator */
			string name = modificator.get("name") |> .get(0) |> .value() |> default string "";
			if (name == "") name = "Unknown";
			patches.push({
				"name": name,
				"content": modificator.toString(),
			});
		}
		
		patches.push({
			"name": "Custom patch",
			"content": this.app.get("custom_patch"),
		});
		
		return patches.toCollection();
	}
	
	
	/**
	 * Returns variables
	 */
	Dict getVariables()
	{
		Map variables = new Map();
		for (int i=0; i<this.variables.count(); i++)
		{
			Dict variable = this.variables.get(i);
			variables.set(
				variable.get("name"),
				variable.get("value"),
			)
		}
		
		return variables.toDict();
	}
	
	
	/**
	 * Build yaml result
	 */
	void buildYamlContent()
	{
		if (not this.template) return;
		if (not this.template.exists()) return;
		
		XML yaml = this.template.get("yaml").get(0);
		if (not yaml) return;
		
		/* Get variables */
		Dict variables = this.getVariables();
		
		YamlConverter converter = new YamlConverter(yaml, variables);
		this.yaml_content = converter.convert({
			"indent-spaces": 2,
		});
	}
	
	
	/**
	 * Patch content
	 */
	static void patchContent(string content, Dict variables)
	{
		Collection variables_keys = variables.keys();
		for (int i=0; i<variables_keys.count(); i++)
		{
			string var_name = variables_keys.get(i);
			string var_value = variables.get(var_name);
			content = rs::replace(var_name, var_value, content);
		}
		return content;
	}
	
	
	/**
	 * Add default modificators
	 */
	async void addDefaultModificators()
	{
		if (not this.template_orig) return;
		if (not this.template_orig.exists()) return;
		
		XML modificators = this.template_orig.get("modificators").get(0);
		if (not modificators) return;
		
		int app_id = this.app.get("id");
		
		Collection<XML> items = modificators.get("li");
		for (int i=0; i<items.count(); i++)
		{
			string modificator_uid = items.get(i).value();
			
			/* Get modificator by uid */
			Query q = (new Query)
				.select("modificators")
				.where("uid", "=", modificator_uid)
			;
			
			Dict item = await this.connection.fetch(q);
			if (item)
			{
				int modificator_id = item["id"];
				
				/* Add modificator to app */
				Query q = (new Query)
					.insert("app_modificators")
					.values({
						"app_id": app_id,
						"modificator_id": modificator_id,
					})
				;
				await this.connection.execute(q);
			}
		}
	}
	
	
	/**
	 * Load modificators
	 */
	async void loadModificators()
	{
		this.modificators = new Vector();
		this.operations = new Vector();
		
		Query q = new Query()
			.select("app_modificators")
			.fields([
				"modificators.*"
			])
			.where("app_id", "=", this.app.get("id"))
			.innerJoin(
				"modificators",
				[
					"modificators.id=app_modificators.modificator_id"
				]
			)
		;
		
		QueryResult modificators = await this.connection.fetchAll(q);
		for (int i=0; i<modificators.count(); i++)
		{
			Relation modificator = modificators.get(i);
			string xml_content = modificator.get("content");
			XML xml = XML::loadXml(xml_content);
			this.addModificator(xml)
		}
		
		/* Add environments */
		this.addModificator(this.getEnvironmentsModificator());
		
		/* Add volumes */
		this.addModificator(this.getVolumesModificator());
		
		/* Add template patch */
		this.addModificator(this.getTemplatePatchModificator());
		
		/* Add custom patch */
		this.addModificator(this.getCustomPatchModificator());
		
		/* Sort current operations */
		this.sortOperations();
	}
	
	
	/**
	 * Add modificator
	 */
	void addModificator(XML xml)
	{
		if (xml == null) return;
		this.addOperations(xml);
		this.modificators.push(xml);
	}
	
	
	/**
	 * Add operations
	 */
	void addOperations(XML xml)
	{
		if (xml == null) return;
		if (not xml.exists()) return;
		
		int priority = 100;
		string xml_priority = xml.get("priority").get(0);
		if (xml_priority)
		{
			priority = (int)xml_priority.value();
		}
		
		XML xml_operations = xml.get("operations").get(0);
		if (xml_operations == null) return;
		
		Collection<XML> operations = xml_operations.get("operation");
		for (int i=0; i<operations.count(); i++)
		{
			XML operation = operations.get(i);
			operation.removeAttribute("priority");
			operation.addAttribute("priority", priority);
			this.operations.push(operation);
		}
	}
	
	
	/**
	 * Sort operations
	 */
	void sortOperations()
	{
		this.operations.sort(
			int (XML a, XML b)
			{
				int priority_a = a.get("priority").get(0) |> .value() |> default int 100;
				int priority_b = b.get("priority").get(0) |> .value() |> default int 100;
				return priority_a - priority_b;
			}
		)
	}
	
	
	/**
	 * Returns environments modificator
	 */
	XML getEnvironmentsModificator()
	{
		Vector content = new Vector();
		
		content.push('<?xml version="1.1" encoding="UTF-8" ?>');
		content.push('<patch>');
		content.push('  <name>Environments</name>');
		content.push('  <priority>200</priority>');
		content.push('  <operations>');
		
		Collection environments = this.app.get("environments");
		if (environments != null)
		{
			for (int i=0; i<environments.count(); i++)
			{
				Dict value = environments.get(i);
				
				/* Check if enable */
				int enable = (int)value.get("enable");
				if (enable != 1)
				{
					continue;
				}
				
				string env_name = value.get("key");
				string env_value = value.get("value");
				content.push('    <operation type="add">');
				content.push('      <path>/template/yaml/services/*/environment[not(' ~
					env_name ~  ')]</path>'); /**/
				content.push('      <value>');
				content.push('        <' ~ env_name ~  '>' ~ env_value ~ '</' ~ env_name ~  '>');
				content.push('      </value>');
				content.push('    </operation>');
			}
		}
		
		content.push('  </operations>');
		content.push('</patch>');
		
		string xml_content = rs::join("\n", content);
		return XML::loadXml(xml_content);
	}
	
	
	/**
	 * Returns volumes modificator
	 */
	XML getVolumesModificator()
	{
		Vector content = new Vector();
		
		content.push('<?xml version="1.1" encoding="UTF-8" ?>');
		content.push('<patch>');
		content.push('  <name>Volumes</name>');
		content.push('  <priority>200</priority>');
		content.push('  <operations>');
		
		Collection volumes = this.app.get("volumes");
		if (volumes != null)
		{
			for (int i=0; i<volumes.count(); i++)
			{
				Dict value = volumes.get(i);
				
				/* Check if enable */
				int enable = (int)value.get("enable");
				if (enable != 1)
				{
					continue;
				}
				
				string volume_name = value.get("key");
				string volume_value = value.get("value");
				content.push('    <operation type="add">');
				content.push('      <path>/template/yaml/services/*</path>');/**/
				content.push('      <value>');
				content.push('        <volumes array="true">' ~
					volume_name ~ ':' ~ volume_value ~ '</volumes>')
				;
				content.push('      </value>');
				content.push('    </operation>');
				
				/* Add volume description */
				if (rs::indexOf(volume_name, "/") == -1)
				{
					content.push('    <operation type="add">');
					content.push('      <path>/template/yaml/volumes</path>');
					content.push('      <value>');
					content.push('        <' ~ volume_name ~ '/>');
					content.push('      </value>');
					content.push('    </operation>');
				}
			}
		}
		
		content.push('  </operations>');
		content.push('</patch>');
		
		string xml_content = rs::join("\n", content);
		return XML::loadXml(xml_content);
	}
	
	
	/**
	 * Returns template patch modificator
	 */
	XML getTemplatePatchModificator()
	{
		if (not this.template_orig) return null;
		if (not this.template_orig.exists()) return null;
		
		XML template_patch = this.template_orig.get("patch").get(0);
		if (template_patch != null)
		{
			Vector names = template_patch.get("name");
			for (int i=0; i<names.count(); i++) names.get(i).remove();
			template_patch.prepend(XML::loadXml("<name>Template patch</name>"));
		}
		
		return template_patch;
	}
	
	
	/**
	 * Returns custom patch modificator
	 */
	XML getCustomPatchModificator()
	{
		string xml_content = this.app.get("custom_patch");
		return XML::loadXml(xml_content);
	}
}