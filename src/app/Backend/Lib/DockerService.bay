/*!
 *  Bayrell Cloud OS
 *
 *  (c) Copyright 2020-2023 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Bayrell.CloudOS.Backend.Lib;

use Runtime.fs;
use Runtime.ORM.Connection;
use Runtime.ORM.Query;
use Runtime.ORM.Relation;
use Bayrell.CloudOS.Backend.Lib.DockerApi;


class DockerService
{
	/**
	 * Returns ip addresses
	 */
	static Vector getIpAddresses(Dict service, string network_name)
	{
		Vector ip_res = new Vector();
		
		Collection tasks = service["docker_tasks"];
		if (tasks == null) return ip_res;
		
		for (int tasks_i=0; tasks_i<tasks.count(); tasks_i++)
		{
			Dict task = tasks[tasks_i];
			
			string state = task["Status", "State"];
			string desired_state = task["DesiredState"];
			if (state != "running") continue;
			if (desired_state != "running") continue;
			
			Collection networks = task["NetworksAttachments"];
			if (networks == null) continue;
			
			for (int networks_i=0; networks_i<networks.count(); networks_i++)
			{
				Dict network = networks[networks_i];
				string name = network["Network", "Spec", "Name"];
				if (name == network_name)
				{
					Collection addresses = network["Addresses"];
					for (int addresses_i=0; addresses_i<addresses.count(); addresses_i++)
					{
						string address = addresses[addresses_i];
						Collection arr = rs::split("/", address);
						ip_res.push(arr[0]);
					}
				}
			}
		}
		
		return ip_res;
	}
	
	
	/**
	 * Compose app
	 */
	async static string composeApp(Relation app)
	{
		Connection conn = Connection::getConnection();
		
		/* Find yaml file */
		Relation yaml = await conn.findOrCreate(
			"docker_yaml_files",
			{
				"file_name": app.get("name") ~ ".conf",
				"stack_name": app.get("stack_name"),
			}
		);
		
		/* Create yaml file if does not exists */
		int yaml_file_id = (int)app.get("yaml_file_id");
		if (yaml_file_id == 0)
		{
			Relation yaml = new Relation("docker_yaml_files");
		}
		
		/* Replace yaml file if wrong id */
		else if (yaml.get("id") != yaml_file_id)
		{
			await yaml.delete(conn);
			Relation yaml = new Relation("docker_yaml_files");
		}
		
		/* Save yaml */
		yaml.set("file_name", app.get("name") ~ ".conf");
		yaml.set("stack_name", app.get("stack_name"));
		yaml.set("content", app.get("yaml"));
		yaml.save(conn);
		
		/* Save app */
		app.set("yaml_file_id", yaml.get("id"));
		app.save(conn);
		
		/* Compose yaml file */
		string message = await static::composeYamlFile(yaml);
		
		/* Set run status if success */
		app.set("status", 1);
		app.save(conn);
		
		return message;
	}
	
	
	/**
	 * Save yaml file
	 */
	async static string saveYamlFile(Relation yaml)
	{
		string file_path = "/data/yaml/" ~ yaml.get("stack_name") ~ "/" ~ yaml.get("file_name");
		string file_dirname = rs::dirname(file_path);
		string content = yaml.get("content");
		await fs::mkdir(file_dirname);
		await fs::saveFile(file_path, content);
	}
	
	
	/**
	 * Compose yaml file
	 */
	async static string composeYamlFile(Relation yaml)
	{
		/* Save file */
		await static::saveYamlFile(yaml);
		
		string file_path = "/data/yaml/" ~ yaml.get("stack_name") ~ "/" ~ yaml.get("file_name");
		string result = await DockerApi::compose(file_path, yaml.get("stack_name"));
		
		return result;
	}
	
	
	/**
	 * Stop app
	 */
	async static string stopApp(Relation app)
	{
		Connection conn = Connection::getConnection();
		
		/* Set stop status */
		app.set("status", 0);
		app.save(conn);
		
		/* Stop service */
		string service_name = app.get("stack_name") ~ "_" ~ app.get("name")
		return await static::stopService(service_name);
	}
	
	
	/**
	 * Stop service
	 */
	async static string stopService(string service_name)
	{
		await DockerApi::removeService(service_name);
		return "Service stopped";
	}
	
	
	/**
	 * Update service in database
	 */
	async static void update(Dict service, int timestamp = 0)
	{
		Connection conn = Connection::getConnection();
		
		string service_id = service["ID"];
		string service_name = service["Spec", "Name"];
		string service_image = service["Spec", "Labels", "com.docker.stack.image"];
		string stack_name = service["Spec", "Labels", "com.docker.stack.namespace"];
		string service_short_name = rs::substr(service["Spec", "Name"], rs::strlen(stack_name) + 1);
		
		Relation item = await conn.findRelationByObject(
			"docker_services",
			{
				"docker_name": service_name,
			}
		);
		
		if (item == null)
		{
			item = new Relation("docker_services");
		}
		
		int count_work = 0;
		int count_total = service["Spec", "Mode", "Replicated", "Replicas"];
		
		Collection service_tasks = DockerApi::getServiceTasks(service_name);
		for (int i=0; i<service_tasks.count(); i++)
		{
			Dict task = service_tasks.get(i);
			string state = task["Status", "State"];
			string desired_state = task["DesiredState"];
			if (state == "running" and desired_state == "running")
			{
				count_work++;
			}
		}
		
		item.set("docker_name", service_name);
		item.set("stack_name", stack_name);
		item.set("service_name", service_short_name);
		item.set("docker_image", service_image);
		item.set("is_deleted", 0);
		item.set("enable", 1);
		item.set("timestamp", timestamp);
		item.set("docker_json", service);
		item.set("docker_tasks", service_tasks);
		item.set("count_work", count_work);
		item.set("count_total", count_total);
		item.save(conn);
	}
	
	
	/**
	 * Remove old services
	 */
	async static void removeOldServices(int timestamp)
	{
		Connection conn = Connection::getConnection();
		
		/* Update old services */
		Query q = new Query()
			|> .update("docker_services")
			|> .values({
				"enable": 0,
				"is_deleted": 1,
			})
			|> .where('is_deleted', '=', 0)
			|> .where('timestamp', '<', timestamp - 15)
		;
		conn.execute(q);
		
		/* Delete old services */
		Query q = new Query()
			|> .delete("docker_services")
			|> .where('is_deleted', '=', 1)
			|> .where('timestamp', '<', timestamp - 24*60*60)
		;
		conn.execute(q);
	}
	
}